<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ctrip.Duckbill</name>
    </assembly>
    <members>
        <member name="T:Ctrip.Duckbill.ABTesting.ABTestingResult">
            <summary>
            ABTesting Result.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.ABTesting.ABTestingResult.Alternative">
            <summary>
            Gets or sets the alternative.
            </summary>
            <value>
            The alternative.
            </value>
        </member>
        <member name="P:Ctrip.Duckbill.ABTesting.ABTestingResult.Result">
            <summary>
            Gets or sets the result.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="P:Ctrip.Duckbill.ABTesting.ABTestingResult.IsOffline">
            <summary>
            Gets or sets a value indicating whether this instance is offline.
            </summary>
            <value>
            <c>true</c> if this instance is offline; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Ctrip.Duckbill.ABTesting.IABTestingManager">
            <summary>
            AB testing manager.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.ABTesting.IABTestingManager.GetResult(System.String,System.String)">
            <summary>
            Gets the result.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="testName">Name of the test.</param>
            <returns>AB testing result.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.ABTesting.IABTestingManager.GetResultToUbt(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Gets the result.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="testName">Name of the test.</param>
            <param name="dic">The dic.</param>
            <returns>
            AB testing result.
            </returns>
        </member>
        <member name="T:Ctrip.Duckbill.ABTesting.Implementation.ABTestingManager">
            <summary>
            Not implement ab testing manager.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.ABTesting.Implementation.ABTestingManager.GetResult(System.String,System.String)">
            <summary>
            Gets the result.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="testName">Name of the test.</param>
            <returns>
            AB testing result.
            </returns>
        </member>
        <member name="M:Ctrip.Duckbill.ABTesting.Implementation.ABTestingManager.GetResultToUbt(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Gets the result.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="testName">Name of the test.</param>
            <param name="dic">The dic.</param>
            <returns>
            AB testing result.
            </returns>
        </member>
        <member name="T:Ctrip.Duckbill.Cache.ICacheConfigUnit">
            <summary>
            Cache config unit interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.ICacheConfigUnit.Key">
            <summary>
            Gets cache key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.ICacheConfigUnit.CacheKey">
            <summary>
            Gets cache key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.ICacheConfigUnit.AbsoluteExpiration">
            <summary>
            Gets a value that indicates whether a cache entry should be evicted after a specified duration.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.ICacheConfigUnit.SlidingExpiration">
            <summary>
            Gets a value that indicates whether a cache entry should be evicted if it has not been accessed in a given span of time.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.ICacheConfigUnit.DependentPath">
            <summary>
            Gets dependentpaths.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Cache.ICacheDescription">
            <summary>
            Description of cache item.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.ICacheDescription.DependentPath">
            <summary>
            Gets or sets the dependent paths.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Cache.ICacheItem">
            <summary>
            Cache item interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.ICacheItem.ContentObject">
            <summary>
            Gets or sets cache content object.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Cache.ICacheItemFactory">
            <summary>
            Cache item factory.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.ICacheItemFactory.CreateCacheItem">
            <summary>
            Create empty cache item.
            </summary>
            <returns>Empty cache item.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.ICacheItemFactory.CreateCacheItem``1">
            <summary>
            Create empty cache item.
            </summary>
            <typeparam name="TContent">Type of cache content.</typeparam>
            <returns>Empty cache item.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Cache.ICacheItemTime">
            <summary>
            Cache item time information.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.ICacheItemTime.Key">
            <summary>
            Gets or sets cache key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.ICacheItemTime.CachingTime">
            <summary>
            Gets or sets the time for caching this item.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.ICacheItemTime.ExpirationTime">
            <summary>
            Gets or sets the exact time that this cache will expire.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.ICacheItemTime.AbsoluteExpiration">
            <summary>
            Gets or sets a value that indicates whether a cache entry should be evicted after a specified duration.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.ICacheItemTime.SlidingExpiration">
            <summary>
            Gets or sets a value that indicates whether a cache entry should be evicted if it has not been accessed in a given span of time.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Cache.ICacheItem`1">
            <summary>
            Generic cache item interface.
            </summary>
            <typeparam name="T">Type of content.</typeparam>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.ICacheItem`1.Content">
            <summary>
            Gets or sets cache generic content.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Cache.ICacheManager">
            <summary>
            Cache manager interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.ICacheManager.ContainsKey(System.String)">
            <summary>
            Determines whether <see cref="T:Ctrip.Duckbill.Cache.ICacheManager"/> contains the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Ctrip.Duckbill.Cache.ICacheManager"/>.</param>
            <returns>True if the <see cref="T:Ctrip.Duckbill.Cache.ICacheManager"/> contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.ICacheManager.CreateEmptyCacheItem``1">
            <summary>
            Create empty cache item.
            </summary>
            <typeparam name="T">Type of cache content.</typeparam>
            <returns>Empty cache item.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.ICacheManager.GetOrAdd``1(System.String,System.Func{Ctrip.Duckbill.Cache.ICacheItem{``0}})">
            <summary>
            Uses the specified content to add a key/value pair to the <see cref="T:Ctrip.Duckbill.Cache.ICacheManager"/> if the key does not already exist.
            </summary>
            <typeparam name="T">Type of cache item content.</typeparam>
            <param name="key">The key of the element to add.</param>
            <param name="valueFactory">The function used to generate a value for the key.</param>
            <returns>The cache content for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value for the key as returned by valueFactory if the key was not in the dictionary.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.ICacheManager.GetOrAdd``1(Ctrip.Duckbill.Cache.ICacheItem{``0})">
            <summary>
            Uses the specified content to add a key/value pair to the <see cref="T:Ctrip.Duckbill.Cache.ICacheManager"/> if the key does not already exist.
            </summary>
            <typeparam name="T">Type of cache item content.</typeparam>
            <param name="cacheItem">The cache item to be added.</param>
            <returns>The cache content  for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.ICacheManager.GetOrAdd``1(System.String,System.String,System.Func{``0})">
            <summary>
            Uses the specified content to add a key/value pair to the <see cref="T:Ctrip.Duckbill.Cache.ICacheManager"/> if the key does not already exist.
            </summary>
            <typeparam name="T">Type of cache item content.</typeparam>
            <param name="key">The key of the element to add. If the key is empty cache key in config will be used.</param>
            <param name="configKey">Cache config key. If the config key is empty, the default config will be used.</param>
            <param name="contentFactory">The function used to generate the cache content for the key.</param>
            <returns>The cache content  for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value for the key as returned by contentFactory if the key was not in the dictionary.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.ICacheManager.GetOrAdd``1(System.String,System.String,``0)">
            <summary>
            Uses the specified content to add a key/value pair to the <see cref="T:Ctrip.Duckbill.Cache.ICacheManager"/> if the key does not already exist.
            </summary>
            <typeparam name="T">Type of cache item content.</typeparam>
            <param name="key">The key of the element to add. If the key is empty cache key in config will be used.</param>
            <param name="configKey">Cache config key.If the config key is empty, the default config will be used.</param>
            <param name="cacheContent">The cache content to be added.</param>
            <returns>The cache content  for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.ICacheManager.AddOrUpdate``1(Ctrip.Duckbill.Cache.ICacheItem{``0})">
            <summary>
            Uses the specified content to add a key/value pair to the <see cref="T:Ctrip.Duckbill.Cache.ICacheManager"/> if the key does not already exist, or to update a key/value pair in the <see cref="T:Ctrip.Duckbill.Cache.ICacheManager"/> if the key already exists.
            </summary>
            <typeparam name="T">Type of cache item content.</typeparam>
            <param name="cacheItem">The cache item to be added or whose value should be updated.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.ICacheManager.AddOrUpdate``1(System.String,System.String,``0)">
            <summary>
            Uses the specified content to add a key/value pair to the <see cref="T:Ctrip.Duckbill.Cache.ICacheManager"/> if the key does not already exist, or to update a key/value pair in the <see cref="T:Ctrip.Duckbill.Cache.ICacheManager"/> if the key already exists.
            </summary>
            <typeparam name="T">Type of cache item content.</typeparam>
            <param name="key">The key to be added or whose value should be updated.</param>
            <param name="configKey">Cache config key.If the config key is empty, the default config will be used.</param>
            <param name="cacheContent">The cache content to be added or whose value should be updated.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.ICacheManager.GetCacheItem``1(System.String)">
            <summary>
            Get cache item.
            </summary>
            <typeparam name="T">Type of cache content.</typeparam>
            <param name="key">The key of the value to get.</param>
            <returns>Cache item.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.ICacheManager.GetCacheContent``1(System.String)">
            <summary>
            Get cache content.
            </summary>
            <typeparam name="T">Type of cache content.</typeparam>
            <param name="key">The key of the value to get.</param>
            <returns>Cache content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.ICacheManager.GetCacheInformation">
            <summary>
            Get all cache information.
            </summary>
            <returns>Cache information collection.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.ICacheManager.GetCacheInformation(System.String)">
            <summary>
            Get cache information by key.
            </summary>
            <param name="key">The key of cache item.</param>
            <returns>Special cache information.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.ICacheManager.Clear">
            <summary>
            Clear all cache.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.ICacheManager.Clear(System.String)">
            <summary>
            Clear cache by key.
            </summary>
            <param name="key">The key of cache item.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Cache.ICacheMonitorFactory">
            <summary>
            Cache monitor factory interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.ICacheMonitorFactory.CreatePathsMonitor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create paths monitor.
            </summary>
            <param name="paths">Monitored paths.</param>
            <returns>Paths change monitor.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Cache.ICachesConfigRepository">
            <summary>
            Caches config repository interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.ICachesConfigRepository.GetConfig(System.String)">
            <summary>
            Get cache config by key.
            </summary>
            <param name="key">Requested cache config key.</param>
            <returns>Cache config unit.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.ICachesConfigRepository.GetDefaultConfig">
            <summary>
            Get default cache config.
            </summary>
            <returns>Default cache config unit.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Cache.IMemoryCache">
            <summary>
            Memory cache.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.IMemoryCache.Name">
            <summary>
            Gets memory cache name.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.IMemoryCache.Contains(System.String)">
            <summary>
            Check whether cache contains the key.
            </summary>
            <param name="cacheKey">Cache key.</param>
            <returns>True contains, false not.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.IMemoryCache.GetContent``1(System.String)">
            <summary>
            Get cache content.
            </summary>
            <typeparam name="TContent">Type of content.</typeparam>
            <param name="cacheKey">Cache key.</param>
            <returns>Cache content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.IMemoryCache.GetCacheItem``1(System.String)">
            <summary>
            Gets the cache item.
            </summary>
            <typeparam name="TContent">The type of the t content.</typeparam>
            <param name="cacheKey">The cache key.</param>
            <returns>Cache item.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.IMemoryCache.TryGetContent``1(System.String,``0@)">
            <summary>
            Try get cache content.
            </summary>
            <typeparam name="TContent">Type of content.</typeparam>
            <param name="cacheKey">Cache key.</param>
            <param name="content">Cache content.</param>
            <returns>True cache item is exist, false is not.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.IMemoryCache.AddOrUpdate``1(Ctrip.Duckbill.Cache.ICacheItem{``0})">
            <summary>
            Add or update cache item.
            </summary>
            <typeparam name="TContent">Type of cache content.</typeparam>
            <param name="cacheItem">Cache item.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.IMemoryCache.Clear">
            <summary>
            Clears all cache.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.IMemoryCache.Remove(System.String)">
            <summary>
            Removes the specified cache key.
            </summary>
            <param name="cacheKey">The cache key.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.IMemoryCache.Report">
            <summary>
            Report contains cache item information.
            </summary>
            <returns>Cache item information description.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.IMemoryCache.Report(System.String)">
            <summary>
            Report special cache item information.
            </summary>
            <param name="cacheKey">Cache key.</param>
            <returns>Cache item information description.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Cache.IMemoryCacheRepository">
            <summary>
            Memory cache repository.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.IMemoryCacheRepository.GetOrGenerate(System.String)">
            <summary>
            Get or generate cache.
            </summary>
            <param name="cacheName">Cache name.</param>
            <returns>Runtime cache.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.IMemoryCacheRepository.Report">
            <summary>
            Report contains cache item information.
            </summary>
            <returns>Cache item information description.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Cache.Implement.CacheItemFactory">
            <summary>
            Cache item factory.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.CacheItemFactory.CreateCacheItem">
            <summary>
            Create empty cache item.
            </summary>
            <returns>Empty cache item.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.CacheItemFactory.CreateCacheItem``1">
            <summary>
            Create empty cache item.
            </summary>
            <typeparam name="TContent">Type of cache content.</typeparam>
            <returns>Empty cache item.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Cache.Implement.CacheManager">
            <summary>
            Default cache manager. Implement by system.runtime.cache.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cache.Implement.CacheManager.memoryCache">
            <summary>
            Field of system cache manager.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cache.Implement.CacheManager.configRepository">
            <summary>
            Cache config repository.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.CacheManager.#ctor(Ctrip.Duckbill.Cache.IMemoryCacheRepository,Ctrip.Duckbill.Cache.ICachesConfigRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Cache.Implement.CacheManager" /> class.
            </summary>
            <param name="memoryCacheRepository">The memory cache repository.</param>
            <param name="configRepository">The configuration repository.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.CacheManager.CreateEmptyCacheItem``1">
            <summary>
            Create empty cache item.
            </summary>
            <typeparam name="T">Type of cache content.</typeparam>
            <returns>Empty cache item.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.CacheManager.ContainsKey(System.String)">
            <summary>
            Determines whether <see cref="T:Ctrip.Duckbill.Cache.ICacheManager"/> contains the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Ctrip.Duckbill.Cache.ICacheManager"/>.</param>
            <returns>True if the <see cref="T:Ctrip.Duckbill.Cache.ICacheManager"/> contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.CacheManager.GetOrAdd``1(System.String,System.Func{Ctrip.Duckbill.Cache.ICacheItem{``0}})">
            <summary>
            Uses the specified content to add a key/value pair to the <see cref="T:Ctrip.Duckbill.Cache.ICacheManager"/> if the key does not already exist.
            </summary>
            <typeparam name="T">Type of cache item content.</typeparam>
            <param name="key">The key of the element to add.</param>
            <param name="valueFactory">The function used to generate a value for the key.</param>
            <returns>The cache content for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value for the key as returned by valueFactory if the key was not in the dictionary.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.CacheManager.GetOrAdd``1(Ctrip.Duckbill.Cache.ICacheItem{``0})">
            <summary>
            Uses the specified content to add a key/value pair to the <see cref="T:Ctrip.Duckbill.Cache.ICacheManager"/> if the key does not already exist.
            </summary>
            <typeparam name="T">Type of cache item content.</typeparam>
            <param name="cacheItem">The cache item to be added.</param>
            <returns>The cache content  for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.CacheManager.GetOrAdd``1(System.String,System.String,System.Func{``0})">
            <summary>
            Uses the specified content to add a key/value pair to the <see cref="T:Ctrip.Duckbill.Cache.ICacheManager"/> if the key does not already exist.
            </summary>
            <typeparam name="T">Type of cache item content.</typeparam>
            <param name="key">The key of the element to add. If the key is empty cache key in config will be used.</param>
            <param name="configKey">Cache config key. If the config key is empty, the default config will be used.</param>
            <param name="contentFactory">The function used to generate the cache content for the key.</param>
            <returns>The cache content  for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value for the key as returned by contentFactory if the key was not in the dictionary.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.CacheManager.GetOrAdd``1(System.String,System.String,``0)">
            <summary>
            Uses the specified content to add a key/value pair to the <see cref="T:Ctrip.Duckbill.Cache.ICacheManager"/> if the key does not already exist.
            </summary>
            <typeparam name="T">Type of cache item content.</typeparam>
            <param name="key">The key of the element to add. If the key is empty cache key in config will be used.</param>
            <param name="configKey">Cache config key.If the config key is empty, the default config will be used.</param>
            <param name="cacheContent">The cache content to be added.</param>
            <returns>The cache content  for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.CacheManager.AddOrUpdate``1(Ctrip.Duckbill.Cache.ICacheItem{``0})">
            <summary>
            Uses the specified content to add a key/value pair to the <see cref="T:Ctrip.Duckbill.Cache.ICacheManager"/> if the key does not already exist, or to update a key/value pair in the <see cref="T:Ctrip.Duckbill.Cache.ICacheManager"/> if the key already exists.
            </summary>
            <typeparam name="T">Type of cache item content.</typeparam>
            <param name="cacheItem">The cache item to be added or whose value should be updated.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.CacheManager.AddOrUpdate``1(System.String,System.String,``0)">
            <summary>
            Uses the specified content to add a key/value pair to the <see cref="T:Ctrip.Duckbill.Cache.ICacheManager"/> if the key does not already exist, or to update a key/value pair in the <see cref="T:Ctrip.Duckbill.Cache.ICacheManager"/> if the key already exists.
            </summary>
            <typeparam name="T">Type of cache item content.</typeparam>
            <param name="key">The key to be added or whose value should be updated.</param>
            <param name="configKey">Cache config key.If the config key is empty, the default config will be used.</param>
            <param name="cacheContent">The cache content to be added or whose value should be updated.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.CacheManager.GetCacheItem``1(System.String)">
            <summary>
            Get cache item.
            </summary>
            <typeparam name="T">Type of cache content.</typeparam>
            <param name="key">The key of the value to get.</param>
            <returns>Cache item.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.CacheManager.GetCacheContent``1(System.String)">
            <summary>
            Get cache content.
            </summary>
            <typeparam name="T">Type of cache content.</typeparam>
            <param name="key">The key of the value to get.</param>
            <returns>Cache content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.CacheManager.GetCacheInformation">
            <summary>
            Get description message of system cache items.
            </summary>
            <returns>Description message list.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.CacheManager.GetCacheInformation(System.String)">
            <summary>
            Get cache msg by key.
            </summary>
            <param name="key">The key of cache item.</param>
            <returns>Description of cache item.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.CacheManager.Clear">
            <summary>
            Clear all cache.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.CacheManager.Clear(System.String)">
            <summary>
            Clear cache by key.
            </summary>
            <param name="key">The key of cache item.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.CacheManager.GetCacheKey(System.String,System.String)">
            <summary>
            Gets the cache key.
            </summary>
            <param name="key">The key.</param>
            <param name="configKey">The configuration key.</param>
            <returns>Cache key.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.CacheManager.CreateCacheItem``1(System.String,System.String)">
            <summary>
            Creates the cache item.
            </summary>
            <typeparam name="TCacheContent">The type of the t cache content.</typeparam>
            <param name="key">The key.</param>
            <param name="configKey">The configuration key.</param>
            <returns>Cache item.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.CacheManager.CreateCacheItemByKey``1(System.String,System.String)">
            <summary>
            Creates the cache item by key.
            </summary>
            <typeparam name="TCacheContent">The type of the t cache content.</typeparam>
            <param name="key">The key.</param>
            <param name="configKey">The configuration key.</param>
            <returns>Cache item with key.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.CacheManager.CreateCacheItemByConfigurationKey``1(System.String)">
            <summary>
            Creates the cache item by configuration key.
            </summary>
            <typeparam name="TCacheContent">Cache content type.</typeparam>
            <param name="configKey">The configuration key.</param>
            <returns>Cache item with key.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.CacheManager.GetConfigIncludeDefault(System.String)">
            <summary>
            Get cache config by config key. If can't find the config then use the default config.
            </summary>
            <param name="configKey">Cache config key.</param>
            <returns>Cache config instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.CacheManager.GetConfigExceptDefault(System.String)">
            <summary>
            Get cache config by config key. If can't find the config return null.
            </summary>
            <param name="configKey">Cache config key.</param>
            <returns>Cache config instance.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Cache.Implement.CacheMonitorFactory">
            <summary>
            Default cache monitor factory.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cache.Implement.CacheMonitorFactory.watcherFactory">
            <summary>
            Watcher factory.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cache.Implement.CacheMonitorFactory.now">
            <summary>
            Date time now.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cache.Implement.CacheMonitorFactory.staticPath">
            <summary>
            Static path.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cache.Implement.CacheMonitorFactory.staticDirectory">
            <summary>
            Static directory.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.CacheMonitorFactory.#ctor(Ctrip.Duckbill.IO.IDirectoryWatcherFactory,Ctrip.Duckbill.INow,Ctrip.Duckbill.IO.IStaticPath,Ctrip.Duckbill.IO.IStaticDirectory)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Cache.Implement.CacheMonitorFactory"/> class.
            </summary>
            <param name="watcherFactory">Watcher factory.</param>
            <param name="now">Date time now.</param>
            <param name="staticPath">Static path.</param>
            <param name="staticDirectory">Static directory.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.CacheMonitorFactory.CreatePathsMonitor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create paths monitor.
            </summary>
            <param name="paths">Monitored paths.</param>
            <returns>Paths change monitor.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Cache.Implement.Configuration.CacheConfigUnit">
            <summary>
            Cache config unit.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.Implement.Configuration.CacheConfigUnit.Key">
            <summary>
            Gets or sets cache key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.Implement.Configuration.CacheConfigUnit.CacheKey">
            <summary>
            Gets or sets cache key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.Implement.Configuration.CacheConfigUnit.AbsoluteExpirationExpression">
            <summary>
            Gets or sets a value that indicates whether a cache entry should be evicted after a specified duration.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.Implement.Configuration.CacheConfigUnit.AbsoluteExpiration">
            <summary>
            Gets or sets a value that indicates whether a cache entry should be evicted after a specified duration.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.Implement.Configuration.CacheConfigUnit.SlidingExpirationExpression">
            <summary>
            Gets or sets a value that indicates whether a cache entry should be evicted if it has not been accessed in a given span of time.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.Implement.Configuration.CacheConfigUnit.SlidingExpiration">
            <summary>
            Gets or sets a value that indicates whether a cache entry should be evicted if it has not been accessed in a given span of time.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.Implement.Configuration.CacheConfigUnit.DependentPath">
            <summary>
            Gets or sets dependent paths.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Cache.Implement.Configuration.CacheConfigUnitCollection">
            <summary>
            Cache config unit collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.Implement.Configuration.CacheConfigUnitCollection.DefaultCacheConfigKey">
            <summary>
            Gets or sets default cache config key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.Implement.Configuration.CacheConfigUnitCollection.Collection">
            <summary>
            Gets or sets cache collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Cache.Implement.Configuration.CachesConfig">
            <summary>
            Caches config.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.Implement.Configuration.CachesConfig.Caches">
            <summary>
            Gets or sets cache collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Cache.Implement.Configuration.CachesConfigRepository">
            <summary>
            Default implement of cache config repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cache.Implement.Configuration.CachesConfigRepository.configurationAccessor">
            <summary>
            The configuration accessor.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.Configuration.CachesConfigRepository.#ctor(Ctrip.Duckbill.Configuration.IConfigurationAccessor)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Cache.Implement.Configuration.CachesConfigRepository"/> class.
            </summary>
            <param name="configurationAccessor">The configuration accessor.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.Configuration.CachesConfigRepository.GetConfig(System.String)">
            <summary>
            Get cache config by key.
            </summary>
            <param name="key">Requested cache config key.</param>
            <returns>Cache config unit.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.Configuration.CachesConfigRepository.GetDefaultConfig">
            <summary>
            Get default cache config.
            </summary>
            <returns>Default cache config unit.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.Configuration.CachesConfigRepository.TryGetCachesConfig(Ctrip.Duckbill.Cache.Implement.Configuration.CachesConfig@)">
            <summary>
            Tries the get caches configuration.
            </summary>
            <param name="configuration">The configuration.</param>
            <returns><c>true</c> if configuration has value, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Cache.Implement.DefaultCacheItem">
            <summary>
            Default implement of cache item.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.DefaultCacheItem.#ctor">
            <summary>
            Initializes a new instance of the DefaultCacheItem class.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.DefaultCacheItem.#ctor(Ctrip.Duckbill.Cache.ICacheConfigUnit)">
            <summary>
            Initializes a new instance of the DefaultCacheItem class.
            </summary>
            <param name="config">Cache config.</param>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.Implement.DefaultCacheItem.Key">
            <summary>
            Gets or sets cache key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.Implement.DefaultCacheItem.ContentObject">
            <summary>
            Gets or sets cache content object.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.Implement.DefaultCacheItem.CachingTime">
            <summary>
            Gets or sets the time for caching this item.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.Implement.DefaultCacheItem.ExpirationTime">
            <summary>
            Gets or sets the exact time that this cache will expire.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.Implement.DefaultCacheItem.AbsoluteExpiration">
            <summary>
            Gets or sets a value that indicates whether a cache entry should be evicted after a specified duration.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.Implement.DefaultCacheItem.SlidingExpiration">
            <summary>
            Gets or sets a value that indicates whether a cache entry should be evicted if it has not been accessed in a given span of time.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.Implement.DefaultCacheItem.DependentPath">
            <summary>
            Gets or sets the dependent paths.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.DefaultCacheItem.LoadConfiguration(Ctrip.Duckbill.Cache.ICacheConfigUnit)">
            <summary>
            Loads the configuration.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Cache.Implement.DefaultCacheItem`1">
            <summary>
            Default implement of cache item.
            </summary>
            <typeparam name="T">Type of content.</typeparam>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.DefaultCacheItem`1.#ctor">
            <summary>
            Initializes a new instance of the DefaultCacheItem class.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.DefaultCacheItem`1.#ctor(Ctrip.Duckbill.Cache.ICacheConfigUnit)">
            <summary>
            Initializes a new instance of the DefaultCacheItem class.
            </summary>
            <param name="config">Cache config.</param>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.Implement.DefaultCacheItem`1.ContentObject">
            <summary>
            Gets or sets cache content object.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.Implement.DefaultCacheItem`1.Content">
            <summary>
            Gets or sets cache content.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Cache.Implement.PathsChangeMonitor">
            <summary>
            Paths change monitor.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cache.Implement.PathsChangeMonitor.myGuid">
            <summary>
            My guid.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cache.Implement.PathsChangeMonitor.watchers">
            <summary>
            Directory watchers.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cache.Implement.PathsChangeMonitor.paths">
            <summary>
            Watched paths.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cache.Implement.PathsChangeMonitor.myLastModifyTime">
            <summary>
            My last modify time.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.PathsChangeMonitor.#ctor(System.Collections.Generic.IEnumerable{System.String},Ctrip.Duckbill.IO.IDirectoryWatcherFactory,Ctrip.Duckbill.INow,Ctrip.Duckbill.IO.IStaticPath,Ctrip.Duckbill.IO.IStaticDirectory)">
            <summary>
            Initializes a new instance of the PathsChangeMonitor class.
            </summary>
            <param name="paths">Monitored paths.</param>
            <param name="watcherFactory">Watcher factory.</param>
            <param name="now">Date time now.</param>
            <param name="staticPath">Static path.</param>
            <param name="staticDirectory">Static directory.</param>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.Implement.PathsChangeMonitor.FilePaths">
            <summary>
            Gets a collection that contains the paths of files that are monitored for changes.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.Implement.PathsChangeMonitor.LastModified">
            <summary>
            Gets a value that indicates the last time that a file that is being monitored was changed.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.Implement.PathsChangeMonitor.UniqueId">
            <summary>
            Gets a value that represents the System.Runtime.Caching.ChangeMonitor class instance.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.PathsChangeMonitor.Dispose(System.Boolean)">
            <summary>
            Releases all managed and unmanaged resources and any references to the System.Runtime.Caching.ChangeMonitor instance. This overload must be implemented by derived change-monitor classes.
            </summary>
            <param name="disposing">True to release managed and unmanaged resources and any references to a System.Runtime.Caching.ChangeMonitor instance; false to release only unmanaged resources. When false is passed, the System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean) method is called by a finalizer thread and any external managed references are likely no longer valid because they have already been garbage collected.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Cache.Implement.RuntimeMemoryCache">
            <summary>
            Memory cache.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cache.Implement.RuntimeMemoryCache.cache">
            <summary>
            My runtime memory cache.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cache.Implement.RuntimeMemoryCache.factory">
            <summary>
            Cache monitor factory.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cache.Implement.RuntimeMemoryCache.now">
            <summary>
            Date time now.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.RuntimeMemoryCache.#ctor(System.String,Ctrip.Duckbill.Cache.ICacheMonitorFactory,Ctrip.Duckbill.INow)">
            <summary>
            Initializes a new instance of the RuntimeMemoryCache class.
            </summary>
            <param name="name">Cache name.</param>
            <param name="factory">Cache monitor factory.</param>
            <param name="now">Date time now.</param>
        </member>
        <member name="P:Ctrip.Duckbill.Cache.Implement.RuntimeMemoryCache.Name">
            <summary>
            Gets memory cache name.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.RuntimeMemoryCache.Contains(System.String)">
            <summary>
            Check whether cache contains the key.
            </summary>
            <param name="cacheKey">Cache key.</param>
            <returns>True contains, false not.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.RuntimeMemoryCache.GetContent``1(System.String)">
            <summary>
            Get cache content.
            </summary>
            <typeparam name="TContent">Type of content.</typeparam>
            <param name="cacheKey">Cache key.</param>
            <returns>Cache content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.RuntimeMemoryCache.GetCacheItem``1(System.String)">
            <summary>
            Gets the cache item.
            </summary>
            <typeparam name="TContent">The type of the t content.</typeparam>
            <param name="cacheKey">The cache key.</param>
            <returns>Cache item.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.RuntimeMemoryCache.TryGetContent``1(System.String,``0@)">
            <summary>
            Try get cache content.
            </summary>
            <typeparam name="TContent">Type of content.</typeparam>
            <param name="cacheKey">Cache key.</param>
            <param name="content">Cache content.</param>
            <returns>True cache item is exist, false is not.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.RuntimeMemoryCache.AddOrUpdate``1(Ctrip.Duckbill.Cache.ICacheItem{``0})">
            <summary>
            Add or update cache item.
            </summary>
            <typeparam name="TContent">Type of cache content.</typeparam>
            <param name="cacheItem">Cache item.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.RuntimeMemoryCache.Clear">
            <summary>
            Clears all cache.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.RuntimeMemoryCache.Remove(System.String)">
            <summary>
            Removes the specified cache key.
            </summary>
            <param name="cacheKey">The cache key.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.RuntimeMemoryCache.Report">
            <summary>
            Report contains cache item information.
            </summary>
            <returns>Cache item information description.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.RuntimeMemoryCache.Report(System.String)">
            <summary>
            Report special cache item information.
            </summary>
            <param name="cacheKey">Cache key.</param>
            <returns>Cache item information description.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.RuntimeMemoryCache.CreatePolicy(Ctrip.Duckbill.Cache.ICacheDescription)">
            <summary>
            Create cache item policy.
            </summary>
            <param name="cacheDescription">Cache Description.</param>
            <returns>Cache item policy.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.RuntimeMemoryCache.SetCacheDescription(Ctrip.Duckbill.Cache.ICacheDescription)">
            <summary>
            Set cache description.
            </summary>
            <param name="cacheItem">Cache item.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.RuntimeMemoryCache.ExtendSlidingExpirationTime(Ctrip.Duckbill.Cache.ICacheItemTime)">
            <summary>
            Extend sliding expiration time.
            </summary>
            <param name="cacheItem">Cache item.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Cache.Implement.RuntimeMemoryCacheRepository">
            <summary>
            Runtime memory cache repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cache.Implement.RuntimeMemoryCacheRepository.caches">
            <summary>
            Caches data.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cache.Implement.RuntimeMemoryCacheRepository.monitorFactory">
            <summary>
            Monitor factory.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cache.Implement.RuntimeMemoryCacheRepository.now">
            <summary>
            Datetime now.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.RuntimeMemoryCacheRepository.#ctor(Ctrip.Duckbill.Cache.ICacheMonitorFactory,Ctrip.Duckbill.INow)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Cache.Implement.RuntimeMemoryCacheRepository"/> class.
            </summary>
            <param name="monitorFactory">Monitor factory.</param>
            <param name="now">Datetime now.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.RuntimeMemoryCacheRepository.GetOrGenerate(System.String)">
            <summary>
            Get or generate cache.
            </summary>
            <param name="cacheName">Cache name.</param>
            <returns>Runtime cache.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.RuntimeMemoryCacheRepository.Report">
            <summary>
            Report contains cache item inforamtion.
            </summary>
            <returns>Cache item inforamtion description.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cache.Implement.RuntimeMemoryCacheRepository.GetKey(System.String)">
            <summary>
            Get key.
            </summary>
            <param name="cacheName">Cache name.</param>
            <returns>Cache name key.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Collections.Extensions.DictionaryConvertExtensions">
            <summary>
            Dictionary convert extensions.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Collections.Extensions.DictionaryConvertExtensions.staticConverter">
            <summary>
            The converter.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Collections.Extensions.DictionaryConvertExtensions.ToDict(System.Object)">
            <summary>
            Convert to dictionary.
            </summary>
            <param name="me">Current object.</param>
            <returns>Result dictionary.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Collections.Extensions.DictionaryConvertExtensions.SetTestConverter(Ctrip.Duckbill.Collections.IDictionaryConverter)">
            <summary>
            Sets the test converter.
            </summary>
            <param name="converter">The converter.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Collections.Extensions.DictionarySimpleExtensions">
            <summary>
            Dictionary utility extensions.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Collections.Extensions.DictionarySimpleExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
            <summary>
            Adds a key/value pair to the generic dictionary if the key does not already exist, or updates a key/value pair in the generic dictionary if the key already exists.
            </summary>
            <typeparam name="TKey">Type of key.</typeparam>
            <typeparam name="TValue">Type of value.</typeparam>
            <param name="me">The dictionary which will be add or update.</param>
            <param name="key">The key to be added or whose value should be updated.</param>
            <param name="addValueFactory">The function used to generate a value for an absent key.</param>
            <param name="updateValueFactory">The function used to generate a new value for an existing key based on the key's existing value.</param>
            <returns>The new value for the key. This will be either be the result of addValueFactory (if the key was absent) or the result of updateValueFactory (if the key was present).</returns>
            <exception cref="T:System.ArgumentNullException">Key is a null reference (Nothing in Visual Basic).-or-addValueFactory is a null reference (Nothing in Visual Basic).-or-updateValueFactory is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.OverflowException">The dictionary already contains the maximum number of elements, System.Int32.MaxValue.</exception>
        </member>
        <member name="M:Ctrip.Duckbill.Collections.Extensions.DictionarySimpleExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Func{``0,``1,``1})">
            <summary>
            Adds a key/value pair to the generic dictionary if the key does not already exist, or updates a key/value pair in the generic dictionary if the key already exists.
            </summary>
            <typeparam name="TKey">Type of key.</typeparam>
            <typeparam name="TValue">Type of value.</typeparam>
            <param name="me">The dictionary which will be add or update.</param>
            <param name="key">The key to be added or whose value should be updated.</param>
            <param name="addValue">The value to be added for an absent key.</param>
            <param name="updateValueFactory">The function used to generate a new value for an existing key based on the key's existing value.</param>
            <returns>The new value for the key. This will be either be addValue (if the key was absent) or the result of updateValueFactory (if the key was present).</returns>
            <exception cref="T:System.ArgumentNullException">Key is a null reference (Nothing in Visual Basic).-or-updateValueFactory is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.OverflowException">The dictionary already contains the maximum number of elements, System.Int32.MaxValue.</exception>
        </member>
        <member name="M:Ctrip.Duckbill.Collections.Extensions.DictionarySimpleExtensions.UnionDictionary``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Union current dictionary and another dictionary to a new dictionary. The exist item in current dictionary will be replaced with another.
            </summary>
            <typeparam name="TKey">Type of key.</typeparam>
            <typeparam name="TValue">Type of value.</typeparam>
            <param name="me">Current dictionary.</param>
            <param name="another">Another dictionary.</param>
            <returns>Unioned new dictionary.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Collections.Extensions.EnumerableSimpleConvertExtensions">
            <summary>
            Enumerable sample convert extensions.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Collections.Extensions.EnumerableSimpleConvertExtensions.To``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Convert To the specified collection.
            </summary>
            <typeparam name="TOriginalElement">The type of the collection original element.</typeparam>
            <typeparam name="TDestinationElement">The type of the collection destination element.</typeparam>
            <param name="collection">The collection.</param>
            <param name="elementConverter">The element converter.</param>
            <returns>Destination collection.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Collections.Extensions.EnumerableSimpleConvertExtensions.To``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Boolean)">
            <summary>
            Convert To the specified collection.
            </summary>
            <typeparam name="TOriginalElement">The type of the collection original element.</typeparam>
            <typeparam name="TDestinationElement">The type of the collection destination element.</typeparam>
            <param name="collection">The collection.</param>
            <param name="elementConverter">The element converter.</param>
            <param name="filterNullElement">If set to <c>true</c> [filter null element].</param>
            <returns>Destination collection.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Collections.Extensions.EnumerableSimpleExtensions">
            <summary>
            Enumerable simple extensions.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Collections.Extensions.EnumerableSimpleExtensions.IsNullOrEmpty(System.Collections.IEnumerable)">
            <summary>
            Determines whether the collection is null or empty.
            </summary>
            <param name="collection">The collection.</param>
            <returns><c>true</c> the collection is null or empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Collections.Extensions.EnumerableSimpleExtensions.IsNotEmpty(System.Collections.IEnumerable)">
            <summary>
            Determines whether the collection is not empty.
            </summary>
            <param name="collection">The collection.</param>
            <returns><c>true</c> the collection is not empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Collections.Extensions.EnumerableSimpleExtensions.ForEach``1(System.Collections.IEnumerable,System.Action{``0})">
            <summary>
            Each element of collection do some action.
            </summary>
            <typeparam name="TElement">The type of the collection element.</typeparam>
            <param name="collection">The collection.</param>
            <param name="action">The action.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Collections.Extensions.GenericEnumerableSimpleExtensions">
            <summary>
            Generic enumerable simple extensions.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Collections.Extensions.GenericEnumerableSimpleExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the collection is null or empty.
            </summary>
            <typeparam name="TElement">The type of the collection element.</typeparam>
            <param name="collection">The collection.</param>
            <returns><c>true</c> the collection is null or empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Collections.Extensions.GenericEnumerableSimpleExtensions.IsNotEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the collection is not empty.
            </summary>
            <typeparam name="TElement">The type of the collection element.</typeparam>
            <param name="collection">The collection.</param>
            <returns><c>true</c> the collection is not empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Collections.Extensions.GenericEnumerableSimpleExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Each element of collection do some action.
            </summary>
            <typeparam name="TElement">The type of the collection element.</typeparam>
            <param name="collection">The collection.</param>
            <param name="action">The action.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Collections.IDictionaryConverter">
            <summary>
            Dictionary converter.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Collections.IDictionaryConverter.ConvertObjectToDictionary(System.Object)">
            <summary>
            Convert object to dictionary.
            </summary>
            <param name="obj">Requested object.</param>
            <returns>Result dictionary.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Collections.Implement.DictionaryConverter">
            <summary>
            Default dictionary utility.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Collections.Implement.DictionaryConverter.objectComponentModelUtility">
            <summary>
            The object component model utility.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Collections.Implement.DictionaryConverter.#ctor(Ctrip.Duckbill.ComponentModel.IObjectComponentModelUtility)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Collections.Implement.DictionaryConverter"/> class.
            </summary>
            <param name="objectComponentModelUtility">The object component model utility.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Collections.Implement.DictionaryConverter.ConvertObjectToDictionary(System.Object)">
            <summary>
            Convert object to dictionary.
            </summary>
            <param name="obj">Requested object.</param>
            <returns>Result dictionary.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Configuration.ConfigFileAttribute">
            <summary>
            Configuration file attribute.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.ConfigFileAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ConfigFileAttribute class.
            </summary>
            <param name="filePath">Configuration file path. File path is support absolute and relative paths.</param>
        </member>
        <member name="P:Ctrip.Duckbill.Configuration.ConfigFileAttribute.FilePath">
            <summary>
            Gets or sets file path.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Configuration.FakeDynamicConfiguration">
            <summary>
            Fake dynamic configuration.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Configuration.FakeDynamicConfiguration.myConfig">
            <summary>
            My configuration.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.FakeDynamicConfiguration.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the FakeDynamicConfiguration class.
            </summary>
            <param name="fakes">Fake results. Format is PropertyA.PropertyB.PropertyC.....=ResultString. Example "AAA.BBB=Helloworld".</param>
        </member>
        <member name="P:Ctrip.Duckbill.Configuration.FakeDynamicConfiguration.Config">
            <summary>
            Gets dynamic configuration.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Configuration.IConfigurationAccessor">
            <summary>
            Configuration file accessor.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.IConfigurationAccessor.GetConfigXElement(System.String)">
            <summary>
            Get configuration xelement.
            </summary>
            <param name="configName">Configuration name.</param>
            <returns>Configuration xelement.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.IConfigurationAccessor.GetConfig``1(System.String)">
            <summary>
            Get configuration instance.
            </summary>
            <typeparam name="TConfiguration">Type of configuration.</typeparam>
            <param name="configName">Configuration name.</param>
            <returns>Configuration instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.IConfigurationAccessor.GetConfig``1">
            <summary>
            Get configuration instance.
            </summary>
            <typeparam name="TConfiguration">Type of configuration.</typeparam>
            <returns>Configuration instance.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Configuration.IConfigurationCache">
            <summary>
            Configuration cache.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.IConfigurationCache.ContainsXElement(System.String)">
            <summary>
            Check whether cache contains the configuration xelement.
            </summary>
            <param name="configurationKey">Configuration key.</param>
            <returns>True contains, false not.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.IConfigurationCache.GetXElement(System.String)">
            <summary>
            Get xelement format of configuration.
            </summary>
            <param name="configurationKey">Configuration key.</param>
            <returns>X element format configuration.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.IConfigurationCache.TryGetXElement(System.String,System.Xml.Linq.XElement@)">
            <summary>
            Try get xelement format of configuration.
            </summary>
            <param name="configurationKey">Configuration key.</param>
            <param name="content">X element format configuration.</param>
            <returns>True cached configuration is exist, false is not.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.IConfigurationCache.AddXElement(System.String,System.Xml.Linq.XElement,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add xelement format configuration to cache.
            </summary>
            <param name="configurationKey">Configuration key.</param>
            <param name="configuration">Configuration xelement.</param>
            <param name="paths">Monitored paths.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.IConfigurationCache.Contains``1(System.String)">
            <summary>
            Check whether cache contains the configuration.
            </summary>
            <typeparam name="TConfiguration">Type of configuration.</typeparam>
            <param name="configurationKey">Configuration key.</param>
            <returns>True contains, false not.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.IConfigurationCache.Get``1(System.String)">
            <summary>
            Get configuration.
            </summary>
            <typeparam name="TConfiguration">Type of configuration.</typeparam>
            <param name="configurationKey">Configuration key.</param>
            <returns>Configuration instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.IConfigurationCache.TryGet``1(System.String,``0@)">
            <summary>
            Try get configuration.
            </summary>
            <typeparam name="TConfiguration">Type of configuration.</typeparam>
            <param name="configurationKey">Configuration key.</param>
            <param name="content">Configuration instance.</param>
            <returns>True cached configuration is exist, false is not.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.IConfigurationCache.Add``1(System.String,``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add configuration to cache.
            </summary>
            <typeparam name="TConfiguration">Type of configuration.</typeparam>
            <param name="configurationKey">Configuration key.</param>
            <param name="configuration">Configuration instance.</param>
            <param name="paths">Monitored paths.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Configuration.IConfigurationFilePathConfigRepository">
            <summary>
            Configuration file path config repository interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.IConfigurationFilePathConfigRepository.GetPath(System.String)">
            <summary>
            Get path.
            </summary>
            <param name="key">Requested key.</param>
            <returns>Configuration file path.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Configuration.IConfigurationNameGenerator">
            <summary>
            Configuration name generator.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.IConfigurationNameGenerator.GetConfigurationName``1">
            <summary>
            Get configuration name.
            </summary>
            <typeparam name="TConfiguration">Type of configuration.</typeparam>
            <returns>Configuration name.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Configuration.IConfigurationPathsGenerateStrategy">
            <summary>
            Configuration paths generate strategy.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.IConfigurationPathsGenerateStrategy.TryGenerateConfigurationPaths(System.String,System.String[]@)">
            <summary>
            Try generate configuration paths.
            </summary>
            <param name="configName">Configuration name.</param>
            <param name="paths">Generated paths.</param>
            <returns>True success generate paths. False is fail.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Configuration.IConfigurationPathsGenerateStrategyCollectionFactory">
            <summary>
            Configuration paths generate strategies factory.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.IConfigurationPathsGenerateStrategyCollectionFactory.CreateStategyCollection">
            <summary>
            Create configuration paths generate strategy collection.
            </summary>
            <returns>Configuration paths generate strategies collection.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Configuration.IConfigurationPathsGenerator">
            <summary>
            Configuration paths generator.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.IConfigurationPathsGenerator.TryGetConfigurationPaths(System.String,System.String[]@)">
            <summary>
            Try get configuration paths.
            </summary>
            <param name="configName">Configuration name.</param>
            <param name="paths">Configuration paths. If result is true then return special group paths, if result is false return all candidate.</param>
            <returns>True found config file, false is not.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Configuration.IDynamicConfiguration">
            <summary>
            Dynamic configuration.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Configuration.IDynamicConfiguration.Config">
            <summary>
            Gets dynamic configuration.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Configuration.Implement.AbsoluteConfigurationPathStrategy">
            <summary>
            Absolute configuration path generate strategy.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Configuration.Implement.AbsoluteConfigurationPathStrategy.staticPath">
            <summary>
            Static path.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Configuration.Implement.AbsoluteConfigurationPathStrategy.staticFile">
            <summary>
            Static file.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.AbsoluteConfigurationPathStrategy.#ctor(Ctrip.Duckbill.IO.IStaticPath,Ctrip.Duckbill.IO.IStaticFile)">
            <summary>
            Initializes a new instance of the AbsoluteConfigurationPathStrategy class.
            </summary>
            <param name="staticPath">Static path.</param>
            <param name="staticFile">Static file.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.AbsoluteConfigurationPathStrategy.TryGenerateConfigurationPaths(System.String,System.String[]@)">
            <summary>
            Try generate configuration paths.
            </summary>
            <param name="configName">Configuration name.</param>
            <param name="paths">Generated paths.</param>
            <returns>True success generate paths. False is fail.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Configuration.Implement.ConfigurationDynamicFile">
            <summary>
            Configuration dynamic file.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Configuration.Implement.ConfigurationDynamicFile.configurationAccessor">
            <summary>
            Configuration accessor.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Configuration.Implement.ConfigurationDynamicFile.staticPath">
            <summary>
            Static path.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Configuration.Implement.ConfigurationDynamicFile.preConfigName">
            <summary>
            Pre configuration name.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.ConfigurationDynamicFile.#ctor(Ctrip.Duckbill.Configuration.IConfigurationAccessor,Ctrip.Duckbill.IO.IStaticPath)">
            <summary>
            Initializes a new instance of the ConfigurationDynamicFile class.
            </summary>
            <param name="configurationAccessor">Configuration accessor.</param>
            <param name="staticPath">Static path.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.ConfigurationDynamicFile.#ctor(Ctrip.Duckbill.Configuration.IConfigurationAccessor,Ctrip.Duckbill.IO.IStaticPath,System.String)">
            <summary>
            Initializes a new instance of the ConfigurationDynamicFile class.
            </summary>
            <param name="configurationAccessor">Configuration accessor.</param>
            <param name="staticPath">Static path.</param>
            <param name="preConfigName">Pre configuration name.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.ConfigurationDynamicFile.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the System.Dynamic.DynamicObject class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty)  statement, where sampleObject is an instance of the class derived from the System.Dynamic.DynamicObject class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to result.</param>
            <returns>True if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.).</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Configuration.Implement.ConfigurationDynamicXml">
            <summary>
            Configuration dynamic xml.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Configuration.Implement.ConfigurationDynamicXml.myXml">
            <summary>
            My xml.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Configuration.Implement.ConfigurationDynamicXml.xmlns">
            <summary>
            My xml namespace.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.ConfigurationDynamicXml.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ConfigurationDynamicXml class.
            </summary>
            <param name="xml">Xml string.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.ConfigurationDynamicXml.#ctor(System.Xml.Linq.XElement,System.Xml.Linq.XNamespace)">
            <summary>
            Initializes a new instance of the ConfigurationDynamicXml class.
            </summary>
            <param name="xml">Xml element.</param>
            <param name="xmlns">Xml namespace.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.ConfigurationDynamicXml.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the System.Dynamic.DynamicObject class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty)  statement, where sampleObject is an instance of the class derived from the System.Dynamic.DynamicObject class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to result.</param>
            <returns>True if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.).</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.ConfigurationDynamicXml.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that get a value by index. Classes derived from the DynamicObject class can override this method to specify dynamic behavior for indexing operations.
            </summary>
            <param name="binder">Provides information about the operation.</param>
            <param name="indexes">The indexes that are used in the operation. For example, for the sampleObject[3] operation in C# (sampleObject(3) in Visual Basic), where sampleObject is derived from the DynamicObject class, indexes[0] is equal to 3.</param>
            <param name="result">The result of the index operation.</param>
            <returns>True if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.).</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.ConfigurationDynamicXml.ContainsSubElement(System.Xml.Linq.XElement)">
            <summary>
            Check whether current element contains sub element.
            </summary>
            <param name="element">Current element.</param>
            <returns>True contains sub element, but false is not.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Configuration.Implement.ConfigurationFilePathConfig">
            <summary>
            Configuration file path config.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Configuration.Implement.ConfigurationFilePathConfig.Paths">
            <summary>
            Gets or sets configuration file path collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Configuration.Implement.ConfigurationFilePathUnit">
            <summary>
            Configuration file path unit.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Configuration.Implement.ConfigurationFilePathUnit.Key">
            <summary>
            Gets or sets configuration file path key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Configuration.Implement.ConfigurationFilePathUnit.Path">
            <summary>
            Gets or sets configuration file path.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Configuration.Implement.ConfigurationFilePathUnitCollection">
            <summary>
            Configuration file path unit collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Configuration.Implement.ConfigurationFilePathUnitCollection.Collection">
            <summary>
            Gets or sets configuration file path collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Configuration.Implement.DefaultConfigurationAccessor">
            <summary>
            Default configuration accessor.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Configuration.Implement.DefaultConfigurationAccessor.cache">
            <summary>
            Configuration cache.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Configuration.Implement.DefaultConfigurationAccessor.configPathsGenerator">
            <summary>
            Configuration paths generator.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Configuration.Implement.DefaultConfigurationAccessor.xmlFile">
            <summary>
            Xml file.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Configuration.Implement.DefaultConfigurationAccessor.xmlSerializer">
            <summary>
            Xml serializer.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Configuration.Implement.DefaultConfigurationAccessor.nameGenerator">
            <summary>
            The name generator.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.DefaultConfigurationAccessor.#ctor(Ctrip.Duckbill.Configuration.IConfigurationCache,Ctrip.Duckbill.Configuration.IConfigurationPathsGenerator,Ctrip.Duckbill.Xml.IXmlFile,Ctrip.Duckbill.Serialization.IOriginalXMLSerializer,Ctrip.Duckbill.Configuration.IConfigurationNameGenerator)">
            <summary>
            Initializes a new instance of the DefaultConfigurationAccessor class.
            </summary>
            <param name="cache">Configuration cache.</param>
            <param name="configPathsGenerator">Configuration paths generator.</param>
            <param name="xmlFile">Xml file.</param>
            <param name="xmlSerializer">Xml serializer.</param>
            <param name="nameGenerator">The name generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.DefaultConfigurationAccessor.GetConfigXElement(System.String)">
            <summary>
            Get configuration xelement.
            </summary>
            <param name="configName">Configuration name.</param>
            <returns>Configuration xelement.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.DefaultConfigurationAccessor.GetConfig``1(System.String)">
            <summary>
            Get configuration instance.
            </summary>
            <typeparam name="TConfiguration">Type of configuration.</typeparam>
            <param name="configName">Configuration name.</param>
            <returns>Configuration instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.DefaultConfigurationAccessor.GetConfig``1">
            <summary>
            Get configuration instance.
            </summary>
            <typeparam name="TConfiguration">Type of configuration.</typeparam>
            <returns>Configuration instance.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Configuration.Implement.DefaultConfigurationCache">
            <summary>
            Default configuration cache.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Configuration.Implement.DefaultConfigurationCache.cache">
            <summary>
            Configuration cache.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Configuration.Implement.DefaultConfigurationCache.cacheItemFactory">
            <summary>
            Cache item factory.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.DefaultConfigurationCache.#ctor(Ctrip.Duckbill.Cache.IMemoryCacheRepository,Ctrip.Duckbill.Cache.ICacheItemFactory)">
            <summary>
            Initializes a new instance of the DefaultConfigurationCache class.
            </summary>
            <param name="repository">Memory cache repository.</param>
            <param name="cacheItemFactory">Cache item factory.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.DefaultConfigurationCache.ContainsXElement(System.String)">
            <summary>
            Check whether cache contains the configuration.
            </summary>
            <param name="configurationKey">Configuration key.</param>
            <returns>True contains, false not.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.DefaultConfigurationCache.GetXElement(System.String)">
            <summary>
            Get xelement format of configuration.
            </summary>
            <param name="configurationKey">Configuration key.</param>
            <returns>X element format configuration.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.DefaultConfigurationCache.TryGetXElement(System.String,System.Xml.Linq.XElement@)">
            <summary>
            Try get xelement format of configuration.
            </summary>
            <param name="configurationKey">Configuration key.</param>
            <param name="content">X element format configuration.</param>
            <returns>True cached configuration is exist, false is not.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.DefaultConfigurationCache.AddXElement(System.String,System.Xml.Linq.XElement,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add xelement format configuration to cache.
            </summary>
            <param name="configurationKey">Configuration key.</param>
            <param name="configuration">Configuration xelement.</param>
            <param name="paths">Monitored paths.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.DefaultConfigurationCache.Contains``1(System.String)">
            <summary>
            Check whether cache contains the configuration.
            </summary>
            <typeparam name="TConfiguration">Type of configuration.</typeparam>
            <param name="configurationKey">Configuration key.</param>
            <returns>True contains, false not.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.DefaultConfigurationCache.Get``1(System.String)">
            <summary>
            Get configuration.
            </summary>
            <typeparam name="TConfiguration">Type of configuration.</typeparam>
            <param name="configurationKey">Configuration key.</param>
            <returns>Configuration instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.DefaultConfigurationCache.TryGet``1(System.String,``0@)">
            <summary>
            Try get configuration.
            </summary>
            <typeparam name="TConfiguration">Type of configuration.</typeparam>
            <param name="configurationKey">Configuration key.</param>
            <param name="content">Configuration instance.</param>
            <returns>True cached configuration is exist, false is not.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.DefaultConfigurationCache.Add``1(System.String,``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add configuration to cache.
            </summary>
            <typeparam name="TConfiguration">Type of configuration.</typeparam>
            <param name="configurationKey">Configuration key.</param>
            <param name="configuration">Configuration instance.</param>
            <param name="paths">Monitored paths.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.DefaultConfigurationCache.GetXElementConfigurationKey(System.String)">
            <summary>
            Get xelement configuration key.
            </summary>
            <param name="originalKey">Original key.</param>
            <returns>Xelement configuration key.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.DefaultConfigurationCache.GetConfigurationKey``1(System.String)">
            <summary>
            Get xelement configuration key.
            </summary>
            <typeparam name="TConfiguration">Type of configuration.</typeparam>
            <param name="originalKey">Original key.</param>
            <returns>Configuration key.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Configuration.Implement.DefaultConfigurationNameGenerator">
            <summary>
            Default configuration paths generator.
            </summary>
            <summary>
            Default configuration paths generator.(.net 40)
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Configuration.Implement.DefaultConfigurationNameGenerator.configNames">
            <summary>
            Configuration name of type.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.DefaultConfigurationNameGenerator.GetConfigurationName``1">
            <summary>
            Get configuration name.
            </summary>
            <typeparam name="TConfiguration">Type of configuration.</typeparam>
            <returns>Configuration name.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.DefaultConfigurationNameGenerator.GenerateConfigName(System.Type)">
            <summary>
            Generate configuration name.
            </summary>
            <param name="configType">Type of configuration.</param>
            <returns>Configuration name.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.DefaultConfigurationNameGenerator.GetConfigFileAttribute(System.Type)">
            <summary>
            Gets the configuration file attribute.
            </summary>
            <param name="configType">Type of the configuration.</param>
            <returns>Config file attribute.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Configuration.Implement.DefaultConfigurationPathsGenerateStrategyCollectionFactory">
            <summary>
            Default configuration paths generate strategy collection factory.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Configuration.Implement.DefaultConfigurationPathsGenerateStrategyCollectionFactory.strategies">
            <summary>
            My strategies.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.DefaultConfigurationPathsGenerateStrategyCollectionFactory.#ctor(Ctrip.Duckbill.ICurrentAppDomain,Ctrip.Duckbill.IO.IStaticPath,Ctrip.Duckbill.IO.IStaticFile)">
            <summary>
            Initializes a new instance of the DefaultConfigurationPathsGenerateStrategyCollectionFactory class.
            </summary>
            <param name="currentAppdomain">Current appdomain.</param>
            <param name="staticPath">Static path.</param>
            <param name="staticFile">Static file.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.DefaultConfigurationPathsGenerateStrategyCollectionFactory.CreateStategyCollection">
            <summary>
            Create configuration paths generate strategy collection.
            </summary>
            <returns>Configuration paths generate strategies collection.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Configuration.Implement.DefaultDynamicConfiguration">
            <summary>
            Default dynamic configuration.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.DefaultDynamicConfiguration.#ctor(Ctrip.Duckbill.Configuration.IConfigurationAccessor,Ctrip.Duckbill.IO.IStaticPath)">
            <summary>
            Initializes a new instance of the DefaultDynamicConfiguration class.
            </summary>
            <param name="configurationAccessor">Configuration accessor.</param>
            <param name="staticPath">Static path.</param>
        </member>
        <member name="P:Ctrip.Duckbill.Configuration.Implement.DefaultDynamicConfiguration.Config">
            <summary>
            Gets dynamic configuration.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Configuration.Implement.RelativePathInAppdomainConfigsStrategy">
            <summary>
            Relative path in appdomain configuration strategy.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.RelativePathInAppdomainConfigsStrategy.#ctor(Ctrip.Duckbill.ICurrentAppDomain,Ctrip.Duckbill.IO.IStaticPath,Ctrip.Duckbill.IO.IStaticFile)">
            <summary>
            Initializes a new instance of the RelativePathInAppdomainConfigsStrategy class.
            </summary>
            <param name="currentAppdomain">Current appdomain.</param>
            <param name="staticPath">Static path.</param>
            <param name="staticFile">Static file.</param>
        </member>
        <member name="P:Ctrip.Duckbill.Configuration.Implement.RelativePathInAppdomainConfigsStrategy.SubDirectory">
            <summary>
            Gets subdirectory.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Configuration.Implement.RelativePathInAppdomainConfigStrategy">
            <summary>
            Relative path in appdomain configuration strategy.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.RelativePathInAppdomainConfigStrategy.#ctor(Ctrip.Duckbill.ICurrentAppDomain,Ctrip.Duckbill.IO.IStaticPath,Ctrip.Duckbill.IO.IStaticFile)">
            <summary>
            Initializes a new instance of the RelativePathInAppdomainConfigStrategy class.
            </summary>
            <param name="currentAppdomain">Current appdomain.</param>
            <param name="staticPath">Static path.</param>
            <param name="staticFile">Static file.</param>
        </member>
        <member name="P:Ctrip.Duckbill.Configuration.Implement.RelativePathInAppdomainConfigStrategy.SubDirectory">
            <summary>
            Gets subdirectory.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Configuration.Implement.RelativePathInAppdomainConfigurationsStrategy">
            <summary>
            Relative path in appdomain configurations strategy.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.RelativePathInAppdomainConfigurationsStrategy.#ctor(Ctrip.Duckbill.ICurrentAppDomain,Ctrip.Duckbill.IO.IStaticPath,Ctrip.Duckbill.IO.IStaticFile)">
            <summary>
            Initializes a new instance of the RelativePathInAppdomainConfigurationsStrategy class.
            </summary>
            <param name="currentAppdomain">Current appdomain.</param>
            <param name="staticPath">Static path.</param>
            <param name="staticFile">Static file.</param>
        </member>
        <member name="P:Ctrip.Duckbill.Configuration.Implement.RelativePathInAppdomainConfigurationsStrategy.SubDirectory">
            <summary>
            Gets subdirectory.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Configuration.Implement.RelativePathInAppdomainConfigurationStrategy">
            <summary>
            Relative path in appdomain configuration strategy.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.RelativePathInAppdomainConfigurationStrategy.#ctor(Ctrip.Duckbill.ICurrentAppDomain,Ctrip.Duckbill.IO.IStaticPath,Ctrip.Duckbill.IO.IStaticFile)">
            <summary>
            Initializes a new instance of the RelativePathInAppdomainConfigurationStrategy class.
            </summary>
            <param name="currentAppdomain">Current appdomain.</param>
            <param name="staticPath">Static path.</param>
            <param name="staticFile">Static file.</param>
        </member>
        <member name="P:Ctrip.Duckbill.Configuration.Implement.RelativePathInAppdomainConfigurationStrategy.SubDirectory">
            <summary>
            Gets subdirectory.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Configuration.Implement.RelativePathInAppdomainSubDirectoryStrategy">
            <summary>
            Relative path in appdomain sub directory startegy.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Configuration.Implement.RelativePathInAppdomainSubDirectoryStrategy.currentAppdomain">
            <summary>
            Current app domain.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Configuration.Implement.RelativePathInAppdomainSubDirectoryStrategy.staticPath">
            <summary>
            Static path.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Configuration.Implement.RelativePathInAppdomainSubDirectoryStrategy.staticFile">
            <summary>
            Static file.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.RelativePathInAppdomainSubDirectoryStrategy.#ctor(Ctrip.Duckbill.ICurrentAppDomain,Ctrip.Duckbill.IO.IStaticPath,Ctrip.Duckbill.IO.IStaticFile)">
            <summary>
            Initializes a new instance of the RelativePathInAppdomainSubDirectoryStrategy class.
            </summary>
            <param name="currentAppdomain">Current appdomain.</param>
            <param name="staticPath">Static path.</param>
            <param name="staticFile">Static file.</param>
        </member>
        <member name="P:Ctrip.Duckbill.Configuration.Implement.RelativePathInAppdomainSubDirectoryStrategy.SubDirectory">
            <summary>
            Gets subdirectory.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.RelativePathInAppdomainSubDirectoryStrategy.TryGenerateConfigurationPaths(System.String,System.String[]@)">
            <summary>
            Try generate configuration paths.
            </summary>
            <param name="configName">Configuration name.</param>
            <param name="paths">Generated paths.</param>
            <returns>True success generate paths. False is fail.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Configuration.Implement.StaticConfigurationManager">
            <summary>
            Static configuration manager.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.StaticConfigurationManager.GetAppSetting(System.String)">
            <summary>
            Gets the application setting.
            </summary>
            <param name="key">The key.</param>
            <returns>App setting configuration value.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Configuration.Implement.StrategiesConfigurationPathsGenerator">
            <summary>
            Strategis configuration paths generator.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Configuration.Implement.StrategiesConfigurationPathsGenerator.strategies">
            <summary>
            My strategies.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.StrategiesConfigurationPathsGenerator.#ctor(Ctrip.Duckbill.Configuration.IConfigurationPathsGenerateStrategyCollectionFactory)">
            <summary>
            Initializes a new instance of the StrategiesConfigurationPathsGenerator class.
            </summary>
            <param name="strategyCollectionFactory">Strategy collection factory.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.Implement.StrategiesConfigurationPathsGenerator.TryGetConfigurationPaths(System.String,System.String[]@)">
            <summary>
            Try get configuration paths.
            </summary>
            <param name="configName">Configuration name.</param>
            <param name="paths">Configuration paths. If result is true then return special group paths, if result is false return all candidate.</param>
            <returns>True found config file, false is not.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Configuration.IStaticConfigurationManager">
            <summary>
            Static configuration manager.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Configuration.IStaticConfigurationManager.GetAppSetting(System.String)">
            <summary>
            Gets the application setting.
            </summary>
            <param name="key">The key.</param>
            <returns>App setting configuration value.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Context.BaseQueriedDBNameRequestContextItem">
            <summary>
            Base queried db name context item.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Context.BaseQueriedDBNameRequestContextItem.Key">
            <summary>
            Gets request context item key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Context.BaseQueriedDBNameRequestContextItem.Value">
            <summary>
            Gets request context item value.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Context.IContextAccessor">
            <summary>
            Context accessor interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Context.IContextAccessor.Clear(System.String)">
            <summary>
            Empties a data slot with the specified name.
            </summary>
            <param name="name">The name of the data slot to empty.</param>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
        </member>
        <member name="M:Ctrip.Duckbill.Context.IContextAccessor.GetData(System.String)">
            <summary>
            Retrieves an object with the specified name from the System.Runtime.Remoting.Messaging.CallContext.
            </summary>
            <param name="name">The name of the item in the call context.</param>
            <returns>The object in the call context associated with the specified name.</returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
        </member>
        <member name="M:Ctrip.Duckbill.Context.IContextAccessor.SetData(System.String,System.Object)">
            <summary>
            Stores a given object and associates it with the specified name.
            </summary>
            <param name="name">The name with which to associate the new item in the call context.</param>
            <param name="data">The object to store in the call context.</param>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
        </member>
        <member name="T:Ctrip.Duckbill.Context.ICrossThreadStorage">
            <summary>
            Cross thread storage interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Context.ICrossThreadStorage.Get(System.String)">
            <summary>
            Get item.
            </summary>
            <param name="key">Item key.</param>
            <returns>Item object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Context.ICrossThreadStorage.Set(System.String,System.Object)">
            <summary>
            Add item.
            </summary>
            <param name="key">Item key.</param>
            <param name="item">Item object.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Context.ICrossThreadStorage.Remove(System.String)">
            <summary>
            Remove item.
            </summary>
            <param name="key">Item key.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Context.Implement.AutoSetupSystemContextProcessor">
            <summary>
            Auto setup system context.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Context.Implement.AutoSetupSystemContextProcessor.context">
            <summary>
            Request context.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Context.Implement.AutoSetupSystemContextProcessor.#ctor(Ctrip.Duckbill.Context.IRequestContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Context.Implement.AutoSetupSystemContextProcessor"/> class.
            </summary>
            <param name="context">Request context.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Context.Implement.AutoSetupSystemContextProcessor.Process">
            <summary>
            Process the work when request begin. 
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Context.Implement.CallContextAccessor">
            <summary>
            Call context accessor.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Context.Implement.CallContextAccessor.Clear(System.String)">
            <summary>
            Empties a data slot with the specified name.
            </summary>
            <param name="name">The name of the data slot to empty.</param>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
        </member>
        <member name="M:Ctrip.Duckbill.Context.Implement.CallContextAccessor.GetData(System.String)">
            <summary>
            Retrieves an object with the specified name from the System.Runtime.Remoting.Messaging.CallContext.
            </summary>
            <param name="name">The name of the item in the call context.</param>
            <returns>The object in the call context associated with the specified name.</returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
        </member>
        <member name="M:Ctrip.Duckbill.Context.Implement.CallContextAccessor.SetData(System.String,System.Object)">
            <summary>
            Stores a given object and associates it with the specified name.
            </summary>
            <param name="name">The name with which to associate the new item in the call context.</param>
            <param name="data">The object to store in the call context.</param>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
        </member>
        <member name="T:Ctrip.Duckbill.Context.Implement.DefaultSystemContext">
            <summary>
            Default system context.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Context.Implement.DefaultSystemContext.QueriedDBNameDictionaryKey">
            <summary>
            Queried DB name dictionary key.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Context.Implement.DefaultSystemContext.httpContext">
            <summary>
            Http context.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Context.Implement.DefaultSystemContext.contextAccessor">
            <summary>
            Context accessor.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Context.Implement.DefaultSystemContext.itemsDictionary">
            <summary>
            Request context items dictionary.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Context.Implement.DefaultSystemContext.#ctor(Ctrip.Duckbill.Web.Context.IHttpContextRepository,Ctrip.Duckbill.Context.IContextAccessor,Ctrip.Duckbill.Context.IQueriedDBNameRequestContextItem)">
            <summary>
            Initializes a new instance of the DefaultSystemContext class.
            </summary>
            <param name="httpContext">Http context.</param>
            <param name="contextAccessor">Context accessor.</param>
            <param name="queriedDbNameRequestContextItem">X-Database request context item.</param>
        </member>
        <member name="P:Ctrip.Duckbill.Context.Implement.DefaultSystemContext.QueriedDBNameKey">
            <summary>
            Gets queried db name key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Context.Implement.DefaultSystemContext.CustomerIPKey">
            <summary>
            Gets customer ip key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Context.Implement.DefaultSystemContext.ClientUrlKey">
            <summary>
            Gets client url key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Context.Implement.DefaultSystemContext.ClientUrlReferrerKey">
            <summary>
            Gets client url referrer key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Context.Implement.DefaultSystemContext.ClientUserAgentKey">
            <summary>
            Gets client user agent key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Context.Implement.DefaultSystemContext.QueriedDBName">
            <summary>
            Gets queried db name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Context.Implement.DefaultSystemContext.CustomerIP">
            <summary>
            Gets customer ip address.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Context.Implement.DefaultSystemContext.ClientUrl">
            <summary>
            Gets client url.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Context.Implement.DefaultSystemContext.ClientUrlReferrer">
            <summary>
            Gets client url referrer.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Context.Implement.DefaultSystemContext.ClientUserAgent">
            <summary>
            Gets client user agent.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Context.Implement.DefaultSystemContext.CurrentUrlkey">
            <summary>
            Gets current url key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Context.Implement.DefaultSystemContext.CurrentUrl">
            <summary>
            Gets current url.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Context.Implement.DefaultSystemContext.Items">
            <summary>
            Gets request context items.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Context.Implement.DefaultSystemContext.Initialize">
            <summary>
            Initialize current context.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Context.Implement.DefaultSystemContext.InitializeCurrentUrl">
            <summary>
            Initialize current url.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Context.Implement.DefaultSystemContext.InitializeCustomerIP">
            <summary>
            Initialize customer ip.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Context.Implement.DefaultSystemContext.InitializeClientUrl">
            <summary>
            Initialize client url.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Context.Implement.DefaultSystemContext.InitializeClientUrlReferrer">
            <summary>
            Initialize client url.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Context.Implement.DefaultSystemContext.InitializeClientUserAgent">
            <summary>
            Initialize client user agent.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Context.Implement.DefaultSystemContext.GetStringFromContext(System.String)">
            <summary>
            Get string from context.
            </summary>
            <param name="key">Request key.</param>
            <returns>Request result.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Context.IQueriedDBNameRequestContextItem">
            <summary>
            Queried db name request context item.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Context.IRequestContext">
            <summary>
            Request context interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Context.IRequestContext.CurrentUrlkey">
            <summary>
            Gets current url key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Context.IRequestContext.CurrentUrl">
            <summary>
            Gets current url.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Context.IRequestContext.QueriedDBNameKey">
            <summary>
            Gets queried db name key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Context.IRequestContext.CustomerIPKey">
            <summary>
            Gets customer ip address key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Context.IRequestContext.ClientUrlKey">
            <summary>
            Gets client url key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Context.IRequestContext.ClientUrlReferrerKey">
            <summary>
            Gets client url referrer key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Context.IRequestContext.ClientUserAgentKey">
            <summary>
            Gets client user agent key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Context.IRequestContext.QueriedDBName">
            <summary>
            Gets queried db name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Context.IRequestContext.CustomerIP">
            <summary>
            Gets customer ip address.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Context.IRequestContext.ClientUrl">
            <summary>
            Gets client url.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Context.IRequestContext.ClientUrlReferrer">
            <summary>
            Gets client url referrer.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Context.IRequestContext.ClientUserAgent">
            <summary>
            Gets client user agent.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Context.IRequestContext.Items">
            <summary>
            Gets request context items.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Context.IRequestContext.Initialize">
            <summary>
            Initialize current context.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Context.IRequestContextItem">
            <summary>
            Request context item interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Context.IRequestContextItem.Key">
            <summary>
            Gets request context item key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Context.IRequestContextItem.Value">
            <summary>
            Gets request context item value.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.ConvertIgnoreAttribute">
            <summary>
            Convert ignore attribute.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.ConvertMappingAttribute">
            <summary>
            Convert mapping attribute.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.ConvertMappingAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ConvertMappingAttribute class.
            </summary>
            <param name="property">Property name.</param>
        </member>
        <member name="P:Ctrip.Duckbill.ConvertMappingAttribute.Property">
            <summary>
            Gets or sets property.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Cryptograph.CryptoAlgorithm">
            <summary>
            Crypto algorithm enum.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cryptograph.CryptoAlgorithm.DES">
            <summary>
            DES encrypt.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cryptograph.CryptoAlgorithm.RC2">
            <summary>
            RC2 encrypt.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cryptograph.CryptoAlgorithm.Rijndael">
            <summary>
            RC2 encrypt.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cryptograph.CryptoAlgorithm.TripleDES">
            <summary>
            TripleDES encrypt.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cryptograph.CryptoAlgorithm.RSA">
            <summary>
            RSA encrypt.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cryptograph.CryptoAlgorithm.DSA">
            <summary>
            DSA encrypt.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cryptograph.CryptoAlgorithm.XXX">
            <summary>
            XXX encrypt.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Cryptograph.IAESCryptograph">
            <summary>
            Aes cryptograph interface.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Cryptograph.ICryptograph">
            <summary>
            Defined string Encrypt and Decrypt.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.ICryptograph.Encrypt(System.String)">
            <summary>
            Do encrypt for plainString.
            </summary>
            <param name="plainString">Plain string.</param>
            <returns>Encrypted string as base64.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.ICryptograph.Decrypt(System.String)">
            <summary>
            Do decrypt from encryptedBase64String.
            </summary>
            <param name="encryptedBase64String">Base64 string of encrypted.</param>
            <returns>Plain string.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Cryptograph.ICryptographRepository">
            <summary>
            Cryptograph repository interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.ICryptographRepository.GetCryptograph(Ctrip.Duckbill.Cryptograph.CryptoAlgorithm)">
            <summary>
            Get Cryptograph item.
            </summary>
            <param name="algorithm">Crypto algorithm.</param>
            <returns>Cryptograph instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.ICryptographRepository.CreateDesCryptograph(System.Byte[],System.Byte[])">
            <summary>
            Creates the des cryptograph.
            </summary>
            <param name="key">The key.</param>
            <param name="iv">The iv.</param>
            <returns>Des cryptograph.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.ICryptographRepository.CreateAesCryptograph(System.Byte[],System.Byte[])">
            <summary>
            Creates the aes cryptograph.
            </summary>
            <param name="key">The key.</param>
            <param name="iv">The iv.</param>
            <returns>Aes cryptograph.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.ICryptographRepository.CreateRc2Cryptograph(System.Byte[],System.Byte[])">
            <summary>
            Creates the rc2 cryptograph.
            </summary>
            <param name="key">The key.</param>
            <param name="iv">The iv.</param>
            <returns>Rc2 cryptograph.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.ICryptographRepository.CreateRijndaelCryptograph(System.Byte[],System.Byte[])">
            <summary>
            Creates the rijndael cryptograph.
            </summary>
            <param name="key">The key.</param>
            <param name="iv">The iv.</param>
            <returns>Rijndael cryptograph.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.ICryptographRepository.CreateRSACryptograph(System.String)">
            <summary>
            Creates the rsa cryptograph.
            </summary>
            <param name="key">The key.</param>
            <returns>Rsa cryptograph.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.ICryptographRepository.CreateTripleDESCryptograph(System.Byte[],System.Byte[])">
            <summary>
            Creates the TripleDES cryptograph.
            </summary>
            <param name="key">The key.</param>
            <param name="iv">The iv.</param>
            <returns>TripleDES cryptograph.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Cryptograph.IDESCryptograph">
            <summary>
            Des cryptograph interface.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Cryptograph.Implement.AESCryptograph">
            <summary>
            Class AES Cryptography.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cryptograph.Implement.AESCryptograph.aesKey">
            <summary>
            Aes key.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cryptograph.Implement.AESCryptograph.aesIV">
            <summary>
            Aes IV.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cryptograph.Implement.AESCryptograph.encryptProvider">
            <summary>
            The encrypt provider.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cryptograph.Implement.AESCryptograph.decryptProvider">
            <summary>
            The decrypt provider.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.Implement.AESCryptograph.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Cryptograph.Implement.AESCryptograph"/> class.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.Implement.AESCryptograph.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Cryptograph.Implement.AESCryptograph"/> class.
            </summary>
            <param name="aesKey">The aes key.</param>
            <param name="aesIV">The aes iv.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.Implement.AESCryptograph.Encrypt(System.String)">
            <summary>
            Do encrypt for plainString.
            </summary>
            <param name="plainString">Plain string.</param>
            <returns>Encrypted string as base64.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.Implement.AESCryptograph.Decrypt(System.String)">
            <summary>
            Do Decrypt from encryptedBase64String.
            </summary>
            <param name="encryptedBase64String">Base64 string of encrypted.</param>
            <returns>Plain string.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Cryptograph.Implement.CryptographRepository">
            <summary>
            Cryptograph manager Com.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cryptograph.Implement.CryptographRepository.desCryptograph">
            <summary>
            The DES cryptograph.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cryptograph.Implement.CryptographRepository.aesCryptograph">
            <summary>
            The AES cryptograph.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cryptograph.Implement.CryptographRepository.rctwoCryptograph">
            <summary>
            The RC2 cryptograph.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cryptograph.Implement.CryptographRepository.rijndaelCryptograph">
            <summary>
            The rijndael cryptograph.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cryptograph.Implement.CryptographRepository.rsaCryptograph">
            <summary>
            The RSA cryptograph.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cryptograph.Implement.CryptographRepository.tripleDesCryptograph">
            <summary>
            The triple DES cryptograph.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.Implement.CryptographRepository.#ctor(Ctrip.Duckbill.Cryptograph.IDESCryptograph,Ctrip.Duckbill.Cryptograph.IAESCryptograph,Ctrip.Duckbill.Cryptograph.IRC2Cryptograph,Ctrip.Duckbill.Cryptograph.IRijndaelCryptograph,Ctrip.Duckbill.Cryptograph.IRSACryptograph,Ctrip.Duckbill.Cryptograph.ITripleDESCryptograph)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Cryptograph.Implement.CryptographRepository" /> class.
            </summary>
            <param name="desCryptograph">The DES cryptograph.</param>
            <param name="aesCryptograph">The aes cryptograph.</param>
            <param name="rctwoCryptograph">The RC2 cryptograph.</param>
            <param name="rijndaelCryptograph">The rijndael cryptograph.</param>
            <param name="rsaCryptograph">The RSA cryptograph.</param>
            <param name="tripleDesCryptograph">The triple DES cryptograph.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.Implement.CryptographRepository.GetCryptograph(Ctrip.Duckbill.Cryptograph.CryptoAlgorithm)">
            <summary>
            Get Crypto item.
            </summary>
            <param name="algorithm">Algorithm type.</param>
            <returns>Crypto item.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.Implement.CryptographRepository.CreateDesCryptograph(System.Byte[],System.Byte[])">
            <summary>
            Creates the des cryptograph.
            </summary>
            <param name="key">The key.</param>
            <param name="iv">The iv.</param>
            <returns>Des cryptograph.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.Implement.CryptographRepository.CreateAesCryptograph(System.Byte[],System.Byte[])">
            <summary>
            Creates the aes cryptograph.
            </summary>
            <param name="key">The key.</param>
            <param name="iv">The iv.</param>
            <returns>Aes cryptograph.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.Implement.CryptographRepository.CreateRc2Cryptograph(System.Byte[],System.Byte[])">
            <summary>
            Creates the rc2 cryptograph.
            </summary>
            <param name="key">The key.</param>
            <param name="iv">The iv.</param>
            <returns>Rc2 cryptograph.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.Implement.CryptographRepository.CreateRijndaelCryptograph(System.Byte[],System.Byte[])">
            <summary>
            Creates the rijndael cryptograph.
            </summary>
            <param name="key">The key.</param>
            <param name="iv">The iv.</param>
            <returns>Rijndael cryptograph.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.Implement.CryptographRepository.CreateRSACryptograph(System.String)">
            <summary>
            Creates the rsa cryptograph.
            </summary>
            <param name="key">The key.</param>
            <returns>Rsa cryptograph.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.Implement.CryptographRepository.CreateTripleDESCryptograph(System.Byte[],System.Byte[])">
            <summary>
            Creates the TripleDES cryptograph.
            </summary>
            <param name="key">The key.</param>
            <param name="iv">The iv.</param>
            <returns>TripleDES cryptograph.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Cryptograph.Implement.DESCryptograph">
            <summary>
            Class DESCryptograph.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cryptograph.Implement.DESCryptograph.desKey">
            <summary>
            Des key.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cryptograph.Implement.DESCryptograph.desIV">
            <summary>
            Des IV.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cryptograph.Implement.DESCryptograph.encryptProvider">
            <summary>
            The encrypt provider.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cryptograph.Implement.DESCryptograph.decryptProvider">
            <summary>
            The decrypt provider.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.Implement.DESCryptograph.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Cryptograph.Implement.DESCryptograph"/> class.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.Implement.DESCryptograph.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Cryptograph.Implement.DESCryptograph" /> class.
            </summary>
            <param name="desKey">The DES key.</param>
            <param name="desIV">The DES iv.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.Implement.DESCryptograph.Encrypt(System.String)">
            <summary>
            Do encrypt for plainString.
            </summary>
            <param name="plainString">Plain string.</param>
            <returns>Encrypted string as base64.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.Implement.DESCryptograph.Decrypt(System.String)">
            <summary>
            Do Decrypt from encryptedBase64String.
            </summary>
            <param name="encryptedBase64String">Base64 string of encrypted.</param>
            <returns>Plain string.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Cryptograph.Implement.RC2Cryptograph">
            <summary>
            Rc2 cryptograph.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cryptograph.Implement.RC2Cryptograph.rc2Key">
            <summary>
            Rc2 key.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cryptograph.Implement.RC2Cryptograph.rc2IV">
            <summary>
            Rc2 IV.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cryptograph.Implement.RC2Cryptograph.encryptProvider">
            <summary>
            The encrypt provider.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cryptograph.Implement.RC2Cryptograph.decryptProvider">
            <summary>
            The decrypt provider.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.Implement.RC2Cryptograph.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Cryptograph.Implement.RC2Cryptograph"/> class.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.Implement.RC2Cryptograph.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Cryptograph.Implement.RC2Cryptograph" /> class.
            </summary>
            <param name="rc2Key">The RC2 key.</param>
            <param name="rc2IV">The RC2 iv.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.Implement.RC2Cryptograph.Encrypt(System.String)">
            <summary>
            Do encrypt for plainString.
            </summary>
            <param name="plainString">Plain string.</param>
            <returns>Encrypted string as base64.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.Implement.RC2Cryptograph.Decrypt(System.String)">
            <summary>
            Do Decrypt from encryptedBase64String.
            </summary>
            <param name="encryptedBase64String">Base64 string of encrypted.</param>
            <returns>Plain string.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Cryptograph.Implement.RijndaelCryptograph">
            <summary>
            Rijndael cryptograph.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cryptograph.Implement.RijndaelCryptograph.rijndaelKey">
            <summary>
            Rijndael key.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cryptograph.Implement.RijndaelCryptograph.rijndaelIV">
            <summary>
            Rijndael IV.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cryptograph.Implement.RijndaelCryptograph.encryptProvider">
            <summary>
            The encrypt provider.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cryptograph.Implement.RijndaelCryptograph.decryptProvider">
            <summary>
            The decrypt provider.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.Implement.RijndaelCryptograph.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Cryptograph.Implement.RijndaelCryptograph"/> class.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.Implement.RijndaelCryptograph.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Cryptograph.Implement.RijndaelCryptograph" /> class.
            </summary>
            <param name="rijndaelKey">The rijndael key.</param>
            <param name="rijndaelIV">The rijndael iv.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.Implement.RijndaelCryptograph.Encrypt(System.String)">
            <summary>
            Do encrypt for plainString.
            </summary>
            <param name="plainString">Plain string.</param>
            <returns>Encrypted string as base64.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.Implement.RijndaelCryptograph.Decrypt(System.String)">
            <summary>
            Do Decrypt from encryptedBase64String.
            </summary>
            <param name="encryptedBase64String">Base64 string of encrypted.</param>
            <returns>Plain string.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Cryptograph.Implement.RSACryptograph">
            <summary>
            Encrypt and Decrypt string.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cryptograph.Implement.RSACryptograph.key">
            <summary>
            Rsa key.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cryptograph.Implement.RSACryptograph.provider">
            <summary>
            The provider.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.Implement.RSACryptograph.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Cryptograph.Implement.RSACryptograph"/> class.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.Implement.RSACryptograph.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Cryptograph.Implement.RSACryptograph" /> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.Implement.RSACryptograph.Encrypt(System.String)">
            <summary>
            Encrypt plain string.
            </summary>
            <param name="plainString">Plain string.</param>
            <returns>Sting of Encrypted as base64.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.Implement.RSACryptograph.Decrypt(System.String)">
            <summary>
            Decrypt base64String.
            </summary>
            <param name="encryptedBase64String">String of encrypted as base64.</param>
            <returns>Plain string.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Cryptograph.Implement.TripleDESCryptograph">
            <summary>
            Triple des cryptograph.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cryptograph.Implement.TripleDESCryptograph.tripleDesKey">
            <summary>
            Triple des key.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cryptograph.Implement.TripleDESCryptograph.tripleDesIV">
            <summary>
            Triple des IV.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cryptograph.Implement.TripleDESCryptograph.encryptProvider">
            <summary>
            The encrypt provider.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Cryptograph.Implement.TripleDESCryptograph.decryptProvider">
            <summary>
            The decrypt provider.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.Implement.TripleDESCryptograph.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Cryptograph.Implement.TripleDESCryptograph"/> class.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.Implement.TripleDESCryptograph.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Cryptograph.Implement.TripleDESCryptograph" /> class.
            </summary>
            <param name="tripleDesKey">The triple DES key.</param>
            <param name="tripleDesIV">The triple DES iv.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.Implement.TripleDESCryptograph.Encrypt(System.String)">
            <summary>
            Do encrypt for plainString.
            </summary>
            <param name="plainString">Plain string.</param>
            <returns>Encrypted string as base64.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Cryptograph.Implement.TripleDESCryptograph.Decrypt(System.String)">
            <summary>
            Do Decrypt from encryptedBase64String.
            </summary>
            <param name="encryptedBase64String">Base64 string of encrypted.</param>
            <returns>Plain string.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Cryptograph.IRC2Cryptograph">
            <summary>
            Rc2 cryptograph interface.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Cryptograph.IRijndaelCryptograph">
            <summary>
            Rijndael cryptograph interface.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Cryptograph.IRSACryptograph">
            <summary>
            RSA cryptograph interface.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Cryptograph.ITripleDESCryptograph">
            <summary>
            Triple des cryptograph interface.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.ConfiguredDataCommandDescriptor">
            <summary>
            Configured data command descriptor.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.ConfiguredDataCommandDescriptor.configuredDataCommand">
            <summary>
            The configured data command.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.ConfiguredDataCommandDescriptor.#ctor(Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataCommandUnit,Ctrip.Duckbill.DataAccess.IDBConfigurationRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.ConfiguredDataCommandDescriptor" /> class.
            </summary>
            <param name="configuredDataCommand">The configured data command.</param>
            <param name="configurationRepository">The database configuration repository.</param>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.ConfiguredDataCommandDescriptor.Name">
            <summary>
            Gets command name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.ConfiguredDataCommandDescriptor.Database">
            <summary>
            Gets database name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.ConfiguredDataCommandDescriptor.CommandType">
            <summary>
            Gets command type.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.ConfiguredDataCommandDescriptor.TimeOut">
            <summary>
            Gets time out.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.ConfiguredDataCommandDescriptor.CommandText">
            <summary>
            Gets command text.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.ConfiguredDataCommandDescriptor.CheckContextDatabase">
            <summary>
            Gets a value indicating whether need check context database.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.ConfiguredDataCommandDescriptor.ParameterCollection">
            <summary>
            Gets data parameter collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.ConfiguredDataCommandDescriptor.ParameterGroupCollection">
            <summary>
            Gets data parameter group collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataBaseGroup">
            <summary>
            Database group.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataBaseGroup.Name">
            <summary>
            Gets or sets group name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataBaseGroup.DatabaseInstances">
            <summary>
            Gets or sets database instances.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataBaseGroup.DatabaseCollection">
            <summary>
            Gets database collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataBasesConfig">
            <summary>
            Database config.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataBasesConfig.CheckContextDatabase">
            <summary>
            Gets or sets check context database.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataBasesConfig.DatabaseGroups">
            <summary>
            Gets or sets database groups.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataBaseUnit">
            <summary>
            Database unit.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataBaseUnit.Name">
            <summary>
            Gets or sets database name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataBaseUnit.ConnectionStringList">
            <summary>
            Gets or sets connection string list.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataBaseUnit.ConnectionCollection">
            <summary>
            Gets connection string list.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataCommandFilesConfig">
            <summary>
            Gets or sets data command files.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataCommandFilesConfig.FileList">
            <summary>
            Gets or sets data command file list.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataCommandFileUnit">
            <summary>
            Data command file unit.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataCommandFileUnit.FileName">
            <summary>
            Gets or sets file name.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataCommandParameterCollection">
            <summary>
            Data command parameter collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataCommandParameterCollection.ParameterCollection">
            <summary>
            Gets or sets parameter list.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataCommandParameterCollection.ParameterGroupCollection">
            <summary>
            Gets or sets parameter group collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataCommandsConfig">
            <summary>
            Gets or sets data commands config.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataCommandsConfig.DataCommandCollection">
            <summary>
            Gets or sets data command list.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataCommandUnit">
            <summary>
            Data command unit.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataCommandUnit.Name">
            <summary>
            Gets or sets command name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataCommandUnit.Database">
            <summary>
            Gets or sets database name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataCommandUnit.CommandType">
            <summary>
            Gets or sets command type.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataCommandUnit.TimeOut">
            <summary>
            Gets or sets time out.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataCommandUnit.CommandText">
            <summary>
            Gets or sets command text.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataCommandUnit.CDataCommandText">
            <summary>
            Gets or sets free block content.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataCommandUnit.Parameters">
            <summary>
            Gets or sets parameters.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataParameterGroupUnit">
            <summary>
            Data prameter group unit.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataParameterGroupUnit.Name">
            <summary>
            Gets or sets parameter name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataParameterGroupUnit.DbType">
            <summary>
            Gets or sets db type.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataParameterGroupUnit.Size">
            <summary>
            Gets or sets arameter size.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataParameterGroupUnit.Precision">
            <summary>
            Gets or sets parameter precision.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataParameterGroupUnit.Scale">
            <summary>
            Gets or sets parameter scale.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataParameterUnit">
            <summary>
            Data prameter unit.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataParameterUnit.Name">
            <summary>
            Gets or sets parameter name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataParameterUnit.DbType">
            <summary>
            Gets or sets db type.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataParameterUnit.IsOutput">
            <summary>
            Gets or sets a value indicating whether parameter is a output parameter.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataParameterUnit.Size">
            <summary>
            Gets or sets arameter size.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataParameterUnit.Precision">
            <summary>
            Gets or sets parameter precision.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DataParameterUnit.Scale">
            <summary>
            Gets or sets parameter scale.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DBConfigurationRepository">
            <summary>
            Default db configuration repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DBConfigurationRepository.configAccessor">
            <summary>
            The configuration accessor.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DBConfigurationRepository.#ctor(Ctrip.Duckbill.Configuration.IConfigurationAccessor)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DBConfigurationRepository"/> class.
            </summary>
            <param name="configAccessor">The configuration accessor.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DBConfigurationRepository.GetDataBaseGroup(System.String)">
            <summary>
            Get data base by database name.
            </summary>
            <param name="databaseGroupName">Database group name.</param>
            <returns>Database group.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DBConfigurationRepository.GetDataBase(System.String)">
            <summary>
            Get data base by database name.
            </summary>
            <param name="databaseName">Database name.</param>
            <returns>Database unit.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DBConfigurationRepository.GetDataCommandFiles">
            <summary>
            Get data command files.
            </summary>
            <returns>Data command files.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DBConfigurationRepository.GetDataCommand(System.String)">
            <summary>
            Get data command.
            </summary>
            <param name="dataCommandName">Data command name.</param>
            <returns>Data command descriptor.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DBConfigurationRepository.CheckContextDatabase(System.String)">
            <summary>
            Get a value indicating whether need check context database.
            </summary>
            <param name="databaseName">Requested database name.</param>
            <returns>A value indicating whether need check context database.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DBConfigurationRepository.GetDataBaseConfiguration">
            <summary>
            Gets the data base configuration.
            </summary>
            <returns>DataBases Config.</returns>
            <exception cref="T:System.OperationCanceledException">
            Database config is null, please check Databases.config under your configuration\\data folder.
            or
            Database group is null, please check Databases.config under your configuration\\data folder.
            </exception>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.Configuration.DBConfigurationRepository.GetDataCommandFromSpecialFile(System.String,System.String)">
            <summary>
            Get data command from special file.
            </summary>
            <param name="dataCommandName">Data command name.</param>
            <param name="file">File path.</param>
            <returns>Data command descriptor.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.DBImplement.CustomDataCommandDescriptor">
            <summary>
            Custom data command descriptor.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.CustomDataCommandDescriptor.Name">
            <summary>
            Gets or sets command name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.CustomDataCommandDescriptor.Database">
            <summary>
            Gets or sets database name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.CustomDataCommandDescriptor.CommandType">
            <summary>
            Gets or sets command type.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.CustomDataCommandDescriptor.TimeOut">
            <summary>
            Gets or sets time out.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.CustomDataCommandDescriptor.CommandText">
            <summary>
            Gets or sets command text.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.CustomDataCommandDescriptor.CheckContextDatabase">
            <summary>
            Gets or sets a value indicating whether need check context database.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.CustomDataCommandDescriptor.ParameterCollection">
            <summary>
            Gets data parameter collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.CustomDataCommandDescriptor.ParameterGroupCollection">
            <summary>
            Gets or sets data parameter group collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.DBImplement.DBManager">
            <summary>
            Default db manager.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.DBManager.configRepository">
            <summary>
            Configuration repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.DBManager.context">
            <summary>
            Request context.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.DBManager.databaseProvider">
            <summary>
            Database provider.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.DBManager.entityBuilder">
            <summary>
            Entity Builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.DBManager.regex">
            <summary>
            Regex manager.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.DBManager.dataReaderConverter">
            <summary>
            The data reader converter.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.DBManager.frameworkLoggerFactory">
            <summary>
            The framework logger factory.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.DBManager.#ctor(Ctrip.Duckbill.DataAccess.IDBConfigurationRepository,Ctrip.Duckbill.Context.IRequestContext,Ctrip.Duckbill.DataAccess.IDataBaseProvider,Ctrip.Duckbill.EntityMapping.IEntityBuilder,Ctrip.Duckbill.IRegex,Ctrip.Duckbill.DataAccess.IDataReaderConverter,Ctrip.Duckbill.Log.IFrameworkLoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.DataAccess.DBImplement.DBManager" /> class.
            </summary>
            <param name="configRepository">The configuration repository.</param>
            <param name="context">The context.</param>
            <param name="databaseProvider">The database provider.</param>
            <param name="entityBuilder">The entity builder.</param>
            <param name="regex">The regex.</param>
            <param name="dataReaderConverter">The data reader converter.</param>
            <param name="frameworkLoggerFactory">The framework logger factory.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.DBManager.CreateDBCommand(System.String)">
            <summary>
            Create db command by configured command name.
            </summary>
            <param name="commandName">Configured command name.</param>
            <returns>Db command.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.DBManager.CreateDBCommand(System.String,System.String)">
            <summary>
            Create db command by configured command name.
            </summary>
            <param name="databaseName">Configured database name.</param>
            <param name="commandName">Configured command name.</param>
            <returns>Db command.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.DBManager.CreateCustomDBCommand(System.String,System.String)">
            <summary>
            Create custom db command.
            </summary>
            <param name="databaseName">Configured database name.</param>
            <param name="commandText">Command text.</param>
            <returns>Db command.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.DBManager.CreateStoredProcedureDBCommand(System.String,System.String)">
            <summary>
            Creates the stored procedure database command.
            </summary>
            <param name="databaseName">Configured database name.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <returns>Db command.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.DBManager.GetDatabaseName(Ctrip.Duckbill.DataAccess.IDataCommandDescriptor)">
            <summary>
            Get database name.
            </summary>
            <param name="command">Data command descriptor.</param>
            <returns>Data base name.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.DBManager.GetConfiguredCommand(System.String)">
            <summary>
            Gets the configured command.
            </summary>
            <param name="commandName">Name of the command.</param>
            <returns>Data command descriptor.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.DBManager.GetConfiguredDatabase(System.String)">
            <summary>
            Gets the configured database.
            </summary>
            <param name="databaseName">Name of the database.</param>
            <returns>Configured database.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand">
            <summary>
            Default implement of db command.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.databaseProvider">
            <summary>
            Database provider.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.entityBuilder">
            <summary>
            Entity Builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.regex">
            <summary>
            Regex manager.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.dataReaderConverter">
            <summary>
            The data reader converter.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.frameworkLoggerFactory">
            <summary>
            The framework logger factory.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.dataBaseDescriptor">
            <summary>
            Database descriptor.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.commandDescriptor">
            <summary>
            DB command descriptor.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.commands">
            <summary>
            DB commands.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.myParameters">
            <summary>
            Field of my parameters.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.appliedGroupParametersCommands">
            <summary>
            Field of applied group parameter commands.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.myGroupParameters">
            <summary>
            Field of my group parameters.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.#ctor(Ctrip.Duckbill.DataAccess.IDataBaseDescriptor,Ctrip.Duckbill.DataAccess.IDataCommandDescriptor,Ctrip.Duckbill.DataAccess.IDataBaseProvider,Ctrip.Duckbill.EntityMapping.IEntityBuilder,Ctrip.Duckbill.IRegex,Ctrip.Duckbill.DataAccess.IDataReaderConverter,Ctrip.Duckbill.Log.IFrameworkLoggerFactory)">
            <summary>
            Initializes a new instance of the DefaultDBCommand class.
            </summary>
            <param name="database">Database descriptor.</param>
            <param name="command">Command descriptor.</param>
            <param name="databaseProvider">The database provider.</param>
            <param name="entityBuilder">The entity builder.</param>
            <param name="regex">The regex.</param>
            <param name="dataReaderConverter">The data reader converter.</param>
            <param name="frameworkLoggerFactory">The framework logger factory.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.#ctor(Ctrip.Duckbill.DataAccess.IDataBaseProvider,Ctrip.Duckbill.EntityMapping.IEntityBuilder,Ctrip.Duckbill.IRegex,Ctrip.Duckbill.DataAccess.IDataReaderConverter,Ctrip.Duckbill.Log.IFrameworkLoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand" /> class.
            </summary>
            <param name="databaseProvider">The database provider.</param>
            <param name="entityBuilder">The entity builder.</param>
            <param name="regex">The regex.</param>
            <param name="dataReaderConverter">The data reader converter.</param>
            <param name="frameworkLoggerFactory">The framework logger factory.</param>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.Name">
            <summary>
            Gets db command name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.DatabaseName">
            <summary>
            Gets database name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.Parameters">
            <summary>
            Gets parameters.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.AddInParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            Adds a new in parameter object to this command.
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbtype"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>                
            <param name="value"><para>The value of the parameter.</para></param>      
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.AddInParameter(System.String,System.Data.DbType,System.Int32,System.Byte,System.Byte,System.Object)">
            <summary>
            Adds a new in parameter object to this command.
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbtype"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>   
            <param name="size"><para>The maximum size of the data within the column.</para></param>
            <param name="precision"><para>The maximum number of digits used to represent the <paramref name="value"/>.</para></param>
            <param name="scale"><para>The number of decimal places to which <paramref name="value"/> is resolved.</para></param>
            <param name="value"><para>The value of the parameter.</para></param>      
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.AddOutParameter(System.String,System.Data.DbType)">
            <summary>
            Adds a new Out <see cref="T:System.Data.Common.DbParameter"/> object to this command.
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbtype"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>            
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.AddOutParameter(System.String,System.Data.DbType,System.Int32,System.Byte,System.Byte)">
            <summary>
            Adds a new out parameter object to this command.
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbtype"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>        
            <param name="size"><para>The maximum size of the data within the parameter.</para></param>   
            <param name="precision"><para>The maximum number of digits used to represent the parameter.</para></param>
            <param name="scale"><para>The number of decimal places to which parameter is resolved.</para></param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.AddParameter(System.String,System.Object)">
            <summary>
            Add parameter to command.
            </summary>
            <param name="parameterName">Parameter name.</param>
            <param name="parameterValue">Parameter value.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.AddGroupParameter(System.String,System.Collections.IEnumerable)">
            <summary>
            Add parameter group to command.
            </summary>
            <param name="parameterGroupName">Parameter group name.</param>
            <param name="parameterValues">Parameter group value.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.AddParameter(System.Data.Common.DbParameter)">
            <summary>
            Add parameter to command.
            </summary>
            <param name="parameter">Parameter instance.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.GetParameterValue(System.String)">
            <summary>
            Get parameter value.
            </summary>
            <param name="name">Parameter name.</param>
            <returns>Parameter value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.ExecuteEntityCollection``1">
            <summary>
            Executes the query and returns the entity collection of the result set returned by the query. 
            </summary>
            <typeparam name="TEntity">Entity type.</typeparam>
            <returns>Entity instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.ExecuteEntity``1">
            <summary>
            Executes the query and returns the entity of the first row in the result set returned by the query. All other columns and rows are ignored.
            </summary>
            <typeparam name="TEntity">Entity type.</typeparam>
            <returns>Entity instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.ExecuteScalar">
            <summary>
            Executes the query and returns the first column of the first row in the result set returned by the query. All other columns and rows are ignored.
            </summary>
            <returns>The first column of the first row in the result set.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.ExecuteNonQuery">
            <summary>
            Executes a SQL statement against a connection object.
            </summary>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.ExecuteTable">
            <summary>
            Executes the query and returns the data table.
            </summary>
            <returns>Data table result.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.ExecuteDataSet">
            <summary>
            Executes the query and returns the data set.
            </summary>
            <returns>Dataset result.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.ExecuteWithRetry``1(System.Func{Ctrip.Duckbill.DataAccess.IDataBase,System.Data.Common.DbCommand,``0})">
            <summary>
            Executes the with retry.
            </summary>
            <typeparam name="TResult">The type of the t result.</typeparam>
            <param name="func">The function.</param>
            <returns>Execution result.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.GetRealCommand(System.String)">
            <summary>
            Get real db command.
            </summary>
            <param name="connection">Connection string.</param>
            <returns>Real db command.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.GetParameterDescriptor(System.String)">
            <summary>
            Get parameter descriptor.
            </summary>
            <param name="parameterName">Parameter name.</param>
            <returns>Data parameter descriptor.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.GetParameterGroupDescriptor(System.String)">
            <summary>
            Get parameter descriptor.
            </summary>
            <param name="parameterName">Parameter name.</param>
            <returns>Data parameter descriptor.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.RegisterOutputParametersInCommandDescriptor(Ctrip.Duckbill.DataAccess.IDataCommandDescriptor)">
            <summary>
            Register output parameters in command descriptor.
            </summary>
            <param name="command">Command descriptor.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.DefaultDBCommand.LogException(System.Exception,System.Data.Common.DbCommand)">
            <summary>
            Log exception.
            </summary>
            <param name="ex">Exception instance.</param>
            <param name="cmd">Db Command.</param>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.CachingMechanism">
            <summary>
            CachingMechanism provides caching support for stored procedure parameter discovery and caching.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.CachingMechanism.paramCache">
            <summary>
            Parameter cache.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.CachingMechanism.CloneParameters(System.Data.IDataParameter[])">
            <summary>
            Create and return a copy of the IDataParameter array.
            </summary>      
            <param name="originalParameters">Original parameters.</param>
            <returns>Data parameters.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.CachingMechanism.Clear">
            <summary>
            Empties all items from the cache.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.CachingMechanism.AddParameterSetToCache(System.String,System.Data.IDbCommand,System.Data.IDataParameter[])">
            <summary>
            Add a parameter array to the cache for the command.
            </summary>      
            <param name="connectionString">Connection string.</param>
            <param name="command">Db command.</param>
            <param name="parameters">Db parameters.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.CachingMechanism.GetCachedParameterSet(System.String,System.Data.IDbCommand)">
            <summary>
            Gets a parameter array from the cache for the command. Returns null if no parameters are found.
            </summary>       
            <param name="connectionString">Connection string.</param>
            <param name="command">Db command.</param>
            <returns>Data parameters.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.CachingMechanism.IsParameterSetCached(System.String,System.Data.IDbCommand)">
            <summary>
            Gets if a given stored procedure on a specific connection string has a cached parameter set.
            </summary>  
            <param name="connectionString">Connection string.</param>
            <param name="command">Db command.</param>
            <returns>Whether a given stored procedure on a specific connection string has a cached parameter set.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.CachingMechanism.CreateHashKey(System.String,System.String)">
            <summary>
            Create hash key.
            </summary>
            <param name="connectionString">Connection string.</param>
            <param name="storedProcedure">Stored procedure.</param>
            <returns>Hash key.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.ConnectionString">
            <summary>
            ConnectionString class constructs a connection string by 
            inserting a username and password into a template.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.ConnectionString.ConnstringDelim">
            <summary>
            Connection string delim.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.ConnectionString.connectionString">
            <summary>
            Connection string.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.ConnectionString.connectionStringWithoutCredentials">
            <summary>
            Connection string without credentials.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.ConnectionString.userIdTokens">
            <summary>
            User id tokens.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.ConnectionString.passwordTokens">
            <summary>
            Password tokens.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.ConnectionString.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.ConnectionString"/> class with a connection string, the user ID tokens and password tokens.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="userIdTokens">The user id tokens that can be parsed out of the connection string.</param>
            <param name="passwordTokens">The password tokens that can be parsed out of the conection string.</param>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.ConnectionString.UserName">
            <summary>
            Gets or sets the name of the user.
            </summary>
            <value>The name of the user.</value>
            <devdoc>
            Database username for the connection string.
            </devdoc>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.ConnectionString.ToString">
            <summary>
            Gets the formatted connection string.
            </summary>
            <returns>Formatted connection string.</returns>        
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.ConnectionString.ToStringNoCredentials">
            <summary>
            Gets the formatted connection string without the username and password.
            </summary>
            <returns>Formatted connection string without the user name and password.</returns>       
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.ConnectionString.CreateNewConnectionString(System.String)">
            <summary>
            Formats a new connection string with a user ID and password.
            </summary>  
            <param name="connectionStringToFormat">
            The connection string to format.
            </param>
            <returns>Connection string.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.ConnectionString.GetTokenPositions(System.String,System.Int32@,System.Int32@)">
            <summary>
            Get token position.
            </summary>
            <param name="tokenString">Token string.</param>
            <param name="tokenPos">Token posistion.</param>
            <param name="tokenMPos">Token M posittion.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.ConnectionString.RemoveCredentials(System.String)">
            <summary>
            Remove credentials.
            </summary>
            <param name="connectionStringToModify">Connection string to modify.</param>
            <returns>Connection string without credentials.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DaabAsyncResult">
            <summary>
            This class represents an asynchronous operation invoked from the <see cref="T:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database"/> class methods.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DaabAsyncResult.innerAsyncResult">
            <summary>
            Inner async result.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DaabAsyncResult.command">
            <summary>
            Db command.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DaabAsyncResult.disposeCommand">
            <summary>
            Whether dispose command.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DaabAsyncResult.closeConnection">
            <summary>
            Whether close connection.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DaabAsyncResult.startTime">
            <summary>
            Start time.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DaabAsyncResult.#ctor(System.IAsyncResult,System.Data.Common.DbCommand,System.Boolean,System.Boolean,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DaabAsyncResult"/> class.
            </summary>
            <param name="innerAsyncResult">The <see cref='T:System.IAsyncResult'/> object returned from the underlying
            async operation.</param>
            <param name="command">Command that was executed.</param>
            <param name="disposeCommand">Should the command be disposed at EndInvoke time.</param>
            <param name="closeConnection">Should this connection be closed at EndInvoke time.</param>
            <param name="startTime">Time operation was invoked.</param>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DaabAsyncResult.AsyncState">
            <summary>
            Gets the state object passed to the callback.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DaabAsyncResult.AsyncWaitHandle">
            <summary>
            Gets wait handle to use to wait synchronously for completion.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DaabAsyncResult.CompletedSynchronously">
            <summary>
            Gets a value indicating whether begin operation completed synchronously.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DaabAsyncResult.IsCompleted">
            <summary>
            Gets a value indicating whether has the operation finished.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DaabAsyncResult.InnerAsyncResult">
            <summary>
            Gets the underlying <see cref="T:System.IAsyncResult"/> object.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DaabAsyncResult.DisposeCommand">
            <summary>
            Gets a value indicating whether should the command be disposed by the End method.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DaabAsyncResult.Command">
            <summary>
            Gets the command that was executed.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DaabAsyncResult.CloseConnection">
            <summary>
            Gets a value indicating whether should the connection be closed by the End method.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DaabAsyncResult.Connection">
            <summary>
            Gets connection the operation was invoked on.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DaabAsyncResult.StartTime">
            <summary>
            Gets time the operation was started.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database">
            <summary>
            Represents an abstract database that commands can be run against.
            </summary>
            <remarks>The <see cref="T:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database" /> class leverages the provider factory model from ADO.NET. A database instance holds
            a reference to a concrete <see cref="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.DatabaseProviderFactory" /> object to which it forwards the creation of ADO.NET objects.</remarks>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ParameterCache">
            <summary>
            Parameters cache.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ValidPasswordTokens">
            <summary>
            Valid password tokens.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ValidUserIDTokens">
            <summary>
            Valid user id tokens.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.connectionString">
            <summary>
            Connection string.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.databaseProviderFactory">
            <summary>
            Database provider factory.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.#ctor(System.String,System.Data.Common.DbProviderFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="databaseProviderFactory">The database provider factory.</param>
            <exception cref="T:System.ArgumentException">Connection string.</exception>
            <exception cref="T:System.ArgumentNullException">Database provider factory.</exception>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.SupportsParameterDiscovery">
            <summary>
            Gets a value indicating whether <see cref='T:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database'/> object support parameter discovery.
            </summary>
            <value>Base class always returns false.</value>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ConnectionString">
            <summary>
            <para>Gets the string used to open a database.</para>
            </summary>
            <value>
            <para>The string used to open a database.</para>
            </value>
            <seealso cref="P:System.Data.Common.DbConnection.ConnectionString"/>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.SupportsAsync">
            <summary>
            Gets a value indicating whether this <see cref='T:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database'/> object support asynchronous execution.
            </summary>
            <value>Base class always returns false.</value>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ConnectionStringWithoutCredentials">
            <summary>
            Gets the connection string without credentials.
            </summary>
            <value>
            The connection string without credentials.
            </value>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.DatabaseProviderFactory">
            <summary>
            <para>Gets the DbProviderFactory used by the database instance.</para>
            </summary>
            <seealso cref="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.DatabaseProviderFactory"/>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ConnectionStringNoCredentials">
            <summary>
            <para>Gets the connection string without the username and password.</para>
            </summary>
            <value>
            <para>The connection string without the username and password.</para>
            </value>
            <seealso cref="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ConnectionString"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ClearParameterCache">
            <summary>
            Clears the parameter cache. Since there is only one parameter cache that is shared by all instances
            of this class, this clears all parameters cached for all databases.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.AddInParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType)">
            <summary>
            Adds a new In <see cref="T:System.Data.Common.DbParameter"/> object to the given <paramref name="command"/>.
            </summary>
            <param name="command">The command to add the in parameter.</param>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbtype"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>                
            <remarks>
            <para>This version of the method is used when you can have the same parameter object multiple times with different values.</para>
            </remarks>        
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.AddInParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Object)">
            <summary>
            Adds a new In <see cref="T:System.Data.Common.DbParameter"/> object to the given <paramref name="command"/>.
            </summary>
            <param name="command">The commmand to add the parameter.</param>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbtype"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>                
            <param name="value"><para>The value of the parameter.</para></param>      
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.AddInParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.String,System.Data.DataRowVersion)">
            <summary>
            Adds a new In <see cref="T:System.Data.Common.DbParameter"/> object to the given <paramref name="command"/>.
            </summary>
            <param name="command">The command to add the parameter.</param>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbtype"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>                
            <param name="sourceColumn"><para>The name of the source column mapped to the DataSet and used for loading or returning the value.</para></param>
            <param name="sourceVersion"><para>One of the <see cref="T:System.Data.DataRowVersion"/> values.</para></param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.AddOutParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Int32)">
            <summary>
            Adds a new Out <see cref="T:System.Data.Common.DbParameter"/> object to the given <paramref name="command"/>.
            </summary>
            <param name="command">The command to add the out parameter.</param>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbtype"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>        
            <param name="size"><para>The maximum size of the data within the column.</para></param>        
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.AddParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            Adds a new In <see cref="T:System.Data.Common.DbParameter"/> object to the given <paramref name="command"/>.
            </summary>
            <param name="command">The command to add the parameter.</param>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbtype"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>
            <param name="size"><para>The maximum size of the data within the column.</para></param>
            <param name="direction"><para>One of the <see cref="T:System.Data.ParameterDirection"/> values.</para></param>
            <param name="nullable"><para>Avalue indicating whether the parameter accepts <see langword="null"/> (<b>Nothing</b> in Visual Basic) values.</para></param>
            <param name="precision"><para>The maximum number of digits used to represent the <paramref name="value"/>.</para></param>
            <param name="scale"><para>The number of decimal places to which <paramref name="value"/> is resolved.</para></param>
            <param name="sourceColumn"><para>The name of the source column mapped to the DataSet and used for loading or returning the <paramref name="value"/>.</para></param>
            <param name="sourceVersion"><para>One of the <see cref="T:System.Data.DataRowVersion"/> values.</para></param>
            <param name="value"><para>The value of the parameter.</para></param>       
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.AddParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Data.ParameterDirection,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            <para>Adds a new instance of a <see cref="T:System.Data.Common.DbParameter"/> object to the command.</para>
            </summary>
            <param name="command">The command to add the parameter.</param>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbtype"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>        
            <param name="direction"><para>One of the <see cref="T:System.Data.ParameterDirection"/> values.</para></param>                
            <param name="sourceColumn"><para>The name of the source column mapped to the DataSet and used for loading or returning the <paramref name="value"/>.</para></param>
            <param name="sourceVersion"><para>One of the <see cref="T:System.Data.DataRowVersion"/> values.</para></param>
            <param name="value"><para>The value of the parameter.</para></param>    
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.BuildParameterName(System.String)">
            <summary>
            Builds a value parameter name for the current database.
            </summary>
            <param name="name">The name of the parameter.</param>
            <returns>A correctly formated parameter name.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.CreateConnection">
            <summary>
            <para>Creates a connection for this database.</para>
            </summary>
            <returns>
            <para>The <see cref="T:System.Data.Common.DbConnection"/> for this database.</para>
            </returns>
            <seealso cref="T:System.Data.Common.DbConnection"/>        
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.DiscoverParameters(System.Data.Common.DbCommand)">
            <summary>
            Discovers the parameters for a <see cref="T:System.Data.Common.DbCommand"/>.
            </summary>
            <param name="command">The <see cref="T:System.Data.Common.DbCommand"/> to discover the parameters.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            <para>Executes the <paramref name="command"/> and returns the results in a new <see cref="T:System.Data.DataSet"/>.</para>
            </summary>
            <param name="command"><para>The <see cref="T:System.Data.Common.DbCommand"/> to execute.</para></param>
            <returns>A <see cref="T:System.Data.DataSet"/> with the results of the <paramref name="command"/>.</returns>        
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteDataSet(System.Data.Common.DbCommand,System.Data.Common.DbTransaction)">
            <summary>
            <para>Executes the <paramref name="command"/> as part of the <paramref name="transaction" /> and returns the results in a new <see cref="T:System.Data.DataSet"/>.</para>
            </summary>
            <param name="command"><para>The <see cref="T:System.Data.Common.DbCommand"/> to execute.</para></param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <returns>A <see cref="T:System.Data.DataSet"/> with the results of the <paramref name="command"/>.</returns>        
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the <paramref name="storedProcedureName" /> with <paramref name="parameterValues" /> and returns the results in a new <see cref="T:System.Data.DataSet" />.
            </summary>
            <param name="storedProcedureName">The stored procedure to execute.</param>
            <param name="parameterValues">An array of paramters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</param>
            <returns>A <see cref="T:System.Data.DataSet" /> with the results of the <paramref name="storedProcedureName" />.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteDataSet(System.Data.Common.DbTransaction,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns>Data set.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the <paramref name="commandText" /> interpreted as specified by the <paramref name="commandType" /> and returns the results in a new <see cref="T:System.Data.DataSet" />.
            </summary>
            <param name="commandType">One of the <see cref="T:System.Data.CommandType" /> values.</param>
            <param name="commandText">The command text to execute.</param>
            <returns>A <see cref="T:System.Data.DataSet" /> with the results of the <paramref name="commandText" />.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteDataSet(System.Data.Common.DbTransaction,System.Data.CommandType,System.String)">
            <summary>
            <para>Executes the <paramref name="commandText"/> as part of the given <paramref name="transaction" /> and returns the results in a new <see cref="T:System.Data.DataSet"/>.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Data.DataSet"/> with the results of the <paramref name="commandText"/>.</para>
            </returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            <para>Executes the <paramref name="command"/> and returns the number of rows affected.</para>
            </summary>
            <param name="command">
            <para>The command that contains the query to execute.</para>
            </param>       
            <returns>Effect rows count.</returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteNonQuery(System.Data.Common.DbCommand,System.Data.Common.DbTransaction)">
            <summary>
            <para>Executes the <paramref name="command"/> within the given <paramref name="transaction" />, and returns the number of rows affected.</para>
            </summary>
            <param name="command">
            <para>The command that contains the query to execute.</para>
            </param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <returns>Effect rows count.</returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            <para>Executes the <paramref name="storedProcedureName"/> using the given <paramref name="parameterValues" /> and returns the number of rows affected.</para>
            </summary>
            <param name="storedProcedureName">
            <para>The name of the stored procedure to execute.</para>
            </param>
            <param name="parameterValues">
            <para>An array of paramters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
            <returns>
            <para>The number of rows affected.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteNonQuery(System.Data.Common.DbTransaction,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns>Execute result.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            <para>Executes the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType" /> and returns the number of rows affected.</para>
            </summary>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <returns>
            <para>The number of rows affected.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteNonQuery(System.Data.Common.DbTransaction,System.Data.CommandType,System.String)">
            <summary>
            <para>Executes the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType" /> as part of the given <paramref name="transaction" /> and returns the number of rows affected.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <returns>
            <para>The number of rows affected.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            <para>Executes the <paramref name="command"/> and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the reader when finished.</para>
            </summary>
            <param name="command">
            <para>The command that contains the query to execute.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>        
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteReader(System.Data.Common.DbCommand,System.Data.Common.DbTransaction)">
            <summary>
            <para>Executes the <paramref name="command"/> within a transaction and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>
            <param name="command">
            <para>The command that contains the query to execute.</para>
            </param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>        
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteReader(System.String,System.Object[])">
            <summary>
            <para>Executes the <paramref name="storedProcedureName"/> with the given <paramref name="parameterValues" /> and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>        
            <param name="storedProcedureName">
            <para>The command that contains the query to execute.</para>
            </param>
            <param name="parameterValues">
            <para>An array of paramters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>        
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteReader(System.Data.Common.DbTransaction,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns>Data reader.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            <para>Executes the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType" /> and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>        
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteReader(System.Data.Common.DbTransaction,System.Data.CommandType,System.String)">
            <summary>
            <para>Executes the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType" /> within the given 
            <paramref name="transaction" /> and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>        
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            <para>Executes the <paramref name="command"/> and returns the first column of the first row in the result set returned by the query. Extra columns or rows are ignored.</para>
            </summary>
            <param name="command">
            <para>The command that contains the query to execute.</para>
            </param>
            <returns>
            <para>The first column of the first row in the result set.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteScalar(System.Data.Common.DbCommand,System.Data.Common.DbTransaction)">
            <summary>
            <para>Executes the <paramref name="command"/> within a <paramref name="transaction" />, and returns the first column of the first row in the result set returned by the query. Extra columns or rows are ignored.</para>
            </summary>
            <param name="command">
            <para>The command that contains the query to execute.</para>
            </param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <returns>
            <para>The first column of the first row in the result set.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns>Execute result.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteScalar(System.Data.Common.DbTransaction,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns>Execute result.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns>Execute result.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteScalar(System.Data.Common.DbTransaction,System.Data.CommandType,System.String)">
            <summary>
            <para>Executes the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType" /> 
            within the given <paramref name="transaction" /> and returns the first column of the first row in the result set returned by the query. Extra columns or rows are ignored.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <returns>
            <para>The first column of the first row in the result set.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.GetDataAdapter">
            <summary>
            Gets the data adapter.
            </summary>
            <returns>Db Data Adapter.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.GetParameterValue(System.Data.Common.DbCommand,System.String)">
            <summary>
            Gets a parameter value.
            </summary>
            <param name="command">The command that contains the parameter.</param>
            <param name="name">The name of the parameter.</param>
            <returns>The value of the parameter.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.GetSqlStringCommand(System.String)">
            <summary>
            <para>Creates a <see cref="T:System.Data.Common.DbCommand"/> for a SQL query.</para>
            </summary>
            <param name="query"><para>The text of the query.</para></param>        
            <returns><para>The <see cref="T:System.Data.Common.DbCommand"/> for the SQL query.</para></returns>        
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.GetStoredProcCommand(System.String)">
            <summary>
            <para>Creates a <see cref="T:System.Data.Common.DbCommand"/> for a stored procedure.</para>
            </summary>
            <param name="storedProcedureName"><para>The name of the stored procedure.</para></param>
            <returns><para>The <see cref="T:System.Data.Common.DbCommand"/> for the stored procedure.</para></returns>       
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.GetStoredProcCommand(System.String,System.Object[])">
            <summary>
            <para>Creates a <see cref="T:System.Data.Common.DbCommand"/> for a stored procedure.</para>
            </summary>
            <param name="storedProcedureName"><para>The name of the stored procedure.</para></param>
            <param name="parameterValues"><para>The list of parameters for the procedure.</para></param>
            <returns><para>The <see cref="T:System.Data.Common.DbCommand"/> for the stored procedure.</para></returns>
            <remarks>
            <para>The parameters for the stored procedure will be discovered and the values are assigned in positional order.</para>
            </remarks>        
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.AssignParameters(System.Data.Common.DbCommand,System.Object[])">
            <summary>
            <para>Discovers parameters on the <paramref name="command"/> and assigns the values from <paramref name="parameterValues"/> to the <paramref name="command"/>s Parameters list.</para>
            </summary>
            <param name="command">The command the parameeter values will be assigned to.</param>
            <param name="parameterValues">The parameter values that will be assigned to the command.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.GetStoredProcCommandWithSourceColumns(System.String,System.String[])">
            <summary>
            Wraps around a derived class's implementation of the GetStoredProcCommandWrapper method and adds functionality for
            using this method with UpdateDataSet.  The GetStoredProcCommandWrapper method (above) that takes a params array 
            expects the array to be filled with VALUES for the parameters. This method differs from the GetStoredProcCommandWrapper 
            method in that it allows a user to pass in a string array. It will also dynamically discover the parameters for the 
            stored procedure and set the parameter's SourceColumns to the strings that are passed in. It does this by mapping 
            the parameters to the strings IN ORDER. Thus, order is very important.
            </summary>
            <param name="storedProcedureName"><para>The name of the stored procedure.</para></param>
            <param name="sourceColumns"><para>The list of DataFields for the procedure.</para></param>
            <returns><para>The <see cref="T:System.Data.Common.DbCommand"/> for the stored procedure.</para></returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.LoadDataSet(System.Data.Common.DbCommand,System.Data.DataSet,System.String)">
            <summary>
            <para>Executes the <paramref name="command"/> and adds a new <see cref="T:System.Data.DataTable"></see> to the existing <see cref="T:System.Data.DataSet"></see>.</para>
            </summary>
            <param name="command">
            <para>The <see cref="T:System.Data.Common.DbCommand"/> to execute.</para>
            </param>
            <param name="dataSet">
            <para>The <see cref="T:System.Data.DataSet"/> to load.</para>
            </param>
            <param name="tableName">
            <para>The name for the new <see cref="T:System.Data.DataTable"/> to add to the <see cref="T:System.Data.DataSet"/>.</para>
            </param>        
            <exception cref="T:System.ArgumentNullException">Any input parameter was <see langword="null"/> (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">tableName was an empty string.</exception>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.LoadDataSet(System.Data.Common.DbCommand,System.Data.DataSet,System.String,System.Data.Common.DbTransaction)">
            <summary>
            Loads the data set.
            </summary>
            <param name="command">The command.</param>
            <param name="dataSet">The data set.</param>
            <param name="tableName">Name of the table.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.LoadDataSet(System.Data.Common.DbCommand,System.Data.DataSet,System.String[])">
            <summary>
            <para>Loads a <see cref="T:System.Data.DataSet"/> from a <see cref="T:System.Data.Common.DbCommand"/>.</para>
            </summary>
            <param name="command">
            <para>The command to execute to fill the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
            <param name="dataSet">
            <para>The <see cref="T:System.Data.DataSet"/> to fill.</para>
            </param>
            <param name="tableNames">
            <para>An array of table name mappings for the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.LoadDataSet(System.Data.Common.DbCommand,System.Data.DataSet,System.String[],System.Data.Common.DbTransaction)">
            <summary>
            <para>Loads a <see cref="T:System.Data.DataSet"/> from a <see cref="T:System.Data.Common.DbCommand"/> in  a transaction.</para>
            </summary>
            <param name="command">
            <para>The command to execute to fill the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
            <param name="dataSet">
            <para>The <see cref="T:System.Data.DataSet"/> to fill.</para>
            </param>
            <param name="tableNames">
            <para>An array of table name mappings for the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command in.</para>
            </param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.LoadDataSet(System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Loads the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="dataSet">The data set.</param>
            <param name="tableNames">The table names.</param>
            <param name="parameterValues">The parameter values.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.LoadDataSet(System.Data.Common.DbTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Loads the data set.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="dataSet">The data set.</param>
            <param name="tableNames">The table names.</param>
            <param name="parameterValues">The parameter values.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.LoadDataSet(System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Loads the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <param name="dataSet">The data set.</param>
            <param name="tableNames">The table names.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.LoadDataSet(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Loads the data set.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <param name="dataSet">The data set.</param>
            <param name="tableNames">The table names.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.SetParameterValue(System.Data.Common.DbCommand,System.String,System.Object)">
            <summary>
            Sets a parameter value.
            </summary>
            <param name="command">The command with the parameter.</param>
            <param name="parameterName">The parameter name.</param>
            <param name="value">The parameter value.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.UpdateDataSet(System.Data.DataSet,System.String,System.Data.Common.DbCommand,System.Data.Common.DbCommand,System.Data.Common.DbCommand,Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.UpdateBehavior,System.Nullable{System.Int32})">
            <summary>
            <para>Calls the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the <see cref="T:System.Data.DataSet"/>.</para>
            </summary>        
            <param name="dataSet"><para>The <see cref="T:System.Data.DataSet"/> used to update the data source.</para></param>
            <param name="tableName"><para>The name of the source table to use for table mapping.</para></param>
            <param name="insertCommand"><para>The <see cref="T:System.Data.Common.DbCommand"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Added"/>.</para></param>
            <param name="updateCommand"><para>The <see cref="T:System.Data.Common.DbCommand"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Modified"/>.</para></param>        
            <param name="deleteCommand"><para>The <see cref="T:System.Data.Common.DbCommand"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Deleted"/>.</para></param>        
            <param name="updateBehavior"><para>One of the <see cref="T:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.UpdateBehavior"/> values.</para></param>
            <param name="updateBatchSize">The number of database commands to execute in a batch.</param>
            <returns>Number of records affected.</returns>        
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.UpdateDataSet(System.Data.DataSet,System.String,System.Data.Common.DbCommand,System.Data.Common.DbCommand,System.Data.Common.DbCommand,Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.UpdateBehavior)">
            <summary>
            <para>Calls the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the <see cref="T:System.Data.DataSet"/>.</para>
            </summary>        
            <param name="dataSet"><para>The <see cref="T:System.Data.DataSet"/> used to update the data source.</para></param>
            <param name="tableName"><para>The name of the source table to use for table mapping.</para></param>
            <param name="insertCommand"><para>The <see cref="T:System.Data.Common.DbCommand"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Added"/>.</para></param>
            <param name="updateCommand"><para>The <see cref="T:System.Data.Common.DbCommand"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Modified"/>.</para></param>        
            <param name="deleteCommand"><para>The <see cref="T:System.Data.Common.DbCommand"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Deleted"/>.</para></param>        
            <param name="updateBehavior"><para>One of the <see cref="T:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.UpdateBehavior"/> values.</para></param>
            <returns>Number of records affected.</returns>        
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.UpdateDataSet(System.Data.DataSet,System.String,System.Data.Common.DbCommand,System.Data.Common.DbCommand,System.Data.Common.DbCommand,System.Data.Common.DbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>Calls the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the <see cref="T:System.Data.DataSet"/> within a transaction.</para>
            </summary>        
            <param name="dataSet"><para>The <see cref="T:System.Data.DataSet"/> used to update the data source.</para></param>
            <param name="tableName"><para>The name of the source table to use for table mapping.</para></param>
            <param name="insertCommand"><para>The <see cref="T:System.Data.Common.DbCommand"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Added"/>.</para></param>
            <param name="updateCommand"><para>The <see cref="T:System.Data.Common.DbCommand"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Modified"/>.</para></param>        
            <param name="deleteCommand"><para>The <see cref="T:System.Data.Common.DbCommand"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Deleted"/>.</para></param>        
            <param name="transaction"><para>The <see cref="T:System.Data.IDbTransaction"/> to use.</para></param>
            <param name="updateBatchSize">The number of commands that can be executed in a single call to the database. Set to 0 to
            use the largest size the server can handle, 1 to disable batch updates, and anything else to set the number of rows.
            </param>
            <returns>Number of records affected.</returns>        
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.UpdateDataSet(System.Data.DataSet,System.String,System.Data.Common.DbCommand,System.Data.Common.DbCommand,System.Data.Common.DbCommand,System.Data.Common.DbTransaction)">
            <summary>
            <para>Calls the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the <see cref="T:System.Data.DataSet"/> within a transaction.</para>
            </summary>        
            <param name="dataSet"><para>The <see cref="T:System.Data.DataSet"/> used to update the data source.</para></param>
            <param name="tableName"><para>The name of the source table to use for table mapping.</para></param>
            <param name="insertCommand"><para>The <see cref="T:System.Data.Common.DbCommand"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Added"/>.</para></param>
            <param name="updateCommand"><para>The <see cref="T:System.Data.Common.DbCommand"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Modified"/>.</para></param>        
            <param name="deleteCommand"><para>The <see cref="T:System.Data.Common.DbCommand"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Deleted"/>.</para></param>        
            <param name="transaction"><para>The <see cref="T:System.Data.IDbTransaction"/> to use.</para></param>
            <returns>Number of records affected.</returns>        
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.BeginExecuteNonQuery(System.Data.Common.DbCommand,System.AsyncCallback,System.Object)">
            <summary>
            <para>Initiates the asynchronous execution of the <see cref="T:System.Data.Common.DbCommand"/> which will return the number of affected records.</para>
            </summary>
            <param name="command">
            <para>The <see cref="T:System.Data.Common.DbCommand"/> to execute.</para>
            </param>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteNonQuery(System.Data.Common.DbCommand)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteNonQuery(System.IAsyncResult)"/>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteNonQuery(System.IAsyncResult)"/>, 
            which returns the number of affected records.</para>
            </returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.BeginExecuteNonQuery(System.Data.Common.DbCommand,System.Data.Common.DbTransaction,System.AsyncCallback,System.Object)">
            <summary>
            <para>Initiates the asynchronous execution of the <see cref="T:System.Data.Common.DbCommand"/> inside a transaction which will return the number of affected records.</para>
            </summary>
            <param name="command">
            <para>The <see cref="T:System.Data.Common.DbCommand"/> to execute.</para>
            </param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.Common.DbTransaction"/> to execute the command within.</para>
            </param>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteNonQuery(System.Data.Common.DbCommand)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteNonQuery(System.IAsyncResult)"/>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteNonQuery(System.IAsyncResult)"/>, 
            which returns the number of affected records.</para>
            </returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.BeginExecuteNonQuery(System.String,System.AsyncCallback,System.Object,System.Object[])">
            <summary>
            <para>Initiates the asynchronous execution of the <paramref name="storedProcedureName"/> using the given <paramref name="parameterValues" /> which will return the number of rows affected.</para>
            </summary>
            <param name="storedProcedureName"><para>The name of the stored procedure to execute.</para></param>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <param name="parameterValues">
            <para>An array of paramters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteNonQuery(System.IAsyncResult)"/>, 
            which returns the number of affected records.</para>
            </returns>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteNonQuery(System.String,System.Object[])"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteNonQuery(System.IAsyncResult)"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.BeginExecuteNonQuery(System.Data.Common.DbTransaction,System.String,System.AsyncCallback,System.Object,System.Object[])">
            <summary>
            <para>Initiates the asynchronous execution of the <paramref name="storedProcedureName"/> using the given <paramref name="parameterValues" /> inside a transaction which will return the number of rows affected.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.Common.DbTransaction"/> to execute the command within.</para>
            </param>
            <param name="storedProcedureName">
            <para>The name of the stored procedure to execute.</para>
            </param>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <param name="parameterValues">
            <para>An array of paramters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteNonQuery(System.IAsyncResult)"/>, 
            which returns the number of affected records.</para>
            </returns>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteNonQuery(System.String,System.Object[])"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteNonQuery(System.IAsyncResult)"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.BeginExecuteNonQuery(System.Data.CommandType,System.String,System.AsyncCallback,System.Object)">
            <summary>
            <para>Initiates the asynchronous execution of the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType" /> which will return the number of rows affected.</para>
            </summary>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteNonQuery(System.IAsyncResult)"/>, 
            which returns the number of affected records.</para>
            </returns>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteNonQuery(System.Data.CommandType,System.String)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteNonQuery(System.IAsyncResult)"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.BeginExecuteNonQuery(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.AsyncCallback,System.Object)">
            <summary>
            <para>Initiates the asynchronous execution of the the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType" /> inside a tranasaction which will return the number of rows affected.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.Common.DbTransaction"/> to execute the command within.</para>
            </param>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteNonQuery(System.IAsyncResult)"/>, 
            which returns the number of affected records.</para>
            </returns>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteNonQuery(System.Data.CommandType,System.String)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteNonQuery(System.IAsyncResult)"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteNonQuery(System.IAsyncResult)">
            <summary>
            Finishes asynchronous execution of a SQL statement, returning the number of affected records.
            </summary>
            <param name="asyncResult">
            <para>The <see cref="T:System.IAsyncResult"/> returned by a call to any overload of <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.BeginExecuteNonQuery(System.Data.Common.DbCommand,System.AsyncCallback,System.Object)"/>.</para>
            </param>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteNonQuery(System.Data.Common.DbCommand)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.BeginExecuteNonQuery(System.Data.Common.DbCommand,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.BeginExecuteNonQuery(System.Data.Common.DbCommand,System.Data.Common.DbTransaction,System.AsyncCallback,System.Object)"/>
            <returns>
            <para>The number of affected records.</para>
            </returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.BeginExecuteReader(System.Data.Common.DbCommand,System.AsyncCallback,System.Object)">
            <summary>
            <para>Initiates the asynchronous execution of a <paramref name="command"/> which will return a <see cref="T:System.Data.IDataReader"/>.</para>
            </summary>
            <param name="command">
            <para>The <see cref="T:System.Data.Common.DbCommand"/> to execute.</para>
            </param>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteReader(System.IAsyncResult)"/>, 
            which returns the <see cref="T:System.Data.IDataReader"/>.</para>
            </returns>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteReader(System.Data.Common.DbCommand)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteReader(System.IAsyncResult)"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.BeginExecuteReader(System.Data.Common.DbCommand,System.Data.Common.DbTransaction,System.AsyncCallback,System.Object)">
            <summary>
            <para>Initiates the asynchronous execution of a <paramref name="command"/> inside a transaction which will return a <see cref="T:System.Data.IDataReader"/>.</para>
            </summary>
            <param name="command">
            <para>The <see cref="T:System.Data.Common.DbCommand"/> to execute.</para>
            </param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.Common.DbTransaction"/> to execute the command within.</para>
            </param>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteReader(System.IAsyncResult)"/>, 
            which returns the <see cref="T:System.Data.IDataReader"/>.</para>
            </returns>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteReader(System.Data.Common.DbCommand)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteReader(System.IAsyncResult)"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.BeginExecuteReader(System.String,System.AsyncCallback,System.Object,System.Object[])">
            <summary>
            <para>Initiates the asynchronous execution of <paramref name="storedProcedureName"/> using the given <paramref name="parameterValues" /> which will return a <see cref="T:System.Data.IDataReader"/>.</para>
            </summary>
            <param name="storedProcedureName">
            <para>The name of the stored procedure to execute.</para>
            </param>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <param name="parameterValues">
            <para>An array of parameters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteReader(System.IAsyncResult)"/>, 
            which returns the <see cref="T:System.Data.IDataReader"/>.</para>
            </returns>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteReader(System.String,System.Object[])"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteReader(System.IAsyncResult)"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.BeginExecuteReader(System.Data.Common.DbTransaction,System.String,System.AsyncCallback,System.Object,System.Object[])">
            <summary>
            <para>Initiates the asynchronous execution of <paramref name="storedProcedureName"/> using the given <paramref name="parameterValues" /> inside a transaction which will return a <see cref="T:System.Data.IDataReader"/>.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.Common.DbTransaction"/> to execute the command within.</para>
            </param>
            <param name="storedProcedureName">
            <para>The name of the stored procedure to execute.</para>
            </param>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <param name="parameterValues">
            <para>An array of parameters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteReader(System.IAsyncResult)"/>, 
            which returns the <see cref="T:System.Data.IDataReader"/>.</para>
            </returns>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteReader(System.Data.Common.DbTransaction,System.String,System.Object[])"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteReader(System.IAsyncResult)"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.BeginExecuteReader(System.Data.CommandType,System.String,System.AsyncCallback,System.Object)">
            <summary>
            <para>Initiates the asynchronous execution of the <paramref name="commandText"/> 
            interpreted as specified by the <paramref name="commandType" /> which will return 
            a <see cref="T:System.Data.IDataReader"/>. When the async operation completes, the
            <paramref name="callback"/> will be invoked on another thread to process the
            result.</para>
            </summary>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <param name="callback"><see cref="T:System.AsyncCallback"/> to execute when the async operation
            completes.</param>
            <param name="state">State object passed to the callback.</param>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteReader(System.IAsyncResult)"/>, 
            which returns the <see cref="T:System.Data.IDataReader"/>.</para>
            </returns>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteReader(System.Data.CommandType,System.String)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteReader(System.IAsyncResult)"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.BeginExecuteReader(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.AsyncCallback,System.Object)">
            <summary>
            <para>Initiates the asynchronous execution of the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType" /> inside an transaction which will return a <see cref="T:System.Data.IDataReader"/>.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.Common.DbTransaction"/> to execute the command within.</para>
            </param>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteReader(System.IAsyncResult)"/>, 
            which returns the <see cref="T:System.Data.IDataReader"/>.</para>
            </returns>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteReader(System.Data.CommandType,System.String)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteReader(System.IAsyncResult)"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteReader(System.IAsyncResult)">
            <summary>
            Finishes asynchronous execution of a Transact-SQL statement, returning an <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="asyncResult">
            <para>The <see cref="T:System.IAsyncResult"/> returned by a call to any overload of BeginExecuteReader.</para>
            </param>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteReader(System.Data.Common.DbCommand)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.BeginExecuteReader(System.Data.Common.DbCommand,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.BeginExecuteReader(System.Data.Common.DbCommand,System.Data.Common.DbTransaction,System.AsyncCallback,System.Object)"/>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object that can be used to consume the queried information.</para>
            </returns>     
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.BeginExecuteScalar(System.Data.Common.DbCommand,System.AsyncCallback,System.Object)">
            <summary>
            <para>Initiates the asynchronous execution of a <paramref name="command"/> which will return a single value.</para>
            </summary>
            <param name="command">
            <para>The <see cref="T:System.Data.Common.DbCommand"/> to execute.</para>
            </param>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteScalar(System.IAsyncResult)"/>, 
            which returns the actual result.</para>
            </returns>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteScalar(System.Data.Common.DbCommand)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteScalar(System.IAsyncResult)"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.BeginExecuteScalar(System.Data.Common.DbCommand,System.Data.Common.DbTransaction,System.AsyncCallback,System.Object)">
            <summary>
            <para>Initiates the asynchronous execution of a <paramref name="command"/> inside a transaction which will return a single value.</para>
            </summary>
            <param name="command">
            <para>The <see cref="T:System.Data.Common.DbCommand"/> to execute.</para>
            </param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.Common.DbTransaction"/> to execute the command within.</para>
            </param>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteScalar(System.IAsyncResult)"/>, 
            which returns the actual result.</para>
            </returns>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteScalar(System.Data.Common.DbCommand,System.Data.Common.DbTransaction)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteScalar(System.IAsyncResult)"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.BeginExecuteScalar(System.String,System.AsyncCallback,System.Object,System.Object[])">
            <summary>
            <para>Initiates the asynchronous execution of <paramref name="storedProcedureName"/> using the given <paramref name="parameterValues" /> which will return a single value.</para>
            </summary>
            <param name="storedProcedureName">
            <para>The name of the stored procedure to execute.</para>
            </param>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <param name="parameterValues">
            <para>An array of parameters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteScalar(System.IAsyncResult)"/>, 
            which returns the actual result.</para>
            </returns>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteScalar(System.String,System.Object[])"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteScalar(System.IAsyncResult)"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.BeginExecuteScalar(System.Data.Common.DbTransaction,System.String,System.AsyncCallback,System.Object,System.Object[])">
            <summary>
            <para>Initiates the asynchronous execution of <paramref name="storedProcedureName"/> using the given <paramref name="parameterValues" /> inside a transaction which will return a single value.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.Common.DbTransaction"/> to execute the command within.</para>
            </param>
            <param name="storedProcedureName">
            <para>The name of the stored procedure to execute.</para>
            </param>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <param name="parameterValues">
            <para>An array of parameters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteScalar(System.IAsyncResult)"/>, 
            which returns the actual result.</para>
            </returns>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteScalar(System.Data.Common.DbTransaction,System.String,System.Object[])"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteScalar(System.IAsyncResult)"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.BeginExecuteScalar(System.Data.CommandType,System.String,System.AsyncCallback,System.Object)">
            <summary>
            <para>Initiates the asynchronous execution of the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType" /> which will return a single value.</para>
            </summary>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteScalar(System.IAsyncResult)"/>, 
            which returns the actual result.</para>
            </returns>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteScalar(System.Data.CommandType,System.String)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteScalar(System.IAsyncResult)"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.BeginExecuteScalar(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.AsyncCallback,System.Object)">
            <summary>
            <para>Initiates the asynchronous execution of the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType" /> inside an transaction which will return a single value.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.Common.DbTransaction"/> to execute the command within.</para>
            </param>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteScalar(System.IAsyncResult)"/>, 
            which returns the actual result.</para>
            </returns>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteScalar(System.Data.Common.DbTransaction,System.Data.CommandType,System.String)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteScalar(System.IAsyncResult)"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.EndExecuteScalar(System.IAsyncResult)">
            <summary>
            <para>Finishes asynchronous execution of a Transact-SQL statement, returning the first column of the first row in the result set returned by the query. Extra columns or rows are ignored.</para>
            </summary>
            <param name="asyncResult">
            <para>The <see cref="T:System.IAsyncResult"/> returned by a call to any overload of BeginExecuteScalar.</para>
            </param>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteScalar(System.Data.Common.DbCommand)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.BeginExecuteScalar(System.Data.Common.DbCommand,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.BeginExecuteScalar(System.Data.Common.DbCommand,System.Data.Common.DbTransaction,System.AsyncCallback,System.Object)"/>
            <returns>
            <para>The value of the first column of the first row in the result set returned by the query.
            If the result didn't have any columns or rows <see langword="null"/> (<b>Nothing</b> in Visual Basic).</para>
            </returns>     
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.CreateParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Byte,System.Byte,System.Object)">
            <summary>
            <para>Adds a new instance of a <see cref="T:System.Data.Common.DbParameter"/> object.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbtype"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>
            <param name="size"><para>The maximum size of the data within the column.</para></param>
            <param name="direction"><para>One of the <see cref="T:System.Data.ParameterDirection"/> values.</para></param>
            <param name="precision"><para>The maximum number of digits used to represent the <paramref name="value"/>.</para></param>
            <param name="scale"><para>The number of decimal places to which <paramref name="value"/> is resolved.</para></param>
            <param name="value"><para>The value of the parameter.</para></param>  
            <returns>A newly created <see cref="T:System.Data.Common.DbParameter"/> fully initialized with given parameters.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.GetNewOpenConnection">
            <summary>
            Get new open connection.
            </summary>
            <returns>Db connection.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.PrepareCommand(System.Data.Common.DbCommand,System.Data.Common.DbConnection)">
            <summary>
            <para>Assigns a <paramref name="connection"/> to the <paramref name="command"/> and discovers parameters if needed.</para>
            </summary>
            <param name="command"><para>The command that contains the query to prepare.</para></param>
            <param name="connection">The connection to assign to the command.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.PrepareCommand(System.Data.Common.DbCommand,System.Data.Common.DbTransaction)">
            <summary>
            <para>Assigns a <paramref name="transaction"/> to the <paramref name="command"/> and discovers parameters if needed.</para>
            </summary>
            <param name="command"><para>The command that contains the query to prepare.</para></param>
            <param name="transaction">The transaction to assign to the command.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.SameNumberOfParametersAndValues(System.Data.Common.DbCommand,System.Object[])">
            <summary>
            Determines if the number of parameters in the command matches the array of parameter values.
            </summary>
            <param name="command">The <see cref="T:System.Data.Common.DbCommand"/> containing the parameters.</param>
            <param name="values">The array of parameter values.</param>
            <returns><see langword="true"/> if the number of parameters and values match; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.SetUpRowUpdatedEvent(System.Data.Common.DbDataAdapter)">
            <summary>
            Sets the RowUpdated event for the data adapter.
            </summary>
            <param name="adapter">The <see cref="T:System.Data.Common.DbDataAdapter"/> to set the event.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.UserParametersStartIndex">
            <summary>
            Returns the starting index for parameters in a command.
            </summary>
            <returns>The starting index for parameters in a command.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.DoExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the query for <paramref name="command"/>.
            </summary>
            <param name="command">The <see cref="T:System.Data.Common.DbCommand"/> representing the query to execute.</param>
            <returns>The quantity of rows affected.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.CreateWrappedReader(Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DatabaseConnectionWrapper,System.Data.IDataReader)">
            <summary>
            All data readers get wrapped in objects so that they properly manage connections.
            Some derived Database classes will need to create a different wrapper, so this
            method is provided so that they can do this.
            </summary>
            <param name="connection">Connection + refcount.</param>
            <param name="innerReader">The reader to wrap.</param>
            <returns>The new reader.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.GetDataAdapter(Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.UpdateBehavior)">
            <summary>
            Gets the DbDataAdapter with the given update behavior and connection from the proper derived class.
            </summary>
            <param name="updateBehavior">
            <para>One of the <see cref="T:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.UpdateBehavior"/> values.</para>
            </param>        
            <returns>A <see cref="T:System.Data.Common.DbDataAdapter"/>.</returns>
            <seealso cref="T:System.Data.Common.DbDataAdapter"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.GetOpenConnection">
            <summary>
            	Gets a "wrapped" connection that will be not be disposed if a transaction is
            	active (created by creating a <see cref="T:System.Transactions.TransactionScope"/> instance). The
            	connection will be disposed when no transaction is active.
            </summary>
            <returns>Database connection wrapper.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.GetWrappedConnection">
            <summary>
            Gets a "wrapped" connection for use outside a transaction.
            </summary>
            <returns>The wrapped connection.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.CreateParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            Creates the parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="dbtype">The dbtype.</param>
            <param name="size">The size.</param>
            <param name="direction">The direction.</param>
            <param name="nullable">If set to <c>true</c> [nullable].</param>
            <param name="precision">The precision.</param>
            <param name="scale">The scale.</param>
            <param name="sourceColumn">The source column.</param>
            <param name="sourceVersion">The source version.</param>
            <param name="value">The value.</param>
            <returns>Db Parameter.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.CreateParameter(System.String)">
            <summary>
            <para>Adds a new instance of a <see cref="T:System.Data.Common.DbParameter"/> object.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <returns><para>An un configured parameter.</para></returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.DeriveParameters(System.Data.Common.DbCommand)">
            <summary>
            Retrieves parameter information from the stored procedure specified in the <see cref="T:System.Data.Common.DbCommand"/> and populates the Parameters collection of the specified <see cref="T:System.Data.Common.DbCommand"/> object. 
            </summary>
            <param name="discoveryCommand">The <see cref="T:System.Data.Common.DbCommand"/> to do the discovery.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ConfigureParameter(System.Data.Common.DbParameter,System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            Configures a given <see cref="T:System.Data.Common.DbParameter"/>.
            </summary>
            <param name="param">The <see cref="T:System.Data.Common.DbParameter"/> to configure.</param>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbtype"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>
            <param name="size"><para>The maximum size of the data within the column.</para></param>
            <param name="direction"><para>One of the <see cref="T:System.Data.ParameterDirection"/> values.</para></param>
            <param name="nullable"><para>Avalue indicating whether the parameter accepts <see langword="null"/> (<b>Nothing</b> in Visual Basic) values.</para></param>
            <param name="precision"><para>The maximum number of digits used to represent the <paramref name="value"/>.</para></param>
            <param name="scale"><para>The number of decimal places to which <paramref name="value"/> is resolved.</para></param>
            <param name="sourceColumn"><para>The name of the source column mapped to the DataSet and used for loading or returning the <paramref name="value"/>.</para></param>
            <param name="sourceVersion"><para>One of the <see cref="T:System.Data.DataRowVersion"/> values.</para></param>
            <param name="value"><para>The value of the parameter.</para></param>  
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.LogException(System.Exception,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Log exception.
            </summary>
            <param name="ex">Exception instance.</param>
            <param name="messages">Log messages.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.LogException(System.Exception,System.String)">
            <summary>
            Log exception.
            </summary>
            <param name="ex">Exception instance.</param>
            <param name="message">Log messages.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.LogException(System.Exception)">
            <summary>
            Log exception.
            </summary>
            <param name="ex">Exception instance.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.BeginTransaction(System.Data.Common.DbConnection)">
            <summary>
            Begin transaction.
            </summary>
            <param name="connection">Db connection.</param>
            <returns>Db transaction.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.CommitTransaction(System.Data.IDbTransaction)">
            <summary>
            Commit trasaction.
            </summary>
            <param name="tran">Db transaction.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.RollbackTransaction(System.Data.IDbTransaction)">
            <summary>
            Roll back transaction.
            </summary>
            <param name="tran">DB transaction.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.AssignParameterValues(System.Data.Common.DbCommand,System.Object[])">
            <summary>
            Assign parameters values.
            </summary>
            <param name="command">Db commond.</param>
            <param name="values">Db values.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.CreateCommandByCommandType(System.Data.CommandType,System.String)">
            <summary>
            Create db commond by command type.
            </summary>
            <param name="commandType">Db command type.</param>
            <param name="commandText">Db command text.</param>
            <returns>Db commond.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.DoExecuteReader(System.Data.Common.DbCommand,System.Data.CommandBehavior)">
            <summary>
            Do execute reader.
            </summary>
            <param name="command">Db command.</param>
            <param name="cmdBehavior">Db behavior.</param>
            <returns>Data reader.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.DoExecuteScalar(System.Data.IDbCommand)">
            <summary>
            Do execute scalar.
            </summary>
            <param name="command">Db command.</param>
            <returns>Object instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.DoLoadDataSet(System.Data.IDbCommand,System.Data.DataSet,System.String[])">
            <summary>
            Do load data set.
            </summary>
            <param name="command">Db command.</param>
            <param name="dataSet">Data set.</param>
            <param name="tableNames">Table names.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.DoUpdateDataSet(Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.UpdateBehavior,System.Data.DataSet,System.String,System.Data.IDbCommand,System.Data.IDbCommand,System.Data.IDbCommand,System.Nullable{System.Int32})">
            <summary>
            Do update data sate.
            </summary>
            <param name="behavior">Update behavior.</param>
            <param name="dataSet">Data set.</param>
            <param name="tableName">Table name.</param>
            <param name="insertCommand">Insert command.</param>
            <param name="updateCommand">Update command.</param>
            <param name="deleteCommand">Delete command.</param>
            <param name="updateBatchSize">Update batch size.</param>
            <returns>Effect rows count.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.AsyncNotSupported">
            <summary>
            Async not support.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DatabaseConnectionWrapper">
            <summary>
            This is a small helper class used to manage closing a connection 
            in the presence of transaction pooling. We can't actually
            close the connection until everyone using it is done, thus, we
            need reference counting.
            </summary>
            <remarks>
            User code should not use this class directly - it's used internally
            by the authors of DAAB providers to manage connections when using
            the DAAB methods.
            </remarks>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DatabaseConnectionWrapper.refCount">
            <summary>
            Reference count.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DatabaseConnectionWrapper.#ctor(System.Data.Common.DbConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DatabaseConnectionWrapper"/> class that wraps
            the given <paramref name="connection"/>.
            </summary>
            <param name="connection">Database connection to manage the lifetime of.</param>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DatabaseConnectionWrapper.Connection">
            <summary>
            Gets the underlying <see cref="T:System.Data.Common.DbConnection"/> we're managing.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DatabaseConnectionWrapper.IsDisposed">
            <summary>
            Gets a value indicating whether this wrapper has disposed the underlying connection.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DatabaseConnectionWrapper.AddRef">
            <summary>
            Increment the reference count for the wrapped connection.
            </summary>
            <returns>Database connection wrapper.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DatabaseConnectionWrapper.Dispose">
            <summary>
            Decrement the reference count and, if refcount is 0, close the underlying connection.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DatabaseConnectionWrapper.Dispose(System.Boolean)">
            <summary>
            Usual Dispose pattern folderal to shut up FxCop.
            </summary>
            <param name="disposing">True if called via <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DatabaseConnectionWrapper.Dispose"/> method, false
            if called from finalizer. Of course, since we have no finalizer this will never
            be false.</param>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper">
            <summary>
            Wrapper class that implements a pass through version of <see cref="T:System.Data.IDataReader"/>.
            Useful for various places where we need to wrap data readers for connection
            management.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.innerReader">
            <summary>
            Inner data reader.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.#ctor(System.Data.IDataReader)">
            <summary>
            Initializes a new instance of the <see cref='T:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper'/> class that delegates all methods
            to the given <paramref name="innerReader"/>.
            </summary>
            <param name="innerReader"><see cref="T:System.Data.IDataReader"/> to wrap.</param>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.InnerReader">
            <summary>
            Gets the actual raw <see cref="T:System.Data.IDataReader"/> we're wrapping.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.FieldCount">
            <summary>
            Gets the number of columns in the current row.
            </summary>
            <returns>
            When not positioned in a valid recordset, 0; otherwise, the number of columns in the current record. The default is -1.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.Depth">
            <summary>
            Gets a value indicating the depth of nesting for the current row.
            </summary>
            <returns>
            The level of nesting.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.IsClosed">
            <summary>
            Gets a value indicating whether the data reader is closed.
            </summary>
            <returns>
            true if the data reader is closed; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.RecordsAffected">
            <summary>
            Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.
            </summary>
            <returns>
            The number of rows changed, inserted, or deleted; 0 if no rows were affected or the statement failed; and -1 for SELECT statements.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.System#Data#IDataRecord#Item(System.Int32)">
            <summary>
            Gets the column located at the specified index.
            </summary>
            <returns>
            The column located at the specified index as an <see cref="T:System.Object"/>.
            </returns>
            <param name="i">The zero-based index of the column to get. 
            </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"/>. 
            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.System#Data#IDataRecord#Item(System.String)">
            <summary>
            Gets the column with the specified name.
            </summary>
            <returns>
            The column with the specified name as an <see cref="T:System.Object"/>.
            </returns>
            <param name="name">The name of the column to find. 
            </param><exception cref="T:System.IndexOutOfRangeException">No column with the specified name was found. 
            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.Close">
            <summary>
            Closes the <see cref="T:System.Data.IDataReader"/> Object.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.GetName(System.Int32)">
            <summary>
            Gets the name for the field to find.
            </summary>
            <returns>
            The name of the field or the empty string (""), if there is no value to return.
            </returns>
            <param name="i">The index of the field to find. 
            </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"/>. 
            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.GetDataTypeName(System.Int32)">
            <summary>
            Gets the data type information for the specified field.
            </summary>
            <returns>
            The data type information for the specified field.
            </returns>
            <param name="i">The index of the field to find. 
            </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"/>. 
            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.GetFieldType(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Type"/> information corresponding to the type of <see cref="T:System.Object"/> that would be returned from <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)"/>.
            </summary>
            <returns>
            The <see cref="T:System.Type"/> information corresponding to the type of <see cref="T:System.Object"/> that would be returned from <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)"/>.
            </returns>
            <param name="i">The index of the field to find. 
            </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"/>. 
            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.GetValue(System.Int32)">
            <summary>
            Return the value of the specified field.
            </summary>
            <returns>
            The <see cref="T:System.Object"/> which will contain the field value upon return.
            </returns>
            <param name="i">The index of the field to find. 
            </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"/>. 
            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.GetValues(System.Object[])">
            <summary>
            Gets all the attribute fields in the collection for the current record.
            </summary>
            <returns>
            The number of instances of <see cref="T:System.Object"/> in the array.
            </returns>
            <param name="values">An array of <see cref="T:System.Object"/> to copy the attribute fields into. 
            </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.GetOrdinal(System.String)">
            <summary>
            Return the index of the named field.
            </summary>
            <returns>
            The index of the named field.
            </returns>
            <param name="name">The name of the field to find. 
            </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.GetBoolean(System.Int32)">
            <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
            <returns>
            The value of the column.
            </returns>
            <param name="i">The zero-based column ordinal. 
            </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"/>. 
            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.GetByte(System.Int32)">
            <summary>
            Gets the 8-bit unsigned integer value of the specified column.
            </summary>
            <returns>
            The 8-bit unsigned integer value of the specified column.
            </returns>
            <param name="i">The zero-based column ordinal. 
            </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"/>. 
            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified column offset into the buffer as an array, starting at the given buffer offset.
            </summary>
            <returns>
            The actual number of bytes read.
            </returns>
            <param name="i">The zero-based column ordinal. 
            </param><param name="fieldOffset">The index within the field from which to start the read operation. 
            </param><param name="buffer">The buffer into which to read the stream of bytes. 
            </param><param name="bufferoffset">The index for <paramref name="buffer"/> to start the read operation. 
            </param><param name="length">The number of bytes to read. 
            </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"/>. 
            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.GetChar(System.Int32)">
            <summary>
            Gets the character value of the specified column.
            </summary>
            <returns>
            The character value of the specified column.
            </returns>
            <param name="i">The zero-based column ordinal. 
            </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"/>. 
            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters from the specified column offset into the buffer as an array, starting at the given buffer offset.
            </summary>
            <returns>
            The actual number of characters read.
            </returns>
            <param name="i">The zero-based column ordinal. 
            </param><param name="fieldoffset">The index within the row from which to start the read operation. 
            </param><param name="buffer">The buffer into which to read the stream of bytes. 
            </param><param name="bufferoffset">The index for <paramref name="buffer"/> to start the read operation. 
            </param><param name="length">The number of bytes to read. 
            </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"/>. 
            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.GetGuid(System.Int32)">
            <summary>
            Returns the GUID value of the specified field.
            </summary>
            <returns>
            The GUID value of the specified field.
            </returns>
            <param name="i">The index of the field to find. 
            </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"/>. 
            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.GetInt16(System.Int32)">
            <summary>
            Gets the 16-bit signed integer value of the specified field.
            </summary>
            <returns>
            The 16-bit signed integer value of the specified field.
            </returns>
            <param name="i">The index of the field to find. 
            </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"/>. 
            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.GetInt32(System.Int32)">
            <summary>
            Gets the 32-bit signed integer value of the specified field.
            </summary>
            <returns>
            The 32-bit signed integer value of the specified field.
            </returns>
            <param name="i">The index of the field to find. 
            </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"/>. 
            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.GetInt64(System.Int32)">
            <summary>
            Gets the 64-bit signed integer value of the specified field.
            </summary>
            <returns>
            The 64-bit signed integer value of the specified field.
            </returns>
            <param name="i">The index of the field to find. 
            </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"/>. 
            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.GetFloat(System.Int32)">
            <summary>
            Gets the single-precision floating point number of the specified field.
            </summary>
            <returns>
            The single-precision floating point number of the specified field.
            </returns>
            <param name="i">The index of the field to find. 
            </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"/>. 
            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.GetDouble(System.Int32)">
            <summary>
            Gets the double-precision floating point number of the specified field.
            </summary>
            <returns>
            The double-precision floating point number of the specified field.
            </returns>
            <param name="i">The index of the field to find. 
            </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"/>. 
            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.GetString(System.Int32)">
            <summary>
            Gets the string value of the specified field.
            </summary>
            <returns>
            The string value of the specified field.
            </returns>
            <param name="i">The index of the field to find. 
            </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"/>. 
            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.GetDecimal(System.Int32)">
            <summary>
            Gets the fixed-position numeric value of the specified field.
            </summary>
            <returns>
            The fixed-position numeric value of the specified field.
            </returns>
            <param name="i">The index of the field to find. 
            </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"/>. 
            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.GetDateTime(System.Int32)">
            <summary>
            Gets the date and time data value of the specified field.
            </summary>
            <returns>
            The date and time data value of the specified field.
            </returns>
            <param name="i">The index of the field to find. 
            </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"/>. 
            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.GetData(System.Int32)">
            <summary>
            Returns an <see cref="T:System.Data.IDataReader"/> for the specified column ordinal.
            </summary>
            <returns>
            An <see cref="T:System.Data.IDataReader"/>.
            </returns>
            <param name="i">The index of the field to find. 
            </param><exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"/>. 
            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.IsDBNull(System.Int32)">
            <summary>
            Return whether the specified field is set to null.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>True if the specified field is set to null; otherwise, false.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.GetSchemaTable">
            <summary>
            Returns a <see cref="T:System.Data.DataTable" /> that describes the column metadata of the <see cref="T:System.Data.IDataReader" />.
            </summary>
            <returns>A <see cref="T:System.Data.DataTable" /> that describes the column metadata.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.NextResult">
            <summary>
            Advances the data reader to the next result, when reading the results of batch SQL statements.
            </summary>
            <returns>True if there are more rows; otherwise, false.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.Read">
            <summary>
            Advances the <see cref="T:System.Data.IDataReader" /> to the next record.
            </summary>
            <returns>True if there are more rows; otherwise, false.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DataReaderWrapper.Dispose(System.Boolean)">
            <summary>
            Close the contained data reader when disposing.
            </summary>
            <param name="disposing">True if called from Dispose method, false if called from finalizer. Since
            this class doesn't have a finalizer, this will always be true.</param>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.IEventLogEntryFormatter">
            <summary>
            Formats an event log entry for logging to event log.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.IEventLogEntryFormatter.GetEntryText(System.String,System.String[])">
            <overloads>
            Creates a formatted message, suitable for logging to the event log.
            </overloads>
            <summary>
            Creates a formatted message, suitable for logging to the event log.
            </summary>
            <param name="message">Message to be formatted, with format tags embedded.</param>
            <param name="extraInformation">Extra strings to be matched up with the format tags provided in <paramref name="message"></paramref>.</param>
            <returns>Formatted message, suitable for logging to the event log.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.IEventLogEntryFormatter.GetEntryText(System.String,System.Exception,System.String[])">
            <summary>
            Creates a formatted message, suitable for logging to the event log.
            </summary>
            <param name="message">Message to be formatted, with format tags embedded.</param>
            <param name="exception">Exception containing message text to be added to event log message produced by this method.</param>
            <param name="extraInformation">Extra strings to be matched up with the format tags provided in <paramref name="message"></paramref>.</param>
            <returns>Formatted message, suitable for logging to the event log.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.ParameterCache">
            <summary>
            <para>
            Provides parameter caching services for dynamic parameter discovery of stored procedures.
            Eliminates the round-trip to the database to derive the parameters and types when a command
            is executed more than once.
            </para>
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.ParameterCache.cache">
            <summary>
            Cache mechanism.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.ParameterCache.SetParameters(System.Data.Common.DbCommand,Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database)">
            <summary>
            <para>
            Populates the parameter collection for a command wrapper from the cache 
            or performs a round-trip to the database to query the parameters.
            </para>
            </summary>
            <param name="command">
            <para>The command to add the parameters.</para>
            </param>
            <param name="database">
            <para>The database to use to set the parameters.</para>
            </param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.ParameterCache.Clear">
            <summary>
            <para>Empties the parameter cache.</para>
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.ParameterCache.AddParametersFromCache(System.Data.Common.DbCommand,Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database)">
            <summary>
            <para>Adds parameters to a command using the cache.</para>
            </summary>
            <param name="command">
            <para>The command to add the parameters.</para>
            </param>
            <param name="database">The database to use.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.ParameterCache.CreateParameterCopy(System.Data.Common.DbCommand)">
            <summary>
            Create parameter copy.
            </summary>
            <param name="command">Database commond.</param>
            <returns>Database parameters.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.ParameterCache.AlreadyCached(System.Data.IDbCommand,Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database)">
            <summary>
            <para>Checks to see if a cache entry exists for a specific command on a specific connection.</para>
            </summary>
            <param name="command">
            <para>The command to check.</para>
            </param>
            <param name="database">The database to check.</param>
            <returns>True if the parameters are already cached for the provided command, false otherwise.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingDataReader">
            <summary>
            An implementation of <see cref="T:System.Data.IDataReader"/> which also properly
            cleans up the reference count on the given inner <see cref="T:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DatabaseConnectionWrapper"/>
            when the reader is closed or disposed.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingDataReader.connectionWrapper">
            <summary>
            Database connection wrapper.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingDataReader.#ctor(Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DatabaseConnectionWrapper,System.Data.IDataReader)">
            <summary>
            Initializes a new instance of the <see cref='T:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingDataReader'/> class that wraps
            the given <paramref name="innerReader"/> and properly
            cleans the refcount on the given <paramref name="connection"/>
            when done.
            </summary>
            <param name="connection">Connection to close.</param>
            <param name="innerReader">Reader to do the actual work.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingDataReader.Close">
            <summary>
            Closes the <see cref="T:System.Data.IDataReader"/> Object.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingDataReader.Dispose(System.Boolean)">
            <summary>
            Clean up resources.
            </summary>
            <param name="disposing">True if called from dispose, false if called from finalizer. We have no finalizer,
            so this will never be false.</param>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader">
            <summary>
            Wrapper around <see cref="T:System.Xml.XmlReader"/> that ties into our
            reference counting on connections.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.connection">
            <summary>
            Database connection wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.innerReader">
            <summary>
            Xml reader.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.#ctor(Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DatabaseConnectionWrapper,System.Xml.XmlReader)">
            <summary>
            Initializes a new instance of the RefCountingXmlReader class.
            </summary>
            <param name="connection">Database connection wrapper.</param>
            <param name="innerReader">Xml reader.</param>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.AttributeCount">
            <summary>
            Gets the number of attributes on the current node.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.BaseURI">
            <summary>
            Gets the base URI of the current node.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.CanReadBinaryContent">
            <summary>
            Gets binary content from specified methods.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.CanReadValueChunk">
            <summary>
            Gets information about calls to ReadValueChunk.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.CanResolveEntity">
            <summary>
            Gets a value indicating whether this XmlReader can parse and resolve entities.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.Depth">
            <summary>
            Gets the depth of the current node in the XML element stack.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.EOF">
            <summary>
            Gets the XmlReader position in a stream.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.HasAttributes">
            <summary>
            Gets a value indicating whether the current node has any attributes.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.HasValue">
            <summary>
            Gets a value indicating whether the current node has value.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.IsDefault">
            <summary>
            Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.IsEmptyElement">
            <summary>
            Gets a value indicating whether the current node is an empty element.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.LocalName">
            <summary>
            Gets the name of the current node without the namespace prefix.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.Name">
            <summary>
            Gets the name of the current node, including the namespace prefix.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.NamespaceURI">
            <summary>
            Gets the namespace Uniform Resource Name (URN), as defined in the W3C Namespace Specification, of the current namespace scope.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.NameTable">
            <summary>
            Gets the XmlNameTable associated with the XmlReader.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.NodeType">
            <summary>
            Gets the type of the current node.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.Prefix">
            <summary>
            Gets the namespace prefix associated with the current node.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of an attribute node.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadState">
            <summary>
            Gets the ReadState of the XmlReader.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.SchemaInfo">
            <summary>
            Gets schema inforamtion.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.Settings">
            <summary>
            Gets the XmlReaderSettings object used to create this XmlReader instance.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.Value">
            <summary>
            When overridden in a derived class, gets the text value of the current node.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ValueType">
            <summary>
            Gets the Common Language Runtime (CLR) type for the current node.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.XmlLang">
            <summary>
            Gets the current xml:lang scope.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.XmlSpace">
            <summary>
            Gets the current xml:space scope.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.Item(System.String)">
            <summary>
            Gets the value of the attribute with the specified Name.
            </summary>
            <param name="name">The LocalName of the attribute.</param>
            <returns>Returns the value of the attribute with the specified Name.</returns>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.Item(System.String,System.String)">
            <summary>
            Gets the value of the attribute with the LocalName and NamespaceURI.
            </summary>
            <param name="name">The LocalName of the attribute.</param>
            <param name="namespaceURI">The NamespaceURI of the attribute.</param>
            <returns>The value of the specified attribute, or, if the attribute is not found, a null reference. LocalName and NamespaceURI.</returns>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.Item(System.Int32)">
            <summary>
            Gets the value of the attribute with the specified index.
            </summary>
            <param name="i">Field index.</param>
            <returns>Returns the value of the attribute with the specified index.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.Close">
            <summary>
            Closes the stream, changes the ReadState to Closed, and sets all properties back to zero/empty string.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.GetAttribute(System.Int32)">
            <summary>
            Gets the value of the attribute with the specified index.
            </summary>
            <param name="i">The index of the attribute. The index is zero-based. The first attribute has index 0.</param>
            <returns>The value of the specified attribute. This method does not move the reader.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.GetAttribute(System.String)">
            <summary>
            Gets the value of the attribute with the specified Name.
            </summary>
            <param name="name">The qualified name of the attribute.</param>
            <returns>The value of the specified attribute. If the attribute is not found, a null reference is returned.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.GetAttribute(System.String,System.String)">
            <summary>
            Gets the value of the attribute with the specified LocalName and NamespaceURI.
            </summary>
            <param name="name">The local name of the attribute.</param>
            <param name="namespaceURI">The namespace URI of the attribute.</param>
            <returns>The value of the specified attribute. If the attribute is not found, a null reference is returned. This method does not move the reader.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.IsStartElement">
            <summary>
            Calls the MoveToContent method to test node tags.
            </summary>
            <returns>True if MoveToContent finds a start tag or empty element tag; false if a node type other than XmlNodeType.Element was found.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.IsStartElement(System.String)">
            <summary>
            Calls the MoveToContent method to test node tags and one property, the Name property.
            </summary>
            <param name="name">The string matched against the Name property of the element found.</param>
            <returns>True if the resulting node is an element and the Name property matches the specified string. false if a node type other than XmlNodeType.Element was found or if the element Name property does not match the specified string.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.IsStartElement(System.String,System.String)">
            <summary>
            Calls the MoveToContent method to test node tags and two properties, the LocalName property and the NamespaceURI property.
            </summary>
            <param name="localname">The string to match against the LocalName property of the element found.</param>
            <param name="ns">The string to match against the NamespaceURI property of the element found.</param>
            <returns>True if the resulting node is an element. false if a node type other than the XmlNodeType.Element enumeration was found or if the LocalName and the NamespaceURI properties of the element do not match the specified strings.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.LookupNamespace(System.String)">
            <summary>
            Resolves a namespace prefix in the current element's scope.
            </summary>
            <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string.</param>
            <returns>A namespace prefix in the current element's scope.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.MoveToAttribute(System.Int32)">
            <summary>
            Moves to the attribute with the specified index.
            </summary>
            <param name="i">The index of the attribute.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.MoveToAttribute(System.String)">
            <summary>
            Moves to the attribute with the specified Name.
            </summary>
            <param name="name">The qualified Name of the attribute.</param>
            <returns>True if the attribute is found; otherwise, false. If false, the reader's position does not change.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.MoveToAttribute(System.String,System.String)">
            <summary>
            Moves to the attribute with the specified LocalName and NamespaceURI.
            </summary>
            <param name="name">The LocalName of the attribute.</param>
            <param name="ns">The NamespaceURI of the attribute.</param>
            <returns>True if the attribute is found; otherwise, false. If false, the reader's position does not change.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.MoveToContent">
            <summary>
            Checks to find whether the current node is a content node.
            </summary>
            <returns>The NodeType of the current node found by the method or XmlNodeType None if the reader has reached the end of the input stream.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.MoveToElement">
            <summary>
            Moves to the element that contains the current attribute node.
            </summary>
            <returns>True if the reader is positioned on an attribute, the reader moves to the element that owns the attribute; false if the reader is not positioned on an attribute, and the position of the reader does not change.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.MoveToFirstAttribute">
            <summary>
            Moves to the first attribute of the current node.
            </summary>
            <returns>True if an attribute exists, the reader moves to the first attribute; otherwise, false when the position of the reader does not change.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.MoveToNextAttribute">
            <summary>
            Moves to the next attribute.
            </summary>
            <returns>True if there is a next attribute; false if there are no more attributes.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.Read">
            <summary>
            Moves through the Stream and reads the next node from the stream.
            </summary>
            <returns>True if the next node was read successfully; false if there are no more nodes to read.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadAttributeValue">
            <summary>
            Parses the attribute value into one or more Text and/or EntityReference node types.
            </summary>
            <returns>True if there are nodes to return. false if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read. An empty attribute, such as, misc="", returns true with a single node with a value of String.Empty.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
            <summary>
            Reads the content as an object of the type specified.
            </summary>
            <param name="returnType">The type of the value to be returned.</param>
            <param name="namespaceResolver">An IXmlNamespaceResolver object that is used to resolve any namespace prefixes related to type conversion. For example, this can be used when converting an XmlQualifiedName object to an xs:string. This value can be null.</param>
            <returns>The concatenated text content or attribute value converted to the requested type.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the content and returns the Base64 decoded binary bytes.
            </summary>
            <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
            <param name="index">The offset into the buffer where to start copying the result.</param>
            <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
            <returns>The number of bytes written to the buffer.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the content and returns the BinHex decoded binary bytes.
            </summary>
            <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
            <param name="index">The offset into the buffer where to start copying the result.</param>
            <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
            <returns>The number of bytes written to the buffer.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadContentAsBoolean">
            <summary>
            Reads the text content at the current position as a Boolean.
            </summary>
            <returns>The text content as a Boolean object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadContentAsDateTime">
            <summary>
            Reads the text content at the current position as a DateTime object.
            </summary>
            <returns>The text content as a DateTime object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadContentAsDecimal">
            <summary>
            Reads the text content at the current position as a Decimal object.
            </summary>
            <returns>The text content at the current position as a Decimal object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadContentAsDouble">
            <summary>
            Reads the text content at the current position as a double-precision floating-point number.
            </summary>
            <returns>The text content as a double-precision floating-point number.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadContentAsFloat">
            <summary>
            Reads the text content at the current position as a single-precision floating point number.
            </summary>
            <returns>The text content at the current position as a single-precision floating point number.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadContentAsInt">
            <summary>
            Reads the text content at the current position as a 32-bit signed integer.
            </summary>
            <returns>The text content as a 32-bit signed integer.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadContentAsLong">
            <summary>
            Reads the text content at the current position as a 64-bit signed integer.
            </summary>
            <returns>The text content as a 64-bit signed integer.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadContentAsObject">
            <summary>
            Reads the text content at the current position as an Object.
            </summary>
            <returns>The text content as the most appropriate common language runtime (CLR) object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadContentAsString">
            <summary>
            Reads the text content at the current position as a String object.
            </summary>
            <returns>The text content as a String object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
            <summary>
            Reads the element content as the requested type.
            </summary>
            <param name="returnType">The type of the value to be returned.</param>
            <param name="namespaceResolver">An IXmlNamespaceResolver object that is used to resolve any namespace prefixes related to type conversion.</param>
            <returns>The element content converted to the requested typed object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver,System.String,System.String)">
            <summary>
            Checks that the specified local name and namespace URI matches that of the current element, then reads the element content as the requested type.
            </summary>
            <param name="returnType">The type of the value to be returned.</param>
            <param name="namespaceResolver">An IXmlNamespaceResolver object that is used to resolve any namespace prefixes related to type conversion.</param>
            <param name="localName">The local name of the element.</param>
            <param name="namespaceURI">The namespace URI of the element.</param>
            <returns>The element content converted to the requested typed object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the element and decodes the Base64 content.
            </summary>
            <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
            <param name="index">The offset into the buffer where to start copying the result.</param>
            <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
            <returns>The number of bytes written to the buffer.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the element and decodes the BinHex content.
            </summary>
            <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
            <param name="index">The offset into the buffer where to start copying the result.</param>
            <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
            <returns>The number of bytes written to the buffer.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadElementContentAsBoolean">
            <summary>
            Reads the current element and returns the contents as a Boolean object.
            </summary>
            <returns>The element content as a Boolean object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadElementContentAsBoolean(System.String,System.String)">
            <summary>
            Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a Boolean object.
            </summary>
            <param name="localName">The local name of the element.</param>
            <param name="namespaceURI">The namespace URI of the element.</param>
            <returns>The element content as a Boolean object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadElementContentAsDateTime">
            <summary>
            Reads the current element and returns the contents as a DateTime object.
            </summary>
            <returns>The element content as a DateTime object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadElementContentAsDateTime(System.String,System.String)">
            <summary>
            Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a DateTime object.
            </summary>
            <param name="localName">The local name of the element.</param>
            <param name="namespaceURI">The namespace URI of the element.</param>
            <returns>The element contents as a DateTime object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadElementContentAsDecimal">
            <summary>
            Reads the current element and returns the contents as a Decimal object.
            </summary>
            <returns>The element content as a Decimal object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadElementContentAsDecimal(System.String,System.String)">
            <summary>
            Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a Decimal object.
            </summary>
            <param name="localName">The local name of the element.</param>
            <param name="namespaceURI">The namespace URI of the element.</param>
            <returns>The element content as a Decimal object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadElementContentAsDouble">
            <summary>
            Reads the current element and returns the contents as a double-precision floating-point number.
            </summary>
            <returns>The element content as a double-precision floating-point number.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadElementContentAsDouble(System.String,System.String)">
            <summary>
            Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a double-precision floating-point number.
            </summary>
            <param name="localName">The local name of the element.</param>
            <param name="namespaceURI">The namespace URI of the element.</param>
            <returns>The element content as a double-precision floating-point number.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadElementContentAsFloat">
            <summary>
            Reads the current element and returns the contents as single-precision floating-point number.
            </summary>
            <returns>The element content as a single-precision floating point number.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadElementContentAsFloat(System.String,System.String)">
            <summary>
            Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a single-precision floating-point number.
            </summary>
            <param name="localName">The local name of the element.</param>
            <param name="namespaceURI">The namespace URI of the element.</param>
            <returns>The element content as a single-precision floating point number.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadElementContentAsInt">
            <summary>
            Reads the current element and returns the contents as a 32-bit signed integer.
            </summary>
            <returns>The element content as a 32-bit signed integer.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadElementContentAsInt(System.String,System.String)">
            <summary>
            Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a 32-bit signed integer.
            </summary>
            <param name="localName">The local name of the element.</param>
            <param name="namespaceURI">The namespace URI of the element.</param>
            <returns>The element content as a 32-bit signed integer.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadElementContentAsLong">
            <summary>
            Reads the current element and returns the contents as a 64-bit signed integer.
            </summary>
            <returns>The element content as a 64-bit signed integer.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadElementContentAsLong(System.String,System.String)">
            <summary>
            Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a 64-bit signed integer.
            </summary>
            <param name="localName">The local name of the element.</param>
            <param name="namespaceURI">The namespace URI of the element.</param>
            <returns>The element content as a 64-bit signed integer.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadElementContentAsObject">
            <summary>
            Reads the current element and returns the contents as an Object.
            </summary>
            <returns>A boxed common language runtime (CLR) object of the most appropriate type. The ValueType property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadElementContentAsObject(System.String,System.String)">
            <summary>
            Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as an Object.
            </summary>
            <param name="localName">The local name of the element.</param>
            <param name="namespaceURI">The namespace URI of the element.</param>
            <returns>A boxed common language runtime (CLR) object of the most appropriate type. The ValueType property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadElementContentAsString">
            <summary>
            Reads the current element and returns the contents as a String object.
            </summary>
            <returns>The element content as a String object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadElementContentAsString(System.String,System.String)">
            <summary>
            Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a String object.
            </summary>
            <param name="localName">The local name of the element.</param>
            <param name="namespaceURI">The namespace URI of the element.</param>
            <returns>The element content as a String object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadElementString">
            <summary>
            Reads a text-only element.
            </summary>
            <returns>The text contained in the element that was read. An empty string if the element is empty (<item></item> or <item/>).</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadElementString(System.String)">
            <summary>
            Checks that the Name property of the element found matches the given string before reading a text-only element.
            </summary>
            <param name="name">The name to check. </param>
            <returns>The text contained in the element that was read. An empty string if the element is empty (<item></item> or <item/>).</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadElementString(System.String,System.String)">
            <summary>
            Checks that the LocalName and NamespaceURI properties of the element found matches the given strings before reading a text-only element.
            </summary>
            <param name="localname">The local name to check. </param>
            <param name="ns">The namespace URI to check. </param>
            <returns>The text contained in the element that was read. An empty string if the element is empty (<item></item> or <item/>).</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadEndElement">
            <summary>
            Checks that the current content node is an end tag and advances the reader to the next node.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadInnerXml">
            <summary>
            When overridden in a derived class, reads all the content, including markup, as a string.
            </summary>
            <returns>All the XML content, including markup, in the current node. If the current node has no children, an empty string is returned. If the current node is neither an element nor attribute, an empty string is returned.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadOuterXml">
            <summary>
            When overridden in a derived class, reads the content, including markup, representing this node and all its children.
            </summary>
            <returns>If the reader is positioned on an element or an attribute node, this method returns all the XML content, including markup, of the current node and all its children; otherwise, it returns an empty string.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadStartElement">
            <summary>
            Checks that the current node is an element and advances the reader to the next node.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadStartElement(System.String)">
            <summary>
            Checks that the current content node is an element with the given Name and advances the reader to the next node.
            </summary>
            <param name="name">The qualified name of the element. </param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadStartElement(System.String,System.String)">
            <summary>
            Checks that the current content node is an element with the given LocalName and NamespaceURI and advances the reader to the next node.
            </summary>
            <param name="localname">The local name of the element. </param>
            <param name="ns">The namespace URI of the element. </param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadString">
            <summary>
            When overridden in a derived class, reads the contents of an element or text node as a string.
            </summary>
            <returns>The contents of the element or an empty string.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadSubtree">
            <summary>
            Returns a new XmlReader instance that can be used to read the current node, and all its descendants.
            </summary>
            <returns>A new XmlReader instance set to ReadState.Initial. A call to the Read method positions the new XmlReader on the node that was current before the call to ReadSubtree method.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadToDescendant(System.String)">
            <summary>
            Advances the XmlReader to the next descendant element with the specified qualified name.
            </summary>
            <param name="name">The qualified name of the element you wish to move to.</param>
            <returns>True if a matching descendant element is found; otherwise false. If a matching child element is not found, the XmlReader is positioned on the end tag (NodeType is XmlNodeType.EndElement) of the element. If the XmlReader is not positioned on an element when ReadToDescendant was called, this method returns false and the position of the XmlReader is not changed.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadToDescendant(System.String,System.String)">
            <summary>
            Advances the XmlReader to the next descendant element with the specified local name and namespace URI.
            </summary>
            <param name="localName">The local name of the element you wish to move to.</param>
            <param name="namespaceURI">The namespace URI of the element you wish to move to.</param>
            <returns>True if a matching descendant element is found; otherwise false. If a matching child element is not found, the XmlReader is positioned on the end tag (NodeType is XmlNodeType.EndElement) of the element. If the XmlReader is not positioned on an element when ReadToDescendant was called, this method returns false and the position of the XmlReader is not changed.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadToFollowing(System.String)">
            <summary>
            Reads until an element with the specified qualified name is found.
            </summary>
            <param name="name">The qualified name of the element.</param>
            <returns>True if a matching element is found; otherwise false and the XmlReader is in an end of file state.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadToFollowing(System.String,System.String)">
            <summary>
            Reads until an element with the specified local name and namespace URI is found.
            </summary>
            <param name="localName">The local name of the element.</param>
            <param name="namespaceURI">The namespace URI of the element.</param>
            <returns>True if a matching element is found; otherwise false and the XmlReader is in an end of file state.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadToNextSibling(System.String)">
            <summary>
            Advances the XmlReader to the next sibling element with the specified qualified name.
            </summary>
            <param name="name">The qualified name of the sibling element you wish to move to.</param>
            <returns>True if a matching sibling element is found; otherwise false. If a matching sibling element is not found, the XmlReader is positioned on the end tag (NodeType is XmlNodeType.EndElement) of the parent element.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadToNextSibling(System.String,System.String)">
            <summary>
            Advances the XmlReader to the next sibling element with the specified local name and namespace URI.
            </summary>
            <param name="localName">The local name of the sibling element you wish to move to.</param>
            <param name="namespaceURI">The namespace URI of the sibling element you wish to move to.</param>
            <returns>True if a matching sibling element is found; otherwise false. If a matching sibling element is not found, the XmlReader is positioned on the end tag (NodeType is XmlNodeType.EndElement) of the parent element.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads large streams of text embedded in an XML document.
            </summary>
            <param name="buffer">The array of characters that serves as the buffer to which the text contents are written. This value cannot be null.</param>
            <param name="index">The offset within the buffer where the XmlReader can start to copy the results.</param>
            <param name="count">The maximum number of characters to copy into the buffer. The actual number of characters copied is returned from this method.</param>
            <returns>The number of characters read into the buffer. The value zero is returned when there is no more text content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.ResolveEntity">
            <summary>
            When overridden in a derived class, resolves the entity reference for EntityReference nodes.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.Skip">
            <summary>
            Skips the children of the current node.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.RefCountingXmlReader.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the XmlReader and optionally releases the managed resources.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase">
            <summary>
            <para>Represents a SQL Server database.</para>
            </summary>
            <remarks> 
            <para>
            Internally uses SQL Server .NET Managed Provider from Microsoft (System.Data.SqlClient) to connect to the database.
            </para>  
            </remarks>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase"/> class with a connection string.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.SupportsAsync">
            <summary>
            Does this <see cref='T:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database'/> object support asynchronous execution.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.SupportsParameterDiscovery">
            <summary>
            Does this <see cref='T:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database'/> object support parameter discovery.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.ParameterToken">
            <summary>
            <para>Gets the parameter token used to delimit parameters for the SQL Server database.</para>
            </summary>
            <value>
            <para>The '@' symbol.</para>
            </value>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.ExecuteXmlReader(System.Data.Common.DbCommand)">
            <summary>
            <para>Executes the <see cref="T:System.Data.SqlClient.SqlCommand"/> and returns a new <see cref="T:System.Xml.XmlReader"/>.</para>
            </summary>
            <remarks>
            When the returned reader is closed, the underlying connection will be closed
            (with appropriate handling of connections in the case of an ambient transaction).
            This is a behavior change from Enterprise Library versions prior to v5.
            </remarks>
            <param name="command">
            <para>The <see cref="T:System.Data.SqlClient.SqlCommand"/> to execute.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Xml.XmlReader"/> object.</para>
            </returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.ExecuteXmlReader(System.Data.Common.DbCommand,System.Data.Common.DbTransaction)">
            <summary>
            <para>Executes the <see cref="T:System.Data.SqlClient.SqlCommand"/> in a transaction and returns a new <see cref="T:System.Xml.XmlReader"/>.</para>
            </summary>
            <remarks>
            	Unlike other Execute... methods that take a <see cref="T:System.Data.Common.DbCommand"/> instance, this method
            	does not set the command behavior to close the connection when you close the reader.
            	That means you'll need to close the connection yourself, by calling the
            	command.Connection.Close() method.
            </remarks>
            <param name="command">
            <para>The <see cref="T:System.Data.SqlClient.SqlCommand"/> to execute.</para>
            </param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Xml.XmlReader"/> object.</para>
            </returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.BeginExecuteXmlReader(System.Data.Common.DbCommand,System.AsyncCallback,System.Object)">
            <summary>
            <para>Initiates the asynchronous execution of the <see cref="T:System.Data.SqlClient.SqlCommand"/> which will result in a <see cref="T:System.Xml.XmlReader"/>.</para>
            </summary>
            <param name="command">
            <para>The <see cref="T:System.Data.SqlClient.SqlCommand"/> to execute.</para>
            </param>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.ExecuteXmlReader(System.Data.Common.DbCommand)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteXmlReader(System.IAsyncResult)"/>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteXmlReader(System.IAsyncResult)"/>, 
            which returns the <see cref="T:System.Xml.XmlReader"/> object.</para>
            </returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.BeginExecuteXmlReader(System.Data.Common.DbCommand,System.Data.Common.DbTransaction,System.AsyncCallback,System.Object)">
            <summary>
            <para>Initiates the asynchronous execution of the <see cref="T:System.Data.SqlClient.SqlCommand"/> inside a transaction which will result in a <see cref="T:System.Xml.XmlReader"/>.</para>
            </summary>
            <param name="command">
            <para>The <see cref="T:System.Data.SqlClient.SqlCommand"/> to execute.</para>
            </param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.ExecuteXmlReader(System.Data.Common.DbCommand,System.Data.Common.DbTransaction)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteXmlReader(System.IAsyncResult)"/>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteXmlReader(System.IAsyncResult)"/>, 
            which returns the <see cref="T:System.Xml.XmlReader"/> object.</para>
            </returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteXmlReader(System.IAsyncResult)">
            <summary>
            Finishes asynchronous execution of a Transact-SQL statement, returning the requested data as XML.
            </summary>
            <param name="asyncResult">
            <para>The <see cref="T:System.IAsyncResult"/> returned by a call to any overload of <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.BeginExecuteXmlReader(System.Data.Common.DbCommand,System.AsyncCallback,System.Object)"/>.</para>
            </param>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.ExecuteXmlReader(System.Data.Common.DbCommand)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.BeginExecuteXmlReader(System.Data.Common.DbCommand,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.BeginExecuteXmlReader(System.Data.Common.DbCommand,System.Data.Common.DbTransaction,System.AsyncCallback,System.Object)"/>
            <returns>
            <para>An <see cref="T:System.Xml.XmlReader"/> object that can be used to fetch the resulting XML data.</para>
            </returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.BuildParameterName(System.String)">
            <summary>
            Builds a value parameter name for the current database.
            </summary>
            <param name="name">The name of the parameter.</param>
            <returns>A correctly formated parameter name.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.AddParameter(System.Data.Common.DbCommand,System.String,System.Data.SqlDbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            <para>Adds a new instance of a <see cref="T:System.Data.Common.DbParameter"/> object to the command.</para>
            </summary>
            <param name="command">The command to add the parameter.</param>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbtype"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>
            <param name="size"><para>The maximum size of the data within the column.</para></param>
            <param name="direction"><para>One of the <see cref="T:System.Data.ParameterDirection"/> values.</para></param>
            <param name="nullable"><para>A value indicating whether the parameter accepts <see langword="null"/> (<b>Nothing</b> in Visual Basic) values.</para></param>
            <param name="precision"><para>The maximum number of digits used to represent the <paramref name="value"/>.</para></param>
            <param name="scale"><para>The number of decimal places to which <paramref name="value"/> is resolved.</para></param>
            <param name="sourceColumn"><para>The name of the source column mapped to the DataSet and used for loading or returning the <paramref name="value"/>.</para></param>
            <param name="sourceVersion"><para>One of the <see cref="T:System.Data.DataRowVersion"/> values.</para></param>
            <param name="value"><para>The value of the parameter.</para></param>       
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.AddParameter(System.Data.Common.DbCommand,System.String,System.Data.SqlDbType,System.Data.ParameterDirection,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            <para>Adds a new instance of a <see cref="T:System.Data.Common.DbParameter"/> object to the command.</para>
            </summary>
            <param name="command">The command to add the parameter.</param>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbtype"><para>One of the <see cref="T:System.Data.SqlDbType"/> values.</para></param>        
            <param name="direction"><para>One of the <see cref="T:System.Data.ParameterDirection"/> values.</para></param>                
            <param name="sourceColumn"><para>The name of the source column mapped to the DataSet and used for loading or returning the <paramref name="value"/>.</para></param>
            <param name="sourceVersion"><para>One of the <see cref="T:System.Data.DataRowVersion"/> values.</para></param>
            <param name="value"><para>The value of the parameter.</para></param>    
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.AddOutParameter(System.Data.Common.DbCommand,System.String,System.Data.SqlDbType,System.Int32)">
            <summary>
            Adds a new Out <see cref="T:System.Data.Common.DbParameter"/> object to the given <paramref name="command"/>.
            </summary>
            <param name="command">The command to add the out parameter.</param>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbtype"><para>One of the <see cref="T:System.Data.SqlDbType"/> values.</para></param>        
            <param name="size"><para>The maximum size of the data within the column.</para></param>        
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.AddInParameter(System.Data.Common.DbCommand,System.String,System.Data.SqlDbType)">
            <summary>
            Adds a new In <see cref="T:System.Data.Common.DbParameter"/> object to the given <paramref name="command"/>.
            </summary>
            <param name="command">The command to add the in parameter.</param>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbtype"><para>One of the <see cref="T:System.Data.SqlDbType"/> values.</para></param>                
            <remarks>
            <para>This version of the method is used when you can have the same parameter object multiple times with different values.</para>
            </remarks>        
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.AddInParameter(System.Data.Common.DbCommand,System.String,System.Data.SqlDbType,System.Object)">
            <summary>
            Adds a new In <see cref="T:System.Data.Common.DbParameter"/> object to the given <paramref name="command"/>.
            </summary>
            <param name="command">The commmand to add the parameter.</param>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbtype"><para>One of the <see cref="T:System.Data.SqlDbType"/> values.</para></param>                
            <param name="value"><para>The value of the parameter.</para></param>      
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.AddInParameter(System.Data.Common.DbCommand,System.String,System.Data.SqlDbType,System.String,System.Data.DataRowVersion)">
            <summary>
            Adds a new In <see cref="T:System.Data.Common.DbParameter"/> object to the given <paramref name="command"/>.
            </summary>
            <param name="command">The command to add the parameter.</param>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbtype"><para>One of the <see cref="T:System.Data.SqlDbType"/> values.</para></param>                
            <param name="sourceColumn"><para>The name of the source column mapped to the DataSet and used for loading or returning the value.</para></param>
            <param name="sourceVersion"><para>One of the <see cref="T:System.Data.DataRowVersion"/> values.</para></param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.BeginExecuteNonQuery(System.Data.Common.DbCommand,System.AsyncCallback,System.Object)">
            <summary>
            <para>Initiates the asynchronous execution of the <see cref="T:System.Data.SqlClient.SqlCommand"/> which will return the number of affected records.</para>
            </summary>
            <param name="command">
            <para>The <see cref="T:System.Data.SqlClient.SqlCommand"/> to execute.</para>
            </param>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteNonQuery(System.Data.Common.DbCommand)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteNonQuery(System.IAsyncResult)"/>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteNonQuery(System.IAsyncResult)"/>, 
            which returns the number of affected records.</para>
            </returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.BeginExecuteNonQuery(System.Data.Common.DbCommand,System.Data.Common.DbTransaction,System.AsyncCallback,System.Object)">
            <summary>
            <para>Initiates the asynchronous execution of the <see cref="T:System.Data.Common.DbCommand"/> inside a transaction which will return the number of affected records.</para>
            </summary>
            <param name="command">
            <para>The <see cref="T:System.Data.SqlClient.SqlCommand"/> to execute.</para>
            </param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.Common.DbTransaction"/> to execute the command within.</para>
            </param>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteNonQuery(System.Data.Common.DbCommand)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteNonQuery(System.IAsyncResult)"/>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteNonQuery(System.IAsyncResult)"/>, 
            which returns the number of affected records.</para>
            </returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.BeginExecuteNonQuery(System.String,System.AsyncCallback,System.Object,System.Object[])">
            <summary>
            <para>Initiates the asynchronous execution of the <paramref name="storedProcedureName"/> using the given <paramref name="parameterValues" /> which will return the number of rows affected.</para>
            </summary>
            <param name="storedProcedureName">
            <para>The name of the stored procedure to execute.</para>
            </param>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <param name="parameterValues">
            <para>An array of paramters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteNonQuery(System.IAsyncResult)"/>, 
            which returns the number of affected records.</para>
            </returns>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteNonQuery(System.String,System.Object[])"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteNonQuery(System.IAsyncResult)"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.BeginExecuteNonQuery(System.Data.Common.DbTransaction,System.String,System.AsyncCallback,System.Object,System.Object[])">
            <summary>
            <para>Initiates the asynchronous execution of the <paramref name="storedProcedureName"/> using the given <paramref name="parameterValues" /> inside a transaction which will return the number of rows affected.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.Common.DbTransaction"/> to execute the command within.</para>
            </param>
            <param name="storedProcedureName">
            <para>The name of the stored procedure to execute.</para>
            </param>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <param name="parameterValues">
            <para>An array of paramters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteNonQuery(System.IAsyncResult)"/>, 
            which returns the number of affected records.</para>
            </returns>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteNonQuery(System.String,System.Object[])"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteNonQuery(System.IAsyncResult)"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.BeginExecuteNonQuery(System.Data.CommandType,System.String,System.AsyncCallback,System.Object)">
            <summary>
            <para>Initiates the asynchronous execution of the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType" /> which will return the number of rows affected.</para>
            </summary>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteNonQuery(System.IAsyncResult)"/>, 
            which returns the number of affected records.</para>
            </returns>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteNonQuery(System.Data.CommandType,System.String)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteNonQuery(System.IAsyncResult)"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.BeginExecuteNonQuery(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.AsyncCallback,System.Object)">
            <summary>
            <para>Initiates the asynchronous execution of the the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType" /> inside a tranasaction which will return the number of rows affected.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.Common.DbTransaction"/> to execute the command within.</para>
            </param>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteNonQuery(System.IAsyncResult)"/>, 
            which returns the number of affected records.</para>
            </returns>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteNonQuery(System.Data.CommandType,System.String)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteNonQuery(System.IAsyncResult)"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteNonQuery(System.IAsyncResult)">
            <summary>
            Finishes asynchronous execution of a Transact-SQL statement, returning the number of affected records.
            </summary>
            <param name="asyncResult">
            <para>The <see cref="T:System.IAsyncResult"/> returned by a call to any overload of <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.BeginExecuteNonQuery(System.Data.Common.DbCommand,System.AsyncCallback,System.Object)"/>.</para>
            </param>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteNonQuery(System.Data.Common.DbCommand)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.BeginExecuteNonQuery(System.Data.Common.DbCommand,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.BeginExecuteNonQuery(System.Data.Common.DbCommand,System.Data.Common.DbTransaction,System.AsyncCallback,System.Object)"/>
            <returns>
            <para>The number of affected records.</para>
            </returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.BeginExecuteReader(System.Data.Common.DbCommand,System.AsyncCallback,System.Object)">
            <summary>
            <para>Initiates the asynchronous execution of a <paramref name="command"/> which will return a <see cref="T:System.Data.IDataReader"/>.</para>
            </summary>
            <param name="command">
            <para>The <see cref="T:System.Data.SqlClient.SqlCommand"/> to execute.</para>
            </param>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteReader(System.IAsyncResult)"/>, 
            which returns the <see cref="T:System.Data.IDataReader"/>.</para>
            </returns>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteReader(System.Data.Common.DbCommand)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteReader(System.IAsyncResult)"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.BeginExecuteReader(System.Data.Common.DbCommand,System.Data.Common.DbTransaction,System.AsyncCallback,System.Object)">
            <summary>
            <para>Initiates the asynchronous execution of a <paramref name="command"/> inside a transaction which will return a <see cref="T:System.Data.IDataReader"/>.</para>
            </summary>
            <param name="command">
            <para>The <see cref="T:System.Data.SqlClient.SqlCommand"/> to execute.</para>
            </param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.Common.DbTransaction"/> to execute the command within.</para>
            </param>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteReader(System.IAsyncResult)"/>, 
            which returns the <see cref="T:System.Data.IDataReader"/>.</para>
            </returns>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteReader(System.Data.Common.DbCommand)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteReader(System.IAsyncResult)"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.BeginExecuteReader(System.String,System.AsyncCallback,System.Object,System.Object[])">
            <summary>
            <para>Initiates the asynchronous execution of <paramref name="storedProcedureName"/> using the given <paramref name="parameterValues" /> which will return a <see cref="T:System.Data.IDataReader"/>.</para>
            </summary>
            <param name="storedProcedureName">
            <para>The name of the stored procedure to execute.</para>
            </param>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <param name="parameterValues">
            <para>An array of parameters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteReader(System.IAsyncResult)"/>, 
            which returns the <see cref="T:System.Data.IDataReader"/>.</para>
            </returns>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteReader(System.String,System.Object[])"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteReader(System.IAsyncResult)"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.BeginExecuteReader(System.Data.Common.DbTransaction,System.String,System.AsyncCallback,System.Object,System.Object[])">
            <summary>
            <para>Initiates the asynchronous execution of <paramref name="storedProcedureName"/> using the given <paramref name="parameterValues" /> inside a transaction which will return a <see cref="T:System.Data.IDataReader"/>.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.Common.DbTransaction"/> to execute the command within.</para>
            </param>
            <param name="storedProcedureName">
            <para>The name of the stored procedure to execute.</para>
            </param>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <param name="parameterValues">
            <para>An array of parameters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteReader(System.IAsyncResult)"/>, 
            which returns the <see cref="T:System.Data.IDataReader"/>.</para>
            </returns>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteReader(System.Data.Common.DbTransaction,System.String,System.Object[])"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteReader(System.IAsyncResult)"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.BeginExecuteReader(System.Data.CommandType,System.String,System.AsyncCallback,System.Object)">
            <summary>
            <para>Initiates the asynchronous execution of the <paramref name="commandText"/> 
            interpreted as specified by the <paramref name="commandType" /> which will return 
            a <see cref="T:System.Data.IDataReader"/>. When the async operation completes, the
            <paramref name="callback"/> will be invoked on another thread to process the
            result.</para>
            </summary>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <param name="callback"><see cref="T:System.AsyncCallback"/> to execute when the async operation
            completes.</param>
            <param name="state">State object passed to the callback.</param>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteReader(System.IAsyncResult)"/>, 
            which returns the <see cref="T:System.Data.IDataReader"/>.</para>
            </returns>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteReader(System.Data.CommandType,System.String)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteReader(System.IAsyncResult)"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.BeginExecuteReader(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.AsyncCallback,System.Object)">
            <summary>
            <para>Initiates the asynchronous execution of the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType" /> inside an transaction which will return a <see cref="T:System.Data.IDataReader"/>.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.Common.DbTransaction"/> to execute the command within.</para>
            </param>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteReader(System.IAsyncResult)"/>, 
            which returns the <see cref="T:System.Data.IDataReader"/>.</para>
            </returns>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteReader(System.Data.CommandType,System.String)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteReader(System.IAsyncResult)"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteReader(System.IAsyncResult)">
            <summary>
            Finishes asynchronous execution of a Transact-SQL statement, returning an <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="asyncResult">
            <para>The <see cref="T:System.IAsyncResult"/> returned by a call to any overload of BeginExecuteReader.</para>
            </param>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteReader(System.Data.Common.DbCommand)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.BeginExecuteReader(System.Data.Common.DbCommand,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.BeginExecuteReader(System.Data.Common.DbCommand,System.Data.Common.DbTransaction,System.AsyncCallback,System.Object)"/>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object that can be used to consume the queried information.</para>
            </returns>     
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.BeginExecuteScalar(System.Data.Common.DbCommand,System.AsyncCallback,System.Object)">
            <summary>
            <para>Initiates the asynchronous execution of a <paramref name="command"/> which will return a single value.</para>
            </summary>
            <param name="command">
            <para>The <see cref="T:System.Data.SqlClient.SqlCommand"/> to execute.</para>
            </param>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteScalar(System.IAsyncResult)"/>, 
            which returns the actual result.</para>
            </returns>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteScalar(System.Data.Common.DbCommand)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteScalar(System.IAsyncResult)"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.BeginExecuteScalar(System.Data.Common.DbCommand,System.Data.Common.DbTransaction,System.AsyncCallback,System.Object)">
            <summary>
            <para>Initiates the asynchronous execution of a <paramref name="command"/> inside a transaction which will return a single value.</para>
            </summary>
            <param name="command">
            <para>The <see cref="T:System.Data.SqlClient.SqlCommand"/> to execute.</para>
            </param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.Common.DbTransaction"/> to execute the command within.</para>
            </param>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteScalar(System.IAsyncResult)"/>, 
            which returns the actual result.</para>
            </returns>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteScalar(System.Data.Common.DbCommand,System.Data.Common.DbTransaction)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteScalar(System.IAsyncResult)"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.BeginExecuteScalar(System.String,System.AsyncCallback,System.Object,System.Object[])">
            <summary>
            <para>Initiates the asynchronous execution of <paramref name="storedProcedureName"/> using the given <paramref name="parameterValues" /> which will return a single value.</para>
            </summary>
            <param name="storedProcedureName">
            <para>The name of the stored procedure to execute.</para>
            </param>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <param name="parameterValues">
            <para>An array of parameters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteScalar(System.IAsyncResult)"/>, 
            which returns the actual result.</para>
            </returns>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteScalar(System.String,System.Object[])"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteScalar(System.IAsyncResult)"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.BeginExecuteScalar(System.Data.Common.DbTransaction,System.String,System.AsyncCallback,System.Object,System.Object[])">
            <summary>
            <para>Initiates the asynchronous execution of <paramref name="storedProcedureName"/> using the given <paramref name="parameterValues" /> inside a transaction which will return a single value.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.Common.DbTransaction"/> to execute the command within.</para>
            </param>
            <param name="storedProcedureName">
            <para>The name of the stored procedure to execute.</para>
            </param>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <param name="parameterValues">
            <para>An array of parameters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteScalar(System.IAsyncResult)"/>, 
            which returns the actual result.</para>
            </returns>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteScalar(System.Data.Common.DbTransaction,System.String,System.Object[])"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteScalar(System.IAsyncResult)"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.BeginExecuteScalar(System.Data.CommandType,System.String,System.AsyncCallback,System.Object)">
            <summary>
            <para>Initiates the asynchronous execution of the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType" /> which will return a single value.</para>
            </summary>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteScalar(System.IAsyncResult)"/>, 
            which returns the actual result.</para>
            </returns>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteScalar(System.Data.CommandType,System.String)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteScalar(System.IAsyncResult)"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.BeginExecuteScalar(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.AsyncCallback,System.Object)">
            <summary>
            <para>Initiates the asynchronous execution of the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType" /> inside an transaction which will return a single value.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.Common.DbTransaction"/> to execute the command within.</para>
            </param>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <param name="callback">The async callback to execute when the result of the operation is available. Pass <langword>null</langword>
            if you don't want to use a callback.</param>
            <param name="state">Additional state object to pass to the callback.</param>
            <returns>
            <para>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, or both; 
            this value is also needed when invoking <see cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteScalar(System.IAsyncResult)"/>, 
            which returns the actual result.</para>
            </returns>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteScalar(System.Data.Common.DbTransaction,System.Data.CommandType,System.String)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteScalar(System.IAsyncResult)"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.EndExecuteScalar(System.IAsyncResult)">
            <summary>
            <para>Finishes asynchronous execution of a Transact-SQL statement, returning the first column of the first row in the result set returned by the query. Extra columns or rows are ignored.</para>
            </summary>
            <param name="asyncResult">
            <para>The <see cref="T:System.IAsyncResult"/> returned by a call to any overload of BeginExecuteScalar.</para>
            </param>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database.ExecuteScalar(System.Data.Common.DbCommand)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.BeginExecuteScalar(System.Data.Common.DbCommand,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.BeginExecuteScalar(System.Data.Common.DbCommand,System.Data.Common.DbTransaction,System.AsyncCallback,System.Object)"/>
            <returns>
            <para>The value of the first column of the first row in the result set returned by the query.
            If the result didn't have any columns or rows <see langword="null"/> (<b>Nothing</b> in Visual Basic).</para>
            </returns>     
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.DeriveParameters(System.Data.Common.DbCommand)">
            <summary>
            Retrieves parameter information from the stored procedure specified in the <see cref="T:System.Data.Common.DbCommand"/> and populates the Parameters collection of the specified <see cref="T:System.Data.Common.DbCommand"/> object. 
            </summary>
            <param name="discoveryCommand">The <see cref="T:System.Data.Common.DbCommand"/> to do the discovery.</param>
            <remarks>The <see cref="T:System.Data.Common.DbCommand"/> must be a <see cref="T:System.Data.SqlClient.SqlCommand"/> instance.</remarks>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.UserParametersStartIndex">
            <summary>
            Returns the starting index for parameters in a command.
            </summary>
            <returns>The starting index for parameters in a command.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.SetUpRowUpdatedEvent(System.Data.Common.DbDataAdapter)">
            <summary>
            Sets the RowUpdated event for the data adapter.
            </summary>
            <param name="adapter">The <see cref="T:System.Data.Common.DbDataAdapter"/> to set the event.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.SameNumberOfParametersAndValues(System.Data.Common.DbCommand,System.Object[])">
            <summary>
            Determines if the number of parameters in the command matches the array of parameter values.
            </summary>
            <param name="command">The <see cref="T:System.Data.Common.DbCommand"/> containing the parameters.</param>
            <param name="values">The array of parameter values.</param>
            <returns><see langword="true"/> if the number of parameters and values match; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.CreateParameter(System.String,System.Data.SqlDbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            <para>Adds a new instance of a <see cref="T:System.Data.Common.DbParameter"/> object.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbtype"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>
            <param name="size"><para>The maximum size of the data within the column.</para></param>
            <param name="direction"><para>One of the <see cref="T:System.Data.ParameterDirection"/> values.</para></param>
            <param name="nullable"><para>A value indicating whether the parameter accepts <see langword="null"/> (<b>Nothing</b> in Visual Basic) values.</para></param>
            <param name="precision"><para>The maximum number of digits used to represent the <paramref name="value"/>.</para></param>
            <param name="scale"><para>The number of decimal places to which <paramref name="value"/> is resolved.</para></param>
            <param name="sourceColumn"><para>The name of the source column mapped to the DataSet and used for loading or returning the <paramref name="value"/>.</para></param>
            <param name="sourceVersion"><para>One of the <see cref="T:System.Data.DataRowVersion"/> values.</para></param>
            <param name="value"><para>The value of the parameter.</para></param>  
            <returns>Db parameter.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.ConfigureParameter(System.Data.SqlClient.SqlParameter,System.String,System.Data.SqlDbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            Configures a given <see cref="T:System.Data.Common.DbParameter"/>.
            </summary>
            <param name="param">The <see cref="T:System.Data.Common.DbParameter"/> to configure.</param>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbtype"><para>One of the <see cref="T:System.Data.SqlDbType"/> values.</para></param>
            <param name="size"><para>The maximum size of the data within the column.</para></param>
            <param name="direction"><para>One of the <see cref="T:System.Data.ParameterDirection"/> values.</para></param>
            <param name="nullable"><para>A value indicating whether the parameter accepts <see langword="null"/> (<b>Nothing</b> in Visual Basic) values.</para></param>
            <param name="precision"><para>The maximum number of digits used to represent the <paramref name="value"/>.</para></param>
            <param name="scale"><para>The number of decimal places to which <paramref name="value"/> is resolved.</para></param>
            <param name="sourceColumn"><para>The name of the source column mapped to the DataSet and used for loading or returning the <paramref name="value"/>.</para></param>
            <param name="sourceVersion"><para>One of the <see cref="T:System.Data.DataRowVersion"/> values.</para></param>
            <param name="value"><para>The value of the parameter.</para></param>  
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.CheckIfSqlCommand(System.Data.Common.DbCommand)">
            <summary>
            Check wether command is sql command.
            </summary>
            <param name="command">Db command.</param>
            <returns>Sql command.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.CreateSqlCommandByCommandType(System.Data.CommandType,System.String)">
            <summary>
            Create sql command by command type.
            </summary>
            <param name="commandType">Command type.</param>
            <param name="commandText">Command text.</param>
            <returns>Sql command.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.CleanupConnectionFromAsyncOperation(Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.DaabAsyncResult)">
            <summary>
            Clean up connection from async operation.
            </summary>
            <param name="daabAsyncResult">Daab async result.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.DoBeginExecuteXmlReader(System.Data.SqlClient.SqlCommand,System.AsyncCallback,System.Object)">
            <summary>
            Begin execute xml reader.
            </summary>
            <param name="command">Sql command.</param>
            <param name="callback">Call back.</param>
            <param name="state">Execute statue.</param>
            <returns>Async result.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.DoExecuteXmlReader(System.Data.SqlClient.SqlCommand)">
            <summary>
            Execute the actual XML Reader call.
            </summary>  
            <param name="sqlCommand">Sql command.</param>
            <returns>Xml reader.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.OnSqlRowUpdated(System.Object,System.Data.SqlClient.SqlRowUpdatedEventArgs)">
            <summary>
            Listens for the RowUpdate event on a dataadapter to support UpdateBehavior.Continue.
            </summary>
            <param name="sender">Event sender.</param>
            <param name="rowThatCouldNotBeWritten">Sql row update event args.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.DoBeginExecuteNonQuery(System.Data.SqlClient.SqlCommand,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begin exectue no query.
            </summary>
            <param name="command">Sql command.</param>
            <param name="disposeCommand">Wether dispose command.</param>
            <param name="callback">Call back.</param>
            <param name="state">Execute state.</param>
            <returns>Async result.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDatabase.DoBeginExecuteReader(System.Data.SqlClient.SqlCommand,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begin execute reader.
            </summary>
            <param name="command">Sql command.</param>
            <param name="disposeCommand">Wether dispose command.</param>
            <param name="callback">Call back.</param>
            <param name="state">Execute state.</param>
            <returns>Async result.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDataBaseProvider">
            <summary>
            Sql data base provider.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDataBaseProvider.databases">
            <summary>
            My databases.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDataBaseProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDataBaseProvider"/> class.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.SqlDataBaseProvider.GetDataBase(System.String)">
            <summary>
            Get data base.
            </summary>
            <param name="connectionString">Connection string.</param>
            <returns>Database instance.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.TransactionScopeConnections">
            <summary>
            	This class manages the connections that will be used when transactions are active
            	as a result of instantiating a <see cref="T:System.Transactions.TransactionScope"/>. When a transaction
            	is active, all database access must be through this single connection unless you want
            	to use a distributed transaction, which is an expensive operation.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.TransactionScopeConnections.TransactionConnections">
            <summary>
            There's a reason why this field is not thread-static: notifications for completed Oracle transactions may happen in a different thread.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.TransactionScopeConnections.GetConnection(Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.Database)">
            <summary>
            	Returns a connection for the current transaction. This will be an existing DbConnection
            	instance or a new one if there is a <see cref="T:System.Transactions.TransactionScope"/> active. Otherwise this method
            	returns null.
            </summary>
            <param name="db">Database instance.</param>
            <returns>Either a DbConnection instance or null.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.TransactionScopeConnections.OnTransactionCompleted(System.Object,System.Transactions.TransactionEventArgs)">
            <summary>
            	This event handler is called whenever a transaction is about to be disposed, which allows
            	us to remove the transaction from our list and dispose the connection instance we created.
            </summary>
            <param name="sender">Event sender.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.UpdateBehavior">
            <summary>
            Used with the Database.UpdateDataSet method. Provides control over behavior when the Data
            Adapter's update command encounters an error.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.UpdateBehavior.Standard">
            <summary>
            No interference with the DataAdapter's Update command. If Update encounters
            an error, the update stops.  Additional rows in the Datatable are uneffected.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.UpdateBehavior.Continue">
            <summary>
            If the DataAdapter's Update command encounters an error, the update will
            continue. The Update command will try to update the remaining rows. 
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.UpdateBehavior.Transactional">
            <summary>
            If the DataAdapter encounters an error, all updated rows will be rolled back.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.WrappedAsyncOperation">
            <summary>
            A helper class that provides the code needed to wrap an existing
            asynchronous operation and return a different implementation of
            <see cref="T:System.IAsyncResult"/>.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.DBImplement.MSEnterprise.WrappedAsyncOperation.BeginAsyncOperation``1(System.AsyncCallback,System.Func{System.AsyncCallback,System.IAsyncResult},System.Func{System.IAsyncResult,``0})">
            <summary>
            Start an asyncronous operation that wraps a lower-level
            async operation.
            </summary>
            <typeparam name="TWrappingAsyncResult">Type that implements IAsyncResult
            that will be returned from this method.</typeparam>
            <param name="callback">The user's callback method to be called when
            the async operation completes.</param>
            <param name="beginOperation">A delegate that invokes the underlying
            async operation that we're wrapping.</param>
            <param name="wrappingResultCreator">A delegate that takes the inner
            async result and returns the wrapping instance of <typeparamref name="TWrappingAsyncResult"/>.
            </param>
            <returns>The <see cref="T:System.IAsyncResult"/>.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.DBImplement.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.AsyncOperationsNotSupported">
            <summary>
              Looks up a localized string similar to The database type &quot;{0}&quot; does not support asynchronous operations..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.BlockName">
            <summary>
              Looks up a localized string similar to Enterprise Library Data Access Application Block.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.CommandExecutedCounterHelpResource">
            <summary>
              Looks up a localized string similar to Commands Executed/sec is the rate at which database commands were executed..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.CommandFailedCounterHelpResource">
            <summary>
              Looks up a localized string similar to Commands Failed/sec is tha rate at which database commands failed to execute..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.ConfigurationFailureCreatingDatabase">
            <summary>
              Looks up a localized string similar to A configuration failure occurred while creating database ‘{0}’..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.ConnectionFailedCounterHelpResource">
            <summary>
              Looks up a localized string similar to Connections Failed/sec is the rate at which database connections failed to open..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.ConnectionOpenedCounterHelpResource">
            <summary>
              Looks up a localized string similar to Connections Opened/sec is the rate at which database connections were opened..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.CounterCategoryHelpResourceName">
            <summary>
              Looks up a localized string similar to Enterprise Library Data Performance Counter Instances.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.DefaultSqlConnctionString">
            <summary>
              Looks up a localized string similar to Database=Database;Server=(local)\SQLEXPRESS;Integrated Security=SSPI.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.ErrorConnectionFailedExtraInformation">
            <summary>
              Looks up a localized string similar to The connection string used was &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.ErrorConnectionFailedMessage">
            <summary>
              Looks up a localized string similar to The error occurred using the &quot;{0}&quot; database instance while attempting to open the database connection..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.ExceptionArgumentMustBePropertyExpression">
            <summary>
              Looks up a localized string similar to The expression must contain a MemberAccessExpression to a property ( t =&gt;t.Property)..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.ExceptionArgumentMustInheritFromDatabase">
            <summary>
              Looks up a localized string similar to Type must inherit from Microsoft.Practices.EnterpriseLibrary.Data.Database.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.ExceptionCannotCreateRowMapping">
            <summary>
              Looks up a localized string similar to Cannot create a mapping for type {0}..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.ExceptionColumnNotFoundWhileMapping">
            <summary>
              Looks up a localized string similar to The column {0} was not found on the IDataRecord being evaluated. This might indicate that the accessor was created with the wrong mappings..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.ExceptionCommandNotSqlCommand">
            <summary>
              Looks up a localized string similar to The command must be a SqlCommand..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.ExceptionConvertionFailedWhenMappingPropertyToColumn">
            <summary>
              Looks up a localized string similar to The value from column &apos;{0}&apos; cannot be converted to property &apos;{1}&apos; of type &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.ExceptionDatabaseDataTypeDoesNotHaveRequiredConstructor">
            <summary>
              Looks up a localized string similar to The configuration element type {0} does not have an accessible constructor taking a ConnectionStringSettings and an IConfigurationSource as constructor arguments..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.ExceptionDatabaseDataTypeDoesNotInheritFromDatabaseData">
            <summary>
              Looks up a localized string similar to The configuration element type {0} does not inherit from the DatabaseData class..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.ExceptionDatabaseTypeDoesNotHaveAssemblerAttribute">
            <summary>
              Looks up a localized string similar to The database type {0} for the name {1} does not have the required [DatabaseAssembler] attribute required to build the database object..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.ExceptionDatabaseTypeDoesNotHaveRequiredConfigurationTypeAttribute">
            <summary>
              Looks up a localized string similar to The database type {0} does not have the required ConfigurationElementType attribute..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.ExceptionMessageParameterMatchFailure">
            <summary>
              Looks up a localized string similar to The number of parameters does not match number of values for stored procedure..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.ExceptionMessageUpdateDataSetArgumentFailure">
            <summary>
              Looks up a localized string similar to At least one command must be initialized.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.ExceptionMessageUpdateDataSetRowFailure">
            <summary>
              Looks up a localized string similar to Failed to update row .
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.ExceptionNoConfigurationElementTypeAttribute">
            <summary>
              Looks up a localized string similar to The type {0} does not contain the ConfigurationElementTypeAttribute..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.ExceptionNoDatabaseDefined">
            <summary>
              Looks up a localized string similar to The requested database {0} is not defined in configuration..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.ExceptionNoProviderDefinedForConnectionString">
            <summary>
              Looks up a localized string similar to The requested database {0} does not have provider name set in the connection string..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.ExceptionNullOrEmptyString">
            <summary>
              Looks up a localized string similar to The value can not be null or an empty string..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.ExceptionParameterDiscoveryNotSupported">
            <summary>
              Looks up a localized string similar to The database type &quot;{0}&quot; does not support automatic parameter discovery. Use an IParameterMapper instead..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.ExceptionParameterDiscoveryNotSupportedOnGenericDatabase">
            <summary>
              Looks up a localized string similar to Parameter discovery is not supported for connections using GenericDatabase. You must specify the parameters explicitly, or configure the connection to use a type deriving from Database that supports parameter discovery..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.ExceptionSqlStringAccessorCannotDiscoverParameters">
            <summary>
              Looks up a localized string similar to Sql String Accessor cannot be used to discover parameters. Use an IParameterMapper instead..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.ExceptionTableNameArrayEmpty">
            <summary>
              Looks up a localized string similar to The table name array used to map results to user-specified table names cannot be empty..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.ExceptionTypeNotDatabaseAssembler">
            <summary>
              Looks up a localized string similar to Type {0} is not an implementation of IDatabaseAssembler for DatabaseAssemblerAttribute..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.Password">
            <summary>
              Looks up a localized string similar to password=,pwd=.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.TotalCommandsExecutedHelpResource">
            <summary>
              Looks up a localized string similar to Total Commands Executed is the total number which database commands were executed..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.TotalCommandsFailedHelpResource">
            <summary>
              Looks up a localized string similar to Total Commands Failed is the total number which database commands failed to execute..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.TotalConnectionFailedHelpResource">
            <summary>
              Looks up a localized string similar to Total Connections Failed is the total number which database connections failed to open..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.TotalConnectionOpenedHelpResource">
            <summary>
              Looks up a localized string similar to Total Connections Opened is the total number which database connections were opened..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.DBImplement.Resources.UserName">
            <summary>
              Looks up a localized string similar to user id=,uid=.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.Extensions.DataRowExtensions">
            <summary>
            Data row extensions.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.Extensions.DataRowExtensions.staticDataRowConverter">
            <summary>
            The data row converter.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.Extensions.DataRowExtensions.GetUniqueColumnValue(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.String)">
            <summary>
            Get unique column value.
            </summary>
            <param name="rows">Data rows.</param>
            <param name="columnName">Column name.</param>
            <returns>Unique column value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.Extensions.DataRowExtensions.ToDictionary(System.Data.DataRow)">
            <summary>
            Convert data row to object dictionary.
            </summary>
            <param name="me">Current data row.</param>
            <returns>Object dictionary.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.Extensions.DataRowExtensions.SetTestDataRowConverter(Ctrip.Duckbill.DataAccess.IDataRowConverter)">
            <summary>
            Sets the test data row converter.
            </summary>
            <param name="converter">The converter.</param>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.Extensions.DataTableExtensions">
            <summary>
            Data table extensions.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.Extensions.DataTableExtensions.staticDataTableMapping">
            <summary>
            The mapping.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.Extensions.DataTableExtensions.MappingTo``1(System.Data.DataTable)">
            <summary>
            Mapping data table to entities.
            </summary>
            <typeparam name="TEntity">Type of entity.</typeparam>
            <param name="table">Data table.</param>
            <returns>Entity collection.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.Extensions.DataTableExtensions.SetTestDataTableMapping(Ctrip.Duckbill.DataAccess.IDataTableMapping)">
            <summary>
            Sets the test data table mapping.
            </summary>
            <param name="mapping">The mapping.</param>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.IDataBase">
            <summary>
            Database wrapper.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDataBase.CreateParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Byte,System.Byte,System.Object)">
            <summary>
            <para>Adds a new instance of a <see cref="T:System.Data.Common.DbParameter"/> object.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbtype"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>
            <param name="size"><para>The maximum size of the data within the column.</para></param>
            <param name="direction"><para>One of the <see cref="T:System.Data.ParameterDirection"/> values.</para></param>
            <param name="precision"><para>The maximum number of digits used to represent the <paramref name="value"/>.</para></param>
            <param name="scale"><para>The number of decimal places to which <paramref name="value"/> is resolved.</para></param>
            <param name="value"><para>The value of the parameter.</para></param>  
            <returns>A newly created <see cref="T:System.Data.Common.DbParameter"/> fully initialized with given parameters.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDataBase.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            <para>Executes the <paramref name="command"/> and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the reader when finished.</para>
            </summary>
            <param name="command">
            <para>The command that contains the query to execute.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>        
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDataBase.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            <para>Executes the <paramref name="command"/> and returns the first column of the first row in the result set returned by the query. Extra columns or rows are ignored.</para>
            </summary>
            <param name="command">
            <para>The command that contains the query to execute.</para>
            </param>
            <returns>
            <para>The first column of the first row in the result set.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDataBase.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            <para>Executes the <paramref name="command"/> and returns the number of rows affected.</para>
            </summary>
            <param name="command">
            <para>The command that contains the query to execute.</para>
            </param>       
            <returns>Effect rows count.</returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDataBase.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            <para>Executes the <paramref name="command"/> and returns the results in a new <see cref="T:System.Data.DataSet"/>.</para>
            </summary>
            <param name="command"><para>The <see cref="T:System.Data.Common.DbCommand"/> to execute.</para></param>
            <returns>A <see cref="T:System.Data.DataSet"/> with the results of the <paramref name="command"/>.</returns>        
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDataBase.GetSqlStringCommand(System.String)">
            <summary>
            <para>Creates a <see cref="T:System.Data.Common.DbCommand"/> for a SQL query.</para>
            </summary>
            <param name="query"><para>The text of the query.</para></param>        
            <returns><para>The <see cref="T:System.Data.Common.DbCommand"/> for the SQL query.</para></returns>        
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDataBase.GetStoredProcCommand(System.String)">
            <summary>
            <para>Creates a <see cref="T:System.Data.Common.DbCommand"/> for a stored procedure.</para>
            </summary>
            <param name="storedProcedureName"><para>The name of the stored procedure.</para></param>
            <returns><para>The <see cref="T:System.Data.Common.DbCommand"/> for the stored procedure.</para></returns>       
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.IDataBaseDescriptor">
            <summary>
            Database descriptor interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.IDataBaseDescriptor.Name">
            <summary>
            Gets database name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.IDataBaseDescriptor.ConnectionCollection">
            <summary>
            Gets connection string list.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.IDataBaseGroupDescriptor">
            <summary>
            Database group descriptor interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.IDataBaseGroupDescriptor.Name">
            <summary>
            Gets group name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.IDataBaseGroupDescriptor.DatabaseCollection">
            <summary>
            Gets database collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.IDataBaseProvider">
            <summary>
            Database provider.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDataBaseProvider.GetDataBase(System.String)">
            <summary>
            Get data base.
            </summary>
            <param name="connectionString">Connection string.</param>
            <returns>Database instance.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.IDataCommandDescriptor">
            <summary>
            Data command descriptor.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.IDataCommandDescriptor.Name">
            <summary>
            Gets command name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.IDataCommandDescriptor.Database">
            <summary>
            Gets database name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.IDataCommandDescriptor.CommandType">
            <summary>
            Gets command type.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.IDataCommandDescriptor.TimeOut">
            <summary>
            Gets time out.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.IDataCommandDescriptor.CommandText">
            <summary>
            Gets command text.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.IDataCommandDescriptor.CheckContextDatabase">
            <summary>
            Gets a value indicating whether need check context database.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.IDataCommandDescriptor.ParameterCollection">
            <summary>
            Gets data parameter collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.IDataCommandDescriptor.ParameterGroupCollection">
            <summary>
            Gets data parameter group collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.IDataParameterDescriptor">
            <summary>
            Data parameter descriptor.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.IDataParameterDescriptor.Name">
            <summary>
            Gets parameter name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.IDataParameterDescriptor.DbType">
            <summary>
            Gets db type.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.IDataParameterDescriptor.IsOutput">
            <summary>
            Gets a value indicating whether parameter is a output parameter.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.IDataParameterDescriptor.Size">
            <summary>
            Gets arameter size.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.IDataParameterDescriptor.Precision">
            <summary>
            Gets parameter precision.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.IDataParameterDescriptor.Scale">
            <summary>
            Gets parameter scale.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.IDataParameterGroupDescriptor">
            <summary>
            Data parameter group descriptor.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.IDataParameterGroupDescriptor.Name">
            <summary>
            Gets parameter name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.IDataParameterGroupDescriptor.DbType">
            <summary>
            Gets db type.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.IDataParameterGroupDescriptor.Size">
            <summary>
            Gets arameter size.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.IDataParameterGroupDescriptor.Precision">
            <summary>
            Gets parameter precision.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.IDataParameterGroupDescriptor.Scale">
            <summary>
            Gets parameter scale.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.IDataReaderConverter">
            <summary>
            Data reader converter.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDataReaderConverter.ToDictionary(System.Data.IDataReader)">
            <summary>
            To the dictionary.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns>Dictionary instance.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.IDataRowConverter">
            <summary>
            Data row utility interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDataRowConverter.ToDictionary(System.Data.DataRow)">
            <summary>
            Convert data row to object dictionary.
            </summary>
            <param name="me">Current data row.</param>
            <returns>Object dictionary.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.IDataSetXmlAccessConfigRepository">
            <summary>
            Dataset xml access config repository.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.IDataSetXmlAccessConfigRepository.DefaultXmlDataFolderFullPath">
            <summary>
            Gets default xml data forlderFullPaths.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.IDataSetXmlAccessConfigRepository.AlternateXmlDataFoldersFullPath">
            <summary>
            Gets alternate xml data folders full path.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.IDataSetXmlAccessor">
            <summary>
            Dataset xml accessor interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDataSetXmlAccessor.LoadCollection``1(System.String)">
            <summary>
            Load object collection from dataset xml file. The object will be cached until the file is modified.
            </summary>
            <typeparam name="TObject">Object type.</typeparam>
            <param name="file">Xml file path.</param>
            <returns>Xml object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDataSetXmlAccessor.LoadCollection``1(System.String,System.Boolean)">
            <summary>
            Load object collection from dataset xml file. 
            </summary>
            <typeparam name="TObject">Object type.</typeparam>
            <param name="file">Xml file path.</param>
            <param name="enableCache">Determine to enable the file monitoring cache.</param>
            <returns>Xml object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDataSetXmlAccessor.LoadTable(System.String)">
            <summary>
            Load data table from dataset xml file. The object will be cached until the file is modified.
            </summary>
            <param name="file">Xml file path.</param>
            <returns>Data table.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDataSetXmlAccessor.LoadTable(System.String,System.Boolean)">
            <summary>
            Load data table from dataset xml file. 
            </summary>
            <param name="file">Xml file path.</param>
            <param name="enableCache">Determine to enable the file monitoring cache.</param>
            <returns>Data table.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.IDataSetXmlCache">
            <summary>
            Dataset xml cache.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDataSetXmlCache.TryGet``1(System.String,``0@)">
            <summary>
            Tries the get.
            </summary>
            <typeparam name="TResult">The type of the content.</typeparam>
            <param name="file">The file.</param>
            <param name="content">The content.</param>
            <returns><c>true</c> if got the result, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDataSetXmlCache.Add``1(System.String,``0)">
            <summary>
            Adds the specified file.
            </summary>
            <typeparam name="TResult">The type of the content.</typeparam>
            <param name="file">The file.</param>
            <param name="result">The content.</param>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.IDataSetXmlFileReader">
            <summary>
            Dataset xml file reader.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDataSetXmlFileReader.ReadDataSet(System.String)">
            <summary>
            Reads the data set.
            </summary>
            <param name="file">The file.</param>
            <returns>DataSet instance.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.IDataSetXmlUtility">
            <summary>
            Data set xml utility.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDataSetXmlUtility.GetMonitorFiles(System.String)">
            <summary>
            Gets the monitor files.
            </summary>
            <param name="file">The file.</param>
            <returns>Monitored file list.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.IDataTableMapping">
            <summary>
            Data table mapping.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDataTableMapping.MappingTo``1(System.Data.DataTable)">
            <summary>
            Mapping data table to entities.
            </summary>
            <typeparam name="TEntity">Type of entity.</typeparam>
            <param name="table">Data table.</param>
            <returns>Entity collection.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.IDBCommand">
            <summary>
            DB command interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.IDBCommand.Name">
            <summary>
            Gets db command name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.IDBCommand.DatabaseName">
            <summary>
            Gets database name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.IDBCommand.Parameters">
            <summary>
            Gets parameters.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDBCommand.AddInParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            Adds a new In <see cref="T:System.Data.Common.DbParameter"/> object to this command.
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbtype"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>                
            <param name="value"><para>The value of the parameter.</para></param>      
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDBCommand.AddInParameter(System.String,System.Data.DbType,System.Int32,System.Byte,System.Byte,System.Object)">
            <summary>
            Adds a new In <see cref="T:System.Data.Common.DbParameter"/> object to this command.
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbtype"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>   
            <param name="size"><para>The maximum size of the data within the column.</para></param>
            <param name="precision"><para>The maximum number of digits used to represent the <paramref name="value"/>.</para></param>
            <param name="scale"><para>The number of decimal places to which <paramref name="value"/> is resolved.</para></param>
            <param name="value"><para>The value of the parameter.</para></param>      
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDBCommand.AddOutParameter(System.String,System.Data.DbType)">
            <summary>
            Adds a new Out <see cref="T:System.Data.Common.DbParameter"/> object to this command.
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbtype"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>            
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDBCommand.AddOutParameter(System.String,System.Data.DbType,System.Int32,System.Byte,System.Byte)">
            <summary>
            Adds a new Out <see cref="T:System.Data.Common.DbParameter"/> object to this command.
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbtype"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>        
            <param name="size"><para>The maximum size of the data within the parameter.</para></param>   
            <param name="precision"><para>The maximum number of digits used to represent the parameter.</para></param>
            <param name="scale"><para>The number of decimal places to which parameter is resolved.</para></param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDBCommand.AddParameter(System.String,System.Object)">
            <summary>
            Add parameter to command.
            </summary>
            <param name="parameterName">Parameter name.</param>
            <param name="parameterValue">Parameter value.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDBCommand.AddGroupParameter(System.String,System.Collections.IEnumerable)">
            <summary>
            Add group parameter to command.
            </summary>
            <param name="parameterGroupName">Parameter group name.</param>
            <param name="parameterValues">Parameter group value.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDBCommand.AddParameter(System.Data.Common.DbParameter)">
            <summary>
            Add parameter to command.
            </summary>
            <param name="parameter">Parameter instance.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDBCommand.GetParameterValue(System.String)">
            <summary>
            Get parameter value.
            </summary>
            <param name="name">Parameter name.</param>
            <returns>Parameter value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDBCommand.ExecuteEntityCollection``1">
            <summary>
            Executes the query and returns the entity collection of the result set returned by the query. 
            </summary>
            <typeparam name="TEntity">Entity type.</typeparam>
            <returns>Entity instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDBCommand.ExecuteEntity``1">
            <summary>
            Executes the query and returns the entity of the first row in the result set returned by the query.
            </summary>
            <typeparam name="TEntity">Entity type.</typeparam>
            <returns>Entity instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDBCommand.ExecuteScalar">
            <summary>
            Executes the query and returns the first column of the first row in the result set returned by the query. All other columns and rows are ignored.
            </summary>
            <returns>The first column of the first row in the result set.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDBCommand.ExecuteNonQuery">
            <summary>
            Executes a SQL statement against a connection object.
            </summary>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDBCommand.ExecuteTable">
            <summary>
            Executes the query and returns the datatable.
            </summary>
            <returns>Datatable result.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDBCommand.ExecuteDataSet">
            <summary>
            Executes the query and returns the data set.
            </summary>
            <returns>Dataset result.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.IDBConfigurationRepository">
            <summary>
            Database configuration repository.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDBConfigurationRepository.GetDataBaseGroup(System.String)">
            <summary>
            Get data base by database name.
            </summary>
            <param name="databaseGroupName">Database group name.</param>
            <returns>Database group.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDBConfigurationRepository.GetDataBase(System.String)">
            <summary>
            Get data base by database name.
            </summary>
            <param name="databaseName">Database name.</param>
            <returns>Database unit.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDBConfigurationRepository.GetDataCommandFiles">
            <summary>
            Get data command files.
            </summary>
            <returns>Data command files.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDBConfigurationRepository.GetDataCommand(System.String)">
            <summary>
            Get data command.
            </summary>
            <param name="dataCommandName">Data command name.</param>
            <returns>Data command descriptor.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDBConfigurationRepository.CheckContextDatabase(System.String)">
            <summary>
            Get a value indicating whether need check context database.
            </summary>
            <param name="databaseName">Requested database name.</param>
            <returns>A value indicating whether need check context database.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.IDBManager">
            <summary>
            Db manager interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDBManager.CreateDBCommand(System.String)">
            <summary>
            Create db command by configured command name.
            </summary>
            <param name="commandName">Configured command name.</param>
            <returns>Db command.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDBManager.CreateDBCommand(System.String,System.String)">
            <summary>
            Create db command by configured command name.
            </summary>
            <param name="databaseName">Configured database name.</param>
            <param name="commandName">Configured command name.</param>
            <returns>Db command.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDBManager.CreateCustomDBCommand(System.String,System.String)">
            <summary>
            Create custom db command.
            </summary>
            <param name="databaseName">Configured database name.</param>
            <param name="commandText">Command text.</param>
            <returns>Db command.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IDBManager.CreateStoredProcedureDBCommand(System.String,System.String)">
            <summary>
            Creates the stored procedure database command.
            </summary>
            <param name="databaseName">Configured database name.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <returns>Db command.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.Implement.DataReaderConverter">
            <summary>
            Data reader converter.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.Implement.DataReaderConverter.ToDictionary(System.Data.IDataReader)">
            <summary>
            To the dictionary.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns>Dictionary instance.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.Implement.DataRowConverter">
            <summary>
            Default data row utility.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.Implement.DataRowConverter.ToDictionary(System.Data.DataRow)">
            <summary>
            Convert data row to object dictionary.
            </summary>
            <param name="me">Current data row.</param>
            <returns>Object dictionary.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.Implement.DataTableMapping">
            <summary>
            Default data table mapping.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.Implement.DataTableMapping.builder">
            <summary>
            Entity builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.Implement.DataTableMapping.rowConverter">
            <summary>
            The row converter.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.Implement.DataTableMapping.#ctor(Ctrip.Duckbill.EntityMapping.IEntityBuilder,Ctrip.Duckbill.DataAccess.IDataRowConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.DataAccess.Implement.DataTableMapping" /> class.
            </summary>
            <param name="builder">The builder.</param>
            <param name="rowConverter">The row converter.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.Implement.DataTableMapping.MappingTo``1(System.Data.DataTable)">
            <summary>
            Mapping data table to entities.
            </summary>
            <typeparam name="TEntity">Type of entity.</typeparam>
            <param name="table">Data table.</param>
            <returns>Entity collection.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.IXmlAccessor">
            <summary>
            Xml access interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IXmlAccessor.LoadString(System.String)">
            <summary>
            Load string from xml file. The string will be cached until the file is modified.
            </summary>
            <param name="file">Xml file path.</param>
            <returns>Xml string content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IXmlAccessor.LoadString(System.String,System.Boolean)">
            <summary>
            Load string from xml file.
            </summary>
            <param name="file">Xml file path.</param>
            <param name="enableCache">Determine to enable the file monitoring cache.</param>
            <returns>Xml string content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IXmlAccessor.Save(System.String,System.String)">
            <summary>
            Save xml file.
            </summary>
            <param name="file">Xml file Path.</param>
            <param name="content">Xml string content.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IXmlAccessor.LoadXElement(System.String)">
            <summary>
            Load xelement from xml file. The string will be cached until the file is modified.
            </summary>
            <param name="file">Xml file path.</param>
            <returns>Xelement content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IXmlAccessor.LoadXElement(System.String,System.Boolean)">
            <summary>
            Load xelement from xml file.
            </summary>
            <param name="file">Xml file path.</param>
            <param name="enableCache">Determine to enable the file monitoring cache.</param>
            <returns>Xelement content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IXmlAccessor.Save(System.String,System.Xml.Linq.XElement)">
            <summary>
            Save xml file.
            </summary>
            <param name="file">Xml file Path.</param>
            <param name="content">Xelement content.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IXmlAccessor.LoadObject``1(System.String)">
            <summary>
            Load object from xml file. The object will be cached until the file is modified.
            </summary>
            <typeparam name="TObject">Object type.</typeparam>
            <param name="file">Xml file path.</param>
            <returns>Xml object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IXmlAccessor.LoadObject``1(System.String,System.Boolean)">
            <summary>
            Load object from xml file.
            </summary>
            <typeparam name="TObject">Object type.</typeparam>
            <param name="file">Xml file path.</param>
            <param name="enableCache">Determine to enable the file monitoring cache.</param>
            <returns>Xml object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IXmlAccessor.Save(System.String,System.Object)">
            <summary>
            Save xml file.
            </summary>
            <param name="file">Xml file Path.</param>
            <param name="content">Xml object.</param>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.IXmlCache">
            <summary>
            Xml cache.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IXmlCache.TryGet``1(System.String,``0@)">
            <summary>
            Tries the get.
            </summary>
            <typeparam name="TResult">The type of the content.</typeparam>
            <param name="file">The file.</param>
            <param name="content">The content.</param>
            <returns><c>true</c> if got the result, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IXmlCache.Add``1(System.String,``0)">
            <summary>
            Adds the specified file.
            </summary>
            <typeparam name="TResult">The type of the content.</typeparam>
            <param name="file">The file.</param>
            <param name="result">The content.</param>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.IXmlUtility">
            <summary>
            Xml utility.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.IXmlUtility.GetFileAbsolutePath(System.String)">
            <summary>
            Gets the file absolute path.
            </summary>
            <param name="file">The file.</param>
            <returns>File absolute path.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.XmlImplement.Config.AlternateXmlDataFolderCollection">
            <summary>
            Alternate xml data folder collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.XmlImplement.Config.AlternateXmlDataFolderCollection.Folders">
            <summary>
            Gets or sets folders.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.XmlImplement.Config.DataSetXmlAccessConfig">
            <summary>
            Dataset xml access config.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.XmlImplement.Config.DataSetXmlAccessConfig.DefaultXmlDataFolder">
            <summary>
            Gets or sets default xml data folder.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.XmlImplement.Config.DataSetXmlAccessConfig.AlternateXmlDataFolders">
            <summary>
            Gets or sets alternate xml data folders.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.XmlImplement.Config.DataSetXmlAccessConfigRepository">
            <summary>
            Default data set xml access config repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.XmlImplement.Config.DataSetXmlAccessConfigRepository.configurationAccessor">
            <summary>
            The configuration accessor.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.XmlImplement.Config.DataSetXmlAccessConfigRepository.currentAppDomain">
            <summary>
            The current application domain.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.XmlImplement.Config.DataSetXmlAccessConfigRepository.staticPath">
            <summary>
            The static path.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.Config.DataSetXmlAccessConfigRepository.#ctor(Ctrip.Duckbill.Configuration.IConfigurationAccessor,Ctrip.Duckbill.ICurrentAppDomain,Ctrip.Duckbill.IO.IStaticPath)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.DataAccess.XmlImplement.Config.DataSetXmlAccessConfigRepository" /> class.
            </summary>
            <param name="configurationAccessor">The configuration accessor.</param>
            <param name="currentAppDomain">The current application domain.</param>
            <param name="staticPath">The static path.</param>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.XmlImplement.Config.DataSetXmlAccessConfigRepository.DefaultXmlDataFolderFullPath">
            <summary>
            Gets default xml data folder full path.
            </summary>
            <value>The default XML data folder full path.</value>
        </member>
        <member name="P:Ctrip.Duckbill.DataAccess.XmlImplement.Config.DataSetXmlAccessConfigRepository.AlternateXmlDataFoldersFullPath">
            <summary>
            Gets alternate xml data folders full path.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.Config.DataSetXmlAccessConfigRepository.GetConfiguration">
            <summary>
            Gets the configuration.
            </summary>
            <returns>DataSet Xml Access Configuration.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.Config.DataSetXmlAccessConfigRepository.GetAbsolutePath(System.String)">
            <summary>
            Gets the absolute path.
            </summary>
            <param name="path">The path.</param>
            <returns>Absolute path.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.XmlImplement.DataSetXmlAccessor">
            <summary>
            Default implement of dataset xml accessor.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.XmlImplement.DataSetXmlAccessor.cache">
            <summary>
            The cache.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.XmlImplement.DataSetXmlAccessor.entityBuilder">
            <summary>
            Entity builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.XmlImplement.DataSetXmlAccessor.dataSetXmlUtility">
            <summary>
            The data set XML utility.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.XmlImplement.DataSetXmlAccessor.dataSetXmlFileReader">
            <summary>
            The data set XML file reader.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.XmlImplement.DataSetXmlAccessor.rowUtility">
            <summary>
            Data row utility.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.DataSetXmlAccessor.#ctor(Ctrip.Duckbill.DataAccess.IDataSetXmlCache,Ctrip.Duckbill.EntityMapping.IEntityBuilder,Ctrip.Duckbill.DataAccess.IDataSetXmlUtility,Ctrip.Duckbill.DataAccess.IDataSetXmlFileReader,Ctrip.Duckbill.DataAccess.IDataRowConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.DataAccess.XmlImplement.DataSetXmlAccessor" /> class.
            </summary>
            <param name="cache">The cache.</param>
            <param name="entityBuilder">The entity builder.</param>
            <param name="dataSetXmlUtility">The data set XML utility.</param>
            <param name="dataSetXmlFileReader">The data set XML file reader.</param>
            <param name="rowUtility">The row utility.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.DataSetXmlAccessor.LoadCollection``1(System.String)">
            <summary>
            Load object collection from dataset xml file. The object will be cached until the file is modified.
            </summary>
            <typeparam name="TObject">Object type.</typeparam>
            <param name="file">Xml file path.</param>
            <returns>Xml object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.DataSetXmlAccessor.LoadCollection``1(System.String,System.Boolean)">
            <summary>
            Load object collection from dataset xml file. 
            </summary>
            <typeparam name="TObject">Object type.</typeparam>
            <param name="file">Xml file path.</param>
            <param name="enableCache">Determine to enable the file monitoring cache.</param>
            <returns>Xml object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.DataSetXmlAccessor.LoadTable(System.String)">
            <summary>
            Load data table from dataset xml file. The object will be cached until the file is modified.
            </summary>
            <param name="file">Xml file path.</param>
            <returns>Data table.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.DataSetXmlAccessor.LoadTable(System.String,System.Boolean)">
            <summary>
            Load data table from dataset xml file. 
            </summary>
            <param name="file">Xml file path.</param>
            <param name="enableCache">Determine to enable the file monitoring cache.</param>
            <returns>Data table.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.DataSetXmlAccessor.GetDataTableWithCache(System.String)">
            <summary>
            Gets the data table with cache.
            </summary>
            <param name="file">The file.</param>
            <returns>DataTable data.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.DataSetXmlAccessor.GeObjectWithCache``1(System.String)">
            <summary>
            Get object with cache.
            </summary>
            <typeparam name="TObject">Object type.</typeparam>
            <param name="file">Xml file Path.</param>
            <returns>Xml deserialized object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.DataSetXmlAccessor.RealLoadObject``1(System.String)">
            <summary>
            Read load xml object.
            </summary>
            <typeparam name="TObject">Object type.</typeparam>
            <param name="file">Xml file Path.</param>
            <returns>Xml object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.DataSetXmlAccessor.RealLoadTable(System.String)">
            <summary>
            Load xml file and convert the content to table.
            </summary>
            <param name="file">Xml file path.</param>
            <returns>DataTable instance.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.XmlImplement.DataSetXmlCache">
            <summary>
            Data set xml cache.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.XmlImplement.DataSetXmlCache.cache">
            <summary>
            Configuration cache.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.XmlImplement.DataSetXmlCache.cacheItemFactory">
            <summary>
            Cache item factory.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.XmlImplement.DataSetXmlCache.dataSetXmlUtility">
            <summary>
            The data set XML utility.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.DataSetXmlCache.#ctor(Ctrip.Duckbill.Cache.IMemoryCacheRepository,Ctrip.Duckbill.Cache.ICacheItemFactory,Ctrip.Duckbill.DataAccess.IDataSetXmlUtility)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.DataAccess.XmlImplement.DataSetXmlCache" /> class.
            </summary>
            <param name="memoryCacheRepository">The memory cache repository.</param>
            <param name="cacheItemFactory">The cache item factory.</param>
            <param name="dataSetXmlUtility">The data set XML utility.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.DataSetXmlCache.TryGet``1(System.String,``0@)">
            <summary>
            Tries the get.
            </summary>
            <typeparam name="TResult">The type of the content.</typeparam>
            <param name="file">The file.</param>
            <param name="content">The content.</param>
            <returns><c>true</c> if got the result, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.DataSetXmlCache.Add``1(System.String,``0)">
            <summary>
            Adds the specified file.
            </summary>
            <typeparam name="TResult">The type of the content.</typeparam>
            <param name="file">The file.</param>
            <param name="result">The content.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.DataSetXmlCache.GenerateKey``1(System.String,System.Collections.Generic.List{System.String}@)">
            <summary>
            Generates the key.
            </summary>
            <typeparam name="TResult">The type of the content.</typeparam>
            <param name="file">The file.</param>
            <param name="monitorFiles">The monitor files.</param>
            <returns>Cache key.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.DataSetXmlCache.GetFiles(System.String,System.Collections.Generic.List{System.String}@)">
            <summary>
            Gets the main file and return the monitor files.
            </summary>
            <param name="file">The file.</param>
            <param name="monitorFiles">The monitor files.</param>
            <returns>Main files.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.XmlImplement.DataSetXmlFileReader">
            <summary>
            Dataset xml file reader.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.DataSetXmlFileReader.ReadDataSet(System.String)">
            <summary>
            Reads the data set.
            </summary>
            <param name="file">The file.</param>
            <returns>DataSet instance.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.XmlImplement.DataSetXmlUtility">
            <summary>
            Data set xml utility.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.XmlImplement.DataSetXmlUtility.configurationRepository">
            <summary>
            The configuration repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.XmlImplement.DataSetXmlUtility.staticPath">
            <summary>
            The static path.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.DataSetXmlUtility.#ctor(Ctrip.Duckbill.DataAccess.IDataSetXmlAccessConfigRepository,Ctrip.Duckbill.IO.IStaticPath)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.DataAccess.XmlImplement.DataSetXmlUtility"/> class.
            </summary>
            <param name="configurationRepository">The configuration repository.</param>
            <param name="staticPath">The static path.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.DataSetXmlUtility.GetMonitorFiles(System.String)">
            <summary>
            Gets the monitor files.
            </summary>
            <param name="file">The file.</param>
            <returns>Monitored file list.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.DataSetXmlUtility.GetFolders">
            <summary>
            Gets the folders.
            </summary>
            <returns>Absolute folder path list.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.XmlImplement.XmlAccessor">
            <summary>
            Default implement xml access.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.XmlImplement.XmlAccessor.xmlFile">
            <summary>
            The XML file.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.XmlImplement.XmlAccessor.cache">
            <summary>
            Cache manager.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.XmlImplement.XmlAccessor.xmlUtility">
            <summary>
            The XML utility.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.XmlImplement.XmlAccessor.xmlSerializer">
            <summary>
            Xml serializer.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.XmlAccessor.#ctor(Ctrip.Duckbill.Xml.IXmlFile,Ctrip.Duckbill.DataAccess.IXmlCache,Ctrip.Duckbill.DataAccess.IXmlUtility,Ctrip.Duckbill.Serialization.IOriginalXMLSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.DataAccess.XmlImplement.XmlAccessor" /> class.
            </summary>
            <param name="xmlFile">The XML file.</param>
            <param name="cache">The cache.</param>
            <param name="xmlUtility">The XML utility.</param>
            <param name="xmlSerializer">The XML serializer.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.XmlAccessor.LoadString(System.String)">
            <summary>
            Load string from xml file. The string will be cached until the file is modified.
            </summary>
            <param name="file">Xml file path.</param>
            <returns>Xml string content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.XmlAccessor.LoadString(System.String,System.Boolean)">
            <summary>
            Load string from xml file.
            </summary>
            <param name="file">Xml file path.</param>
            <param name="enableCache">Determine to enable the file monitoring cache.</param>
            <returns>Xml string content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.XmlAccessor.Save(System.String,System.String)">
            <summary>
            Save xml file.
            </summary>
            <param name="file">Xml file Path.</param>
            <param name="content">Xml string content.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.XmlAccessor.LoadObject``1(System.String)">
            <summary>
            Load object from xml file. The object will be cached until the file is modified.
            </summary>
            <typeparam name="TObject">Object type.</typeparam>
            <param name="file">Xml file path.</param>
            <returns>Xml object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.XmlAccessor.LoadObject``1(System.String,System.Boolean)">
            <summary>
            Load object from xml file. The object will be cached until the file is modified.
            </summary>
            <typeparam name="TObject">Object type.</typeparam>
            <param name="file">Xml file path.</param>
            <param name="enableCache">Determine to enable the file monitoring cache.</param>
            <returns>Xml object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.XmlAccessor.Save(System.String,System.Object)">
            <summary>
            Save xml file.
            </summary>
            <param name="file">Xml file Path.</param>
            <param name="content">Xml object.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.XmlAccessor.LoadXElement(System.String)">
            <summary>
            Load xelement from xml file. The string will be cached until the file is modified.
            </summary>
            <param name="file">Xml file path.</param>
            <returns>Xelement content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.XmlAccessor.LoadXElement(System.String,System.Boolean)">
            <summary>
            Load xelement from xml file.
            </summary>
            <param name="file">Xml file path.</param>
            <param name="enableCache">Determine to enable the file monitoring cache.</param>
            <returns>Xelement content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.XmlAccessor.Save(System.String,System.Xml.Linq.XElement)">
            <summary>
            Save xml file.
            </summary>
            <param name="file">Xml file Path.</param>
            <param name="content">Xelement content.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.XmlAccessor.GeObjectWithCache``1(System.String)">
            <summary>
            Get object with cache.
            </summary>
            <typeparam name="TObject">Object type.</typeparam>
            <param name="file">Xml file Path.</param>
            <returns>Xml deserialized object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.XmlAccessor.GetXElementWithCache(System.String)">
            <summary>
            Get xelement with cache.
            </summary>
            <param name="file">Xml file Path.</param>
            <returns>Xelement content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.XmlAccessor.RealLoadObject``1(System.String)">
            <summary>
            Read load xml object.
            </summary>
            <typeparam name="TObject">Object type.</typeparam>
            <param name="file">Xml file Path.</param>
            <returns>Xml object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.XmlAccessor.GetXmlStringWithCache(System.String)">
            <summary>
            Get xml string with cache.
            </summary>
            <param name="file">Xml file Path.</param>
            <returns>Xml string content.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.XmlImplement.XmlCache">
            <summary>
            Xml cache.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.XmlImplement.XmlCache.cache">
            <summary>
            Configuration cache.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.XmlImplement.XmlCache.cacheItemFactory">
            <summary>
            Cache item factory.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.XmlCache.#ctor(Ctrip.Duckbill.Cache.IMemoryCacheRepository,Ctrip.Duckbill.Cache.ICacheItemFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.DataAccess.XmlImplement.XmlCache" /> class.
            </summary>
            <param name="memoryCacheRepository">The memory cache repository.</param>
            <param name="cacheItemFactory">The cache item factory.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.XmlCache.TryGet``1(System.String,``0@)">
            <summary>
            Tries the get.
            </summary>
            <typeparam name="TResult">The type of the content.</typeparam>
            <param name="file">The file.</param>
            <param name="content">The content.</param>
            <returns><c>true</c> if got the result, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.XmlCache.Add``1(System.String,``0)">
            <summary>
            Adds the specified file.
            </summary>
            <typeparam name="TResult">The type of the content.</typeparam>
            <param name="file">The file.</param>
            <param name="result">The content.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.XmlCache.GenerateKey``1(System.String)">
            <summary>
            Generates the key.
            </summary>
            <typeparam name="TResult">The type of the content.</typeparam>
            <param name="file">The file.</param>
            <returns>Cache key.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.DataAccess.XmlImplement.XmlUtility">
            <summary>
            Xml utility.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.XmlImplement.XmlUtility.currentAppDomain">
            <summary>
            The current application domain.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DataAccess.XmlImplement.XmlUtility.staticPath">
            <summary>
            The static path.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.XmlUtility.#ctor(Ctrip.Duckbill.ICurrentAppDomain,Ctrip.Duckbill.IO.IStaticPath)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.DataAccess.XmlImplement.XmlUtility"/> class.
            </summary>
            <param name="currentAppDomain">The current application domain.</param>
            <param name="staticPath">The static path.</param>
        </member>
        <member name="M:Ctrip.Duckbill.DataAccess.XmlImplement.XmlUtility.GetFileAbsolutePath(System.String)">
            <summary>
            Gets the file absolute path.
            </summary>
            <param name="file">The file.</param>
            <returns>File absolute path.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Diagnostics.ICurrentProcess">
            <summary>
            Current process interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Diagnostics.ICurrentProcess.ID">
            <summary>
            Gets the current process id.
            </summary>
            <value>The unique process id.</value>
        </member>
        <member name="T:Ctrip.Duckbill.Diagnostics.Implement.CurrentProcess">
            <summary>
            Default current process implement.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Diagnostics.Implement.CurrentProcess.currentProcess">
            <summary>
            The current process.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Diagnostics.Implement.CurrentProcess.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Diagnostics.Implement.CurrentProcess"/> class.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Diagnostics.Implement.CurrentProcess.ID">
            <summary>
            Gets the current process id.
            </summary>
            <value>The unique process id.</value>
        </member>
        <member name="T:Ctrip.Duckbill.Diagnostics.Implement.ProcessFactory">
            <summary>
            Default implement of the process factory.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Diagnostics.Implement.ProcessFactory.CreateProcess">
            <summary>
            Creates the process.
            </summary>
            <returns>IProcess instance.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Diagnostics.Implement.ProcessWrapper">
            <summary>
            Process wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Diagnostics.Implement.ProcessWrapper.myProcess">
            <summary>
            My process.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Diagnostics.Implement.ProcessWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Diagnostics.Implement.ProcessWrapper"/> class.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Diagnostics.Implement.ProcessWrapper.StartInfo">
            <summary>
            Gets or sets the properties to pass to the System.Diagnostics.Process.Start() method of the System.Diagnostics.Process.
            </summary>
            <returns>The System.Diagnostics.ProcessStartInfo that represents the data with which to start the process. These arguments include the name of the executable file or document used to start the process.</returns>
            <exception cref="T:System.ArgumentNullException">The value that specifies the System.Diagnostics.Process.StartInfo is null.</exception>
        </member>
        <member name="P:Ctrip.Duckbill.Diagnostics.Implement.ProcessWrapper.StandardOutputString">
            <summary>
            Gets string that output of the application.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Diagnostics.Implement.ProcessWrapper.Write(System.Char)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Diagnostics.Implement.ProcessWrapper.Start">
            <summary>
            Starts (or reuses) the process resource that is specified by the System.Diagnostics.Process.StartInfo property of this System.Diagnostics.Process component and associates it with the component.
            </summary>
            <returns>True if a process resource is started; false if no new process resource is started (for example, if an existing process is reused).</returns>
            <exception cref="T:System.InvalidOperationException">No file name was specified in the System.Diagnostics.Process component's System.Diagnostics.Process.StartInfo.-or- The System.Diagnostics.ProcessStartInfo.UseShellExecute member of the System.Diagnostics.Process.StartInfo property is true while System.Diagnostics.ProcessStartInfo.RedirectStandardInput, System.Diagnostics.ProcessStartInfo.RedirectStandardOutput, or System.Diagnostics.ProcessStartInfo.RedirectStandardError is true.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">There was an error in opening the associated file.</exception>
            <exception cref="T:System.ObjectDisposedException">The process object has already been disposed.</exception>
        </member>
        <member name="M:Ctrip.Duckbill.Diagnostics.Implement.ProcessWrapper.Kill">
            <summary>
            Kills this instance.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Diagnostics.Implement.ProcessWrapper.Dispose">
            <summary>
            Dispose my resource.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Diagnostics.Implement.StopwatchFactory">
            <summary>
            Stop watch factory.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Diagnostics.Implement.StopwatchFactory.Create">
            <summary>
            Creates a new stop watch.
            </summary>
            <returns>Stop watch.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Diagnostics.Implement.StopwatchWrapper">
            <summary>
            Stop watch wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Diagnostics.Implement.StopwatchWrapper.myStopwatch">
            <summary>
            My stop watch.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Diagnostics.Implement.StopwatchWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Diagnostics.Implement.StopwatchWrapper"/> class.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Diagnostics.Implement.StopwatchWrapper.Elapsed">
            <summary>
            Gets the total elapsed time measured by the current instance.
            </summary>
            <value>A read-only System.TimeSpan representing the total elapsed time measured by the current instance.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Diagnostics.Implement.StopwatchWrapper.ElapsedMilliseconds">
            <summary>
            Gets the total elapsed time measured by the current instance, in milliseconds.
            </summary>
            <value>A read-only long integer representing the total number of milliseconds measured by the current instance.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Diagnostics.Implement.StopwatchWrapper.ElapsedTicks">
            <summary>
            Gets the total elapsed time measured by the current instance, in timer ticks.
            </summary>
            <value>A read-only long integer representing the total number of timer ticks measured by the current instance.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Diagnostics.Implement.StopwatchWrapper.IsRunning">
            <summary>
            Gets a value indicating whether the System.Diagnostics.Stopwatch timer is running.
            </summary>
            <value><c>true</c> if the System.Diagnostics.Stopwatch instance is currently running and measuring elapsed time for an interval; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Ctrip.Duckbill.Diagnostics.Implement.StopwatchWrapper.Reset">
            <summary>
            Stops time interval measurement and resets the elapsed time to zero.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Diagnostics.Implement.StopwatchWrapper.Restart">
            <summary>
            Stops time interval measurement, resets the elapsed time to zero, and starts measuring elapsed time.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Diagnostics.Implement.StopwatchWrapper.Start">
            <summary>
            Starts, or resumes, measuring elapsed time for an interval.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Diagnostics.Implement.StopwatchWrapper.Stop">
            <summary>
            Stops measuring elapsed time for an interval.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Diagnostics.IProcess">
            <summary>
            Process interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Diagnostics.IProcess.StartInfo">
            <summary>
            Gets or sets the properties to pass to the System.Diagnostics.Process.Start() method of the System.Diagnostics.Process.
            </summary>
            <returns>The System.Diagnostics.ProcessStartInfo that represents the data with which to start the process. These arguments include the name of the executable file or document used to start the process.</returns>
            <exception cref="T:System.ArgumentNullException">The value that specifies the System.Diagnostics.Process.StartInfo is null.</exception>
        </member>
        <member name="P:Ctrip.Duckbill.Diagnostics.IProcess.StandardOutputString">
            <summary>
            Gets string that output of the application.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Diagnostics.IProcess.Start">
            <summary>
            Starts (or reuses) the process resource that is specified by the System.Diagnostics.Process.StartInfo property of this System.Diagnostics.Process component and associates it with the component.
            </summary>
            <returns>True if a process resource is started; false if no new process resource is started (for example, if an existing process is reused).</returns>
            <exception cref="T:System.InvalidOperationException">No file name was specified in the System.Diagnostics.Process component's System.Diagnostics.Process.StartInfo.-or- The System.Diagnostics.ProcessStartInfo.UseShellExecute member of the System.Diagnostics.Process.StartInfo property is true while System.Diagnostics.ProcessStartInfo.RedirectStandardInput, System.Diagnostics.ProcessStartInfo.RedirectStandardOutput, or System.Diagnostics.ProcessStartInfo.RedirectStandardError is true.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">There was an error in opening the associated file.</exception>
            <exception cref="T:System.ObjectDisposedException">The process object has already been disposed.</exception>
        </member>
        <member name="M:Ctrip.Duckbill.Diagnostics.IProcess.Kill">
            <summary>
            Kills this instance.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Diagnostics.IProcess.Write(System.Char)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Diagnostics.IProcessFactory">
            <summary>
            Process factory.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Diagnostics.IProcessFactory.CreateProcess">
            <summary>
            Creates the process.
            </summary>
            <returns>IProcess instance.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Diagnostics.IStopwatch">
            <summary>
            Stop watch.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Diagnostics.IStopwatch.Elapsed">
            <summary>
            Gets the total elapsed time measured by the current instance.
            </summary>
            <value>A read-only System.TimeSpan representing the total elapsed time measured by the current instance.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Diagnostics.IStopwatch.ElapsedMilliseconds">
            <summary>
            Gets the total elapsed time measured by the current instance, in milliseconds.
            </summary>
            <value>A read-only long integer representing the total number of milliseconds measured by the current instance.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Diagnostics.IStopwatch.ElapsedTicks">
            <summary>
            Gets the total elapsed time measured by the current instance, in timer ticks.
            </summary>
            <value>A read-only long integer representing the total number of timer ticks measured by the current instance.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Diagnostics.IStopwatch.IsRunning">
            <summary>
            Gets a value indicating whether the System.Diagnostics.Stopwatch timer is running.
            </summary>
            <value><c>true</c> if the System.Diagnostics.Stopwatch instance is currently running and measuring elapsed time for an interval; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Ctrip.Duckbill.Diagnostics.IStopwatch.Reset">
            <summary>
            Stops time interval measurement and resets the elapsed time to zero.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Diagnostics.IStopwatch.Restart">
            <summary>
            Stops time interval measurement, resets the elapsed time to zero, and starts measuring elapsed time.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Diagnostics.IStopwatch.Start">
            <summary>
            Starts, or resumes, measuring elapsed time for an interval.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Diagnostics.IStopwatch.Stop">
            <summary>
            Stops measuring elapsed time for an interval.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Diagnostics.IStopwatchFactory">
            <summary>
            Stop watch factory.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Diagnostics.IStopwatchFactory.Create">
            <summary>
            Creates a new stop watch.
            </summary>
            <returns>Stop watch.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.DuckBillContainer">
            <summary>
            Entry point for the container infrastructure for duckbill Library.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DuckBillContainer.PreloadServiceContainer">
            <summary>
            Preload service container.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.DuckBillContainer.singletonServicesContainer">
            <summary>
            Static singleton services container.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DuckBillContainer.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Ctrip.Duckbill.DuckBillContainer"/> class.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.DuckBillContainer.Current">
            <summary>
            Gets or sets the current container used to resolve objects (for use by the various static factories).
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DuckBillContainer.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">
            An object that specifies the type of service object to get.
            </param>
            <returns>
            A service object of type serviceType.-or- null if there is no service object of type serviceType.
            </returns>
        </member>
        <member name="M:Ctrip.Duckbill.DuckBillContainer.Get``1">
            <summary>
            Get an instance of the given TService.
            </summary>
            <typeparam name="TService">
            Type of service requested.
            </typeparam>
            <returns>
            The requested service instance.
            </returns>
        </member>
        <member name="M:Ctrip.Duckbill.DuckBillContainer.ContainService(System.Type)">
            <summary>
            Check whether the service has been registered in service locator.
            </summary>
            <param name="serviceType">
            Service type.
            </param>
            <returns>
            True if the service has been registered; otherwise false.
            </returns>
        </member>
        <member name="M:Ctrip.Duckbill.DuckBillContainer.GetPreloadService``1">
            <summary>
            Get preload service.
            </summary>
            <typeparam name="TService">
            Type of service.
            </typeparam>
            <returns>
            Service instance.
            </returns>
        </member>
        <member name="M:Ctrip.Duckbill.DuckBillContainer.GetPreloadService(System.Type)">
            <summary>
            Get preload service.
            </summary>
            <param name="serviceType">
            Service type.
            </param>
            <returns>
            Service instance.
            </returns>
        </member>
        <member name="M:Ctrip.Duckbill.DuckBillContainer.SetPreloadService">
            <summary>
            Set preload service.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DuckBillContainer.LoadAssemblies">
            <summary>
            Load assemblies.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DuckBillContainer.ServiceAutoWiring">
            <summary>
            Service auto wiring.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DuckBillContainer.InitializeCurrentServiceLocator">
            <summary>
            Initialize current service locator.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.DuckBillContainer.FilterFrameworkServiceLocator(System.Type)">
            <summary>
            Filter framework service locator.
            </summary>
            <param name="type">
            Type instance.
            </param>
            <returns>
            Whether type is framework service locator.
            </returns>
        </member>
        <member name="M:Ctrip.Duckbill.DuckBillContainer.LogException(System.String)">
            <summary>
            Log message.
            </summary>
            <param name="content">
            Message content.
            </param>
        </member>
        <member name="T:Ctrip.Duckbill.Dynamic.FakeDynamicString">
            <summary>
            Fake dynamic string.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Dynamic.FakeDynamicString.subFakes">
            <summary>
            Sub fakes.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Dynamic.FakeDynamicString.fakeValue">
            <summary>
            The fake value.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Dynamic.FakeDynamicString.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the FakeDynamicString class.
            </summary>
            <param name="fakes">Fake results. Format is PropertyA.PropertyB.PropertyC.....=ResultString. Example "AAA.BBB=Helloworld".</param>
        </member>
        <member name="M:Ctrip.Duckbill.Dynamic.FakeDynamicString.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the System.Dynamic.DynamicObject class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty)  statement, where sampleObject is an instance of the class derived from the System.Dynamic.DynamicObject class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to result.</param>
            <returns>True if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.).</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Email.IEmail">
            <summary>
            Email interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Email.IEmail.OrderID">
            <summary>
            Gets or sets the order identifier.
            </summary>
            <value>The order identifier.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Email.IEmail.SendCode">
            <summary>
            Gets or sets the send code.
            </summary>
            <value>The send code.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Email.IEmail.UID">
            <summary>
            Gets or sets the uid.
            </summary>
            <value>The uid.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Email.IEmail.EID">
            <summary>
            Gets or sets the eid.
            </summary>
            <value>The eid.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Email.IEmail.SenderEmail">
            <summary>
            Gets or sets the sender email.
            </summary>
            <value>The sender email.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Email.IEmail.RecipientEmail">
            <summary>
            Gets or sets the recipient email.
            </summary>
            <value>The recipient email.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Email.IEmail.CCEmail">
            <summary>
            Gets or sets the cc email.
            </summary>
            <value>The cc email.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Email.IEmail.BCCEmail">
            <summary>
            Gets or sets the BCC email.
            </summary>
            <value>The BCC email.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Email.IEmail.Subject">
            <summary>
            Gets or sets subject.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Email.IEmail.SenderName">
            <summary>
            Gets or sets the name of the sender.
            </summary>
            <value>The name of the sender.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Email.IEmail.RecipientName">
            <summary>
            Gets or sets the name of the recipient.
            </summary>
            <value>The name of the recipient.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Email.IEmail.TemplateID">
            <summary>
            Gets or sets template id.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Email.IEmail.Body">
            <summary>
            Gets or sets body.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Email.IEmail.Importance">
            <summary>
            Gets or sets the importance.
            </summary>
            <value>The importance.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Email.IEmail.ContentType">
            <summary>
            Gets or sets the type of the content.
            </summary>
            <value>The type of the content.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Email.IEmail.Charset">
            <summary>
            Gets or sets the charset.
            </summary>
            <value>The charset.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Email.IEmail.DeadlineTime">
            <summary>
            Gets or sets the deadline time.
            </summary>
            <value>The deadline time.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Email.IEmail.ScheduleTime">
            <summary>
            Gets or sets the schedule time.
            </summary>
            <value>The schedule time.</value>
        </member>
        <member name="M:Ctrip.Duckbill.Email.IEmail.Send">
            <summary>
            Send this email.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.EntityMapping.EntityMappingAttribute">
            <summary>
            Entity mapping attribute.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.EntityMappingAttribute.#ctor">
            <summary>
            Initializes a new instance of the EntityMappingAttribute class.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.EntityMappingAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the EntityMappingAttribute class.
            </summary>
            <param name="name">Mapping name.</param>
        </member>
        <member name="P:Ctrip.Duckbill.EntityMapping.EntityMappingAttribute.Name">
            <summary>
            Gets or sets mapping name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.EntityMapping.EntityMappingAttribute.DependentInternalProperty">
            <summary>
            Gets or sets dependent internal property.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.EntityMapping.EntityMappingAttribute.Prefix">
            <summary>
            Gets or sets name prefix.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.EntityMapping.IEntityBuilder">
            <summary>
            Entity builder interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.IEntityBuilder.BuildEntity``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Build entity from data dictionary.
            </summary>
            <typeparam name="TEntity">Type of entity.</typeparam>
            <param name="data">Data dictionary.</param>
            <returns>Entity instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.IEntityBuilder.BuildEntity(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Build entity from data dictionary.
            </summary>
            <param name="entityType">Entity type.</param>
            <param name="data">Data dictionary.</param>
            <returns>Entity instance.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.EntityMapping.Implement.DynamicMethodEntityBuilder">
            <summary>
            Dynaic method implement of entity builder interface.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.EntityMapping.Implement.DynamicMethodEntityBuilder.methods">
            <summary>
            Build methods for types.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.EntityMapping.Implement.DynamicMethodEntityBuilder.BuildObjectFunction">
            <summary>
            Delegate of build object.
            </summary>
            <param name="data">Data dictionary.</param>
            <returns>Object instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.Implement.DynamicMethodEntityBuilder.BuildEntity``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Build entity from data dictionary.
            </summary>
            <typeparam name="TEntity">Type of entity.</typeparam>
            <param name="data">Data dictionary.</param>
            <returns>Entity instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.Implement.DynamicMethodEntityBuilder.BuildEntity(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Build entity from data dictionary.
            </summary>
            <param name="entityType">Entity type.</param>
            <param name="data">Data dictionary.</param>
            <returns>Entity instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.Implement.DynamicMethodEntityBuilder.FormatedData(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Format data.
            </summary>
            <param name="data">Original data.</param>
            <returns>Formatted data.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.Implement.DynamicMethodEntityBuilder.GetBuildObjectFunction(System.Type)">
            <summary>
            Get build object function.
            </summary>
            <param name="type">Type to request.</param>
            <returns>Build object function delegate.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.Implement.DynamicMethodEntityBuilder.GenerateBuildObjectFunction(System.Type)">
            <summary>
            Generate build object function.
            </summary>
            <param name="type">Type to request.</param>
            <returns>Build object function delegate.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.BaseSimpleTypeILBuilder">
            <summary>
            Base simple type il builder.
            </summary>
            <summary>
            Object il builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.BaseSimpleTypeILBuilder.GetValueMethodOfDictionary">
            <summary>
            Dictionary get value method.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.BaseSimpleTypeILBuilder.ContainKeyMethodOfDictionary">
            <summary>
            Dictionary contain key method.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.BaseSimpleTypeILBuilder.BuildIL(System.Reflection.Emit.ILGenerator@,System.Type,System.Reflection.PropertyInfo,System.Reflection.Emit.LocalBuilder,System.String)">
            <summary>
            Build il.
            </summary>
            <param name="il">IL generator.</param>
            <param name="type">Current element type.</param>
            <param name="property">Current property.</param>
            <param name="parentVariable">Parent variable.</param>
            <param name="prefix">Prefix of data field name.</param>
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.BaseSimpleTypeILBuilder.GenerateConvertIL(System.Reflection.Emit.ILGenerator@,System.Reflection.PropertyInfo)">
            <summary>
            Genereate convert IL.
            </summary>
            <param name="generator">Paremeter of IL generator.</param>
            <param name="property">Current property.</param>
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.BaseSimpleTypeILBuilder.GetDataFieldName(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Get data field name.
            </summary>
            <param name="property">Property information.</param>
            <param name="prefix">Prefix of field name.</param>
            <returns>Field name.</returns>   
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.BaseSimpleTypeILBuilder.GetEntityMappingAttributeName(System.Reflection.PropertyInfo)">
            <summary>
            Get entity mapping attribute name.
            </summary>
            <param name="property">Property information.</param>
            <returns>Field name.</returns>   
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.BaseSimpleTypeILBuilder.GetDataMemberAttributeName(System.Reflection.PropertyInfo)">
            <summary>
            Get data member attribute name.
            </summary>
            <param name="property">Property information.</param>
            <returns>Field name.</returns>   
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.BaseSimpleTypeILBuilder.GetEntityMappingAttribute(System.Reflection.PropertyInfo)">
            <summary>
            Gets the entity mapping attribute.
            </summary>
            <param name="property">The property.</param>
            <returns>Entity mapping attribute.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.BaseSimpleTypeILBuilder.GetDataMemberAttribute(System.Reflection.PropertyInfo)">
            <summary>
            Gets the data member attribute.
            </summary>
            <param name="property">The property.</param>
            <returns>Data member attribute.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.BoolILBuilder">
            <summary>
            Bool il builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.BoolILBuilder.ConvertMethod">
            <summary>
            Convert method.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.BoolILBuilder.GenerateConvertIL(System.Reflection.Emit.ILGenerator@,System.Reflection.PropertyInfo)">
            <summary>
            Genereate convert IL.
            </summary>
            <param name="generator">Paremeter of IL generator.</param>
            <param name="property">Current property.</param>
        </member>
        <member name="T:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.DateTimeILBuilder">
            <summary>
            DateTime il builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.DateTimeILBuilder.ConvertMethod">
            <summary>
            Convert method.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.DateTimeILBuilder.GenerateConvertIL(System.Reflection.Emit.ILGenerator@,System.Reflection.PropertyInfo)">
            <summary>
            Genereate convert IL.
            </summary>
            <param name="generator">Paremeter of IL generator.</param>
            <param name="property">Current property.</param>
        </member>
        <member name="T:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.DecimalILBuilder">
            <summary>
            Decimal il builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.DecimalILBuilder.ConvertMethod">
            <summary>
            Convert method.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.DecimalILBuilder.GenerateConvertIL(System.Reflection.Emit.ILGenerator@,System.Reflection.PropertyInfo)">
            <summary>
            Genereate convert IL.
            </summary>
            <param name="generator">Paremeter of IL generator.</param>
            <param name="property">Current property.</param>
        </member>
        <member name="T:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.DoubleILBuilder">
            <summary>
            Double il builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.DoubleILBuilder.ConvertMethod">
            <summary>
            Convert method.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.DoubleILBuilder.GenerateConvertIL(System.Reflection.Emit.ILGenerator@,System.Reflection.PropertyInfo)">
            <summary>
            Genereate convert IL.
            </summary>
            <param name="generator">Paremeter of IL generator.</param>
            <param name="property">Current property.</param>
        </member>
        <member name="T:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.EnumILBuilder">
            <summary>
            Enum il builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.EnumILBuilder.methods">
            <summary>
            Enum convert methods.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.EnumILBuilder.GenerateConvertIL(System.Reflection.Emit.ILGenerator@,System.Reflection.PropertyInfo)">
            <summary>
            Genereate convert IL.
            </summary>
            <param name="generator">Paremeter of IL generator.</param>
            <param name="property">Current property.</param>
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.EnumILBuilder.GetEnumConvertMethod(System.Type)">
            <summary>
            Get enum convert method.
            </summary>
            <param name="enumType">Enum type.</param>
            <returns>Enum convert method.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.EnumILBuilder.GenerateEnumConvertMethod(System.Type)">
            <summary>
            Generate enum convert method.
            </summary>
            <param name="enumType">Enum type.</param>
            <returns>Enum convert method.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.FloatILBuilder">
            <summary>
            Float il builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.FloatILBuilder.convertMethod">
            <summary>
            Convert method.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.FloatILBuilder.GenerateConvertIL(System.Reflection.Emit.ILGenerator@,System.Reflection.PropertyInfo)">
            <summary>
            Generate convert IL.
            </summary>
            <param name="generator">Parameter of IL generator.</param>
            <param name="property">Current property.</param>
        </member>
        <member name="T:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.IILBuilder">
            <summary>
            IL Builder interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.IILBuilder.BuildIL(System.Reflection.Emit.ILGenerator@,System.Type,System.Reflection.PropertyInfo,System.Reflection.Emit.LocalBuilder,System.String)">
            <summary>
            Build il.
            </summary>
            <param name="il">IL generator.</param>
            <param name="type">Current element type.</param>
            <param name="property">Current property.</param>
            <param name="parentVariable">Parent variable.</param>
            <param name="prefix">Prefix of data field name.</param>
        </member>
        <member name="T:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.ILBuilderFactory">
            <summary>
            IL builder factory.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.ILBuilderFactory.ObjectILBuilder">
            <summary>
            Object il builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.ILBuilderFactory.StringILBuilder">
            <summary>
            String il builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.ILBuilderFactory.IntILBuilder">
            <summary>
            Int il builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.ILBuilderFactory.LongILBuilder">
            <summary>
            Long il builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.ILBuilderFactory.DecimalILBuilder">
            <summary>
            Decimal il builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.ILBuilderFactory.FloatILBuilder">
            <summary>
            Float il builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.ILBuilderFactory.DoubleILBuilder">
            <summary>
            Double il builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.ILBuilderFactory.DateTimeILBuilder">
            <summary>
            DateTime il builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.ILBuilderFactory.BoolILBuilder">
            <summary>
            Bool il builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.ILBuilderFactory.EnumILBuilder">
            <summary>
            Enum il builder.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.ILBuilderFactory.CreateILBuilder(System.Type)">
            <summary>
            Create il builder.
            </summary>
            <param name="type">Current element type.</param>
            <returns>IL builder.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.IntILBuilder">
            <summary>
            Int il builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.IntILBuilder.ConvertMethod">
            <summary>
            Convert method.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.IntILBuilder.GenerateConvertIL(System.Reflection.Emit.ILGenerator@,System.Reflection.PropertyInfo)">
            <summary>
            Genereate convert IL.
            </summary>
            <param name="generator">Paremeter of IL generator.</param>
            <param name="property">Current property.</param>
        </member>
        <member name="T:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.LongILBuilder">
            <summary>
            Long il builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.LongILBuilder.ConvertMethod">
            <summary>
            Convert method.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.LongILBuilder.GenerateConvertIL(System.Reflection.Emit.ILGenerator@,System.Reflection.PropertyInfo)">
            <summary>
            Genereate convert IL.
            </summary>
            <param name="generator">Paremeter of IL generator.</param>
            <param name="property">Current property.</param>
        </member>
        <member name="T:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.ObjectILBuilder">
            <summary>
            Object il builder.
            </summary>
            <summary>
            Object il builder.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.ObjectILBuilder.BuildIL(System.Reflection.Emit.ILGenerator@,System.Type,System.Reflection.PropertyInfo,System.Reflection.Emit.LocalBuilder,System.String)">
            <summary>
            Build il.
            </summary>
            <param name="il">IL generator.</param>
            <param name="type">Current element type.</param>
            <param name="property">Current property.</param>
            <param name="parentVariable">Parent variable.</param>
            <param name="prefix">Prefix of data field name.</param>
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.ObjectILBuilder.GetCurrentPrefix(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Get current prefix.
            </summary>
            <param name="currentProperty">Current property.</param>
            <param name="parentPrefix">Parent prefix.</param>
            <returns>Current prefix.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.ObjectILBuilder.Validate(System.Reflection.PropertyInfo)">
            <summary>
            Validate whether need process this property.
            </summary>
            <param name="property">Current property.</param>
            <returns>Validate result.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.ObjectILBuilder.CheckEntityMappingAttribute(System.Reflection.PropertyInfo)">
            <summary>
            Check entity mapping attribute.
            </summary>
            <param name="property">Current property.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.ObjectILBuilder.IsValid(System.Reflection.PropertyInfo)">
            <summary>
            Check whether property is valid(Need generate IL).
            </summary>
            <param name="property">Request property.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.ObjectILBuilder.GetEntityMappingAttribute(System.Reflection.PropertyInfo)">
            <summary>
            Gets the entity mapping attribute.
            </summary>
            <param name="property">The property.</param>
            <returns>Entity mapping attribute.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.ObjectILBuilder.GetIgnoreDataMemberAttribute(System.Reflection.PropertyInfo)">
            <summary>
            Gets the ignore data member attribute.
            </summary>
            <param name="property">The property.</param>
            <returns>Ignore data member attribute.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.StringILBuilder">
            <summary>
            String il builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.StringILBuilder.ConvertMethod">
            <summary>
            Convert method.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.StringILBuilder.TrimMethod">
            <summary>
            Trim method.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.EntityMapping.Implement.ILBuilder.StringILBuilder.GenerateConvertIL(System.Reflection.Emit.ILGenerator@,System.Reflection.PropertyInfo)">
            <summary>
            Genereate convert IL.
            </summary>
            <param name="generator">Paremeter of IL generator.</param>
            <param name="property">Current property.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Extension.DecimalExtension">
            <summary>
            Decimal Extension.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Extension.DecimalExtension.RoundMoney(System.Decimal)">
            <summary>
            Decimal Round.
            </summary>
            <param name="self">Self Number.</param>
            <returns>Decimal number.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Extension.StringExtension">
            <summary>
            String Extension Method.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Extension.StringExtension.SplitToList(System.String)">
            <summary>
            Split To List.
            </summary>
            <param name="str">Input String.</param>
            <returns>Ruturn String List.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extension.StringExtension.ContainsIgnoreCase(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            List IgnoreCase Containes Items.
            </summary>
            <param name="list">Targer List.</param>
            <param name="strInput">Contains Item.</param>
            <returns>Return Containes Input list. </returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extension.StringExtension.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            Equals IngoreCase TrimSpace.
            </summary>
            <param name="a">Input String a.</param>
            <param name="b">Input String b.</param>
            <returns>Return ISEquals.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Extensions.HttpRequestExtension">
            <summary>
            HttpRequest Extension.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.HttpRequestExtension.ToRaw(System.Web.HttpRequest)">
            <summary>
            Dump the raw http request to a string. 
            </summary>
            <param name="request">The <see cref="T:System.Web.HttpRequest"/> that should be dumped.               </param>
            <returns>The raw HTTP request.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.HttpRequestExtension.WriteCustomerIp(System.Web.HttpRequest,System.IO.StringWriter)">
            <summary>
            Writes the customer ip.
            </summary>
            <param name="request">The request.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.HttpRequestExtension.WriteStartLine(System.Web.HttpRequest,System.IO.StringWriter)">
            <summary>
            Write Start Line.
            </summary>
            <param name="request">Http Request.</param>
            <param name="writer">String Writer.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.HttpRequestExtension.WriteHeaders(System.Web.HttpRequest,System.IO.StringWriter)">
            <summary>
            Write Header.
            </summary>
            <param name="request">Http Request.</param>
            <param name="writer">String Writer.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.HttpRequestExtension.WriteBody(System.Web.HttpRequest,System.IO.StringWriter)">
            <summary>
            Write Http Body.
            </summary>
            <param name="request">Http Request.</param>
            <param name="writer">String Writer.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.HttpRequestExtension.NeedRemoveLog(System.String,System.String[])">
            <summary>
            Needs the remove log.
            </summary>
            <param name="formKey">The form key.</param>
            <param name="removeLogKeys">The remove log keys.</param>
            <returns>Is Need Remove Sign.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Extensions.CloneableExtensions">
            <summary>
            Object clone able extensions.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.CloneableExtensions.Clone``1(``0)">
            <summary>
            Convenience method for cloning objects that implement <see cref="T:System.ICloneable"/> explicitly.
            </summary>
            <typeparam name="T">The type of the cloneable object.</typeparam>
            <param name="value">The cloneable object.</param>
            <returns>The result of cloning the <paramref name="value"/>.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Extensions.ObjectConvertExtensions">
            <summary>
            Object convert extensions.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectConvertExtensions.ToNotNullString(System.Object,System.String)">
            <summary>
            Converts current object to string. If current object is null or cannot be converted to string, defaultvalue is returned.
            </summary>
            <param name="me">Current object.</param>
            <param name="defaultvalue">The default value.</param>
            <returns>String value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectConvertExtensions.ToNotNullString(System.Object)">
            <summary>
            Converts current object to string. If current object is null or cannot be converted to the target type, string.Empty is returned.
            </summary>
            <param name="me">Current object.</param>
            <returns>String value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectConvertExtensions.ToChar(System.Object,System.Char)">
            <summary>
            Converts current object to an char. If current object is null or cannot be converted to the target type, default value is returned.
            </summary>
            <param name="me">Current object.</param>
            <param name="defaultvalue">The default value.</param>
            <returns>Int value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectConvertExtensions.ToChar(System.Object)">
            <summary>
            Converts current object to a char. If current object is null or cannot be converted to the target type, default char is returned.
            </summary>
            <param name="me">Current object.</param>
            <returns>Int value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectConvertExtensions.ToByte(System.Object,System.Byte)">
            <summary>
            Converts current object to an byte. If current object is null or cannot be converted to the target type, default value is returned.
            </summary>
            <param name="me">Current object.</param>
            <param name="defaultvalue">The default value.</param>
            <returns>Int value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectConvertExtensions.ToByte(System.Object)">
            <summary>
            Converts current object to a byte. If current object is null or cannot be converted to the target type, default byte is returned.
            </summary>
            <param name="me">Current object.</param>
            <returns>Int value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectConvertExtensions.ToSByte(System.Object,System.SByte)">
            <summary>
            Converts current object to an sbyte. If current object is null or cannot be converted to the target type, default value is returned.
            </summary>
            <param name="me">Current object.</param>
            <param name="defaultvalue">The default value.</param>
            <returns>Int value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectConvertExtensions.ToSByte(System.Object)">
            <summary>
            Converts current object to a sbyte. If current object is null or cannot be converted to the target type, default sbyte is returned.
            </summary>
            <param name="me">Current object.</param>
            <returns>Int value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectConvertExtensions.ToShort(System.Object,System.Int16)">
            <summary>
            Converts current object to an short. If current object is null or cannot be converted to the target type, default value is returned.
            </summary>
            <param name="me">Current object.</param>
            <param name="defaultvalue">The default value.</param>
            <returns>Int value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectConvertExtensions.ToShort(System.Object)">
            <summary>
            Converts current object to a short. If current object is null or cannot be converted to the target type, default short is returned.
            </summary>
            <param name="me">Current object.</param>
            <returns>Int value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectConvertExtensions.ToUShort(System.Object,System.UInt16)">
            <summary>
            Converts current object to an ushort. If current object is null or cannot be converted to the target type, default value is returned.
            </summary>
            <param name="me">Current object.</param>
            <param name="defaultvalue">The default value.</param>
            <returns>Int value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectConvertExtensions.ToUShort(System.Object)">
            <summary>
            Converts current object to a ushort. If current object is null or cannot be converted to the target type, default ushort is returned.
            </summary>
            <param name="me">Current object.</param>
            <returns>Int value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectConvertExtensions.ToInt(System.Object,System.Int32)">
            <summary>
            Converts current object to an int. If current object is null or cannot be converted to the target type, default value is returned.
            </summary>
            <param name="me">Current object.</param>
            <param name="defaultvalue">The default value.</param>
            <returns>Int value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectConvertExtensions.ToInt(System.Object)">
            <summary>
            Converts current object to an int. If current object is null or cannot be converted to the target type, default int is returned.
            </summary>
            <param name="me">Current object.</param>
            <returns>Int value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectConvertExtensions.ToUInt(System.Object,System.UInt32)">
            <summary>
            Converts current object to an uint. If current object is null or cannot be converted to the target type, default value is returned.
            </summary>
            <param name="me">Current object.</param>
            <param name="defaultvalue">The default value.</param>
            <returns>Int value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectConvertExtensions.ToUInt(System.Object)">
            <summary>
            Converts current object to a uint. If current object is null or cannot be converted to the target type, default uint is returned.
            </summary>
            <param name="me">Current object.</param>
            <returns>Int value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectConvertExtensions.ToLong(System.Object,System.Int64)">
            <summary>
            Converts current object to a long. If current object is null or cannot be converted to the target type, default value is returned.
            </summary>
            <param name="me">Current object.</param>
            <param name="defaultvalue">The default value.</param>
            <returns>Long value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectConvertExtensions.ToLong(System.Object)">
            <summary>
            Converts current object to a long. If current object is null or cannot be converted to the target type, default long is returned.
            </summary>
            <param name="me">Current object.</param>
            <returns>Long value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectConvertExtensions.ToULong(System.Object,System.UInt64)">
            <summary>
            Converts current object to an uint. If current object is null or cannot be converted to the target type, default value is returned.
            </summary>
            <param name="me">Current object.</param>
            <param name="defaultvalue">The default value.</param>
            <returns>Int value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectConvertExtensions.ToULong(System.Object)">
            <summary>
            Converts current object to a uint. If current object is null or cannot be converted to the target type, default uint is returned.
            </summary>
            <param name="me">Current object.</param>
            <returns>Int value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectConvertExtensions.ToDecimal(System.Object,System.Decimal)">
            <summary>
            Converts current object to a decimal. If current object is null or cannot be converted to the target type, default value is returned.
            </summary>
            <param name="me">Current object.</param>
            <param name="defaultvalue">The default value.</param>
            <returns>Decimal value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectConvertExtensions.ToDecimal(System.Object)">
            <summary>
            Converts current object to a decimal. If current object is null or cannot be converted to the target type, default decimal is returned.
            </summary>
            <param name="me">Current object.</param>
            <returns>Decimal value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectConvertExtensions.ToFloat(System.Object,System.Single)">
            <summary>
            Converts current object to a float. If current object is null or cannot be converted to the target type, default value is returned.
            </summary>
            <param name="me">Current object.</param>
            <param name="defaultvalue">The default value.</param>
            <returns>Long value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectConvertExtensions.ToFloat(System.Object)">
            <summary>
            Converts current object to a float. If current object is null or cannot be converted to the target type, default float is returned.
            </summary>
            <param name="me">Current object.</param>
            <returns>Long value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectConvertExtensions.ToDouble(System.Object,System.Double)">
            <summary>
            Converts current object to a double. If current object is null or cannot be converted to the target type, default value is returned.
            </summary>
            <param name="me">Current object.</param>
            <param name="defaultvalue">The default value.</param>
            <returns>Long value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectConvertExtensions.ToDouble(System.Object)">
            <summary>
            Converts current object to a double. If current object is null or cannot be converted to the target type, default double is returned.
            </summary>
            <param name="me">Current object.</param>
            <returns>Long value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectConvertExtensions.ToDateTime(System.Object,System.DateTime)">
            <summary>
            Converts current object to string, then parse string to a DateTime. If current object is null or cannot be converted to the target type, default value is returned.
            </summary>
            <param name="me">Current object.</param>
            <param name="defaultvalue">The default value.</param>
            <returns>DateTime value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectConvertExtensions.ToDateTime(System.Object)">
            <summary>
            Converts current object to string, then parse string to a DateTime. If current object is null or cannot be converted to the target type, default datetime is returned.
            </summary>
            <param name="me">Current object.</param>
            <returns>DateTime value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectConvertExtensions.ToBool(System.Object,System.Boolean)">
            <summary>
            Converts current object to a bool. If current object is null or cannot be converted to the target type, default value is returned.
            </summary>
            <param name="me">Current object.</param>
            <param name="defaultvalue">The default value.</param>
            <returns>Bool value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectConvertExtensions.ToBool(System.Object)">
            <summary>
            Converts current object to a bool. If current object is null or cannot be converted to the target type, false is returned.
            </summary>
            <param name="me">Current object.</param>
            <returns>Bool value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectConvertExtensions.ToEnum``1(System.Object,``0)">
            <summary>
            Converts current object to an enum. If current object is null or cannot be converted to the target type, default value is returned.
            </summary>
            <typeparam name="TEnum">Type of enum.</typeparam>
            <param name="me">Current object.</param>
            <param name="defaultvalue">Default value.</param>
            <returns>Enum value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectConvertExtensions.ToEnum``1(System.Object)">
            <summary>
            Converts current object to an enum. If current object is null or cannot be converted to the target type, default value is returned.
            </summary>
            <typeparam name="TEnum">Type of enum.</typeparam>
            <param name="me">Current object.</param>
            <returns>Enum value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectConvertExtensions.To``1(System.Object)">
            <summary>
            Converts current object to another type of object.
            </summary>
            <typeparam name="TDestinationClass">Type of destination class.</typeparam>
            <param name="me">Current object.</param>
            <returns>Destination class instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectConvertExtensions.To``1(System.Object,System.Func{System.Object,``0})">
            <summary>
            Converts current object to another type of object.
            </summary>
            <typeparam name="TDestinationClass">Type of destination class.</typeparam>
            <param name="me">Current object.</param>
            <param name="converter">Delegate converter.</param>
            <returns>Destination class instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectConvertExtensions.To``1(System.Object,System.Func{``0})">
            <summary>
            Converts current object to another type of object,If current object is null return target type.
            </summary>
            <typeparam name="TDestinationClass">Type of destination class.</typeparam>
            <param name="me">Current object.</param>
            <param name="converter">Delegate converter.</param>
            <returns>Destination class instance.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Extensions.ObjectEnumerableExtensions">
            <summary>
            Object enumerable extensions.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectEnumerableExtensions.IsEnumerable(System.Object)">
            <summary>
            Check whether current object is enumerable.
            </summary>
            <param name="me">Current object.</param>
            <returns>Whether current object is enumerable.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectEnumerableExtensions.IsNumeric(System.Object)">
            <summary>
            Check whether current object is numeric.
            </summary>
            <param name="me">Current object.</param>
            <returns>Whether current object is numeric.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectEnumerableExtensions.EnumerableAny(System.Object)">
            <summary>
            Check whether current object is a enumerable and contains any elements.
            </summary>
            <param name="me">Current object.</param>
            <returns>Whether current object is a enumerable and contains any elements.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Extensions.ObjectEqualsExtensions">
            <summary>
            Object equals extension.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectEqualsExtensions.ValueEquals``1(``0,``0)">
            <summary>
            Check whether object values (include internal object values) are equals with target object.
            </summary>
            <param name="me">Current object.</param>
            <param name="target">Target object.</param>
            <typeparam name="TCurrent">Current type.</typeparam>
            <returns>Whether object values (include internal object values) are equal with target object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectEqualsExtensions.ValueEquals``1(``0,``0,System.String@)">
            <summary>
            Check whether object values (include internal object values) are equals with target object.
            </summary>
            <param name="me">Current object.</param>
            <param name="target">Target object.</param>
            <param name="detail">Detail information.</param>
            <typeparam name="TCurrent">Current type.</typeparam>
            <returns>Whether object values (include internal object values) are equal with target object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectEqualsExtensions.ObjectValueEquals(System.Object,System.Object,System.String@)">
            <summary>
            Check whether object values (include internal object values) are equals with target object.
            </summary>
            <param name="me">Current object.</param>
            <param name="target">Target object.</param>
            <param name="detail">Detail information.</param>
            <returns>Whether object values (include internal object values) are equal with target object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectEqualsExtensions.ValueEqualsWithDetailMessage(System.UInt64,System.UInt64,System.String@)">
            <summary>
            Check whether current ulong is equal to target and get detail message.
            </summary>
            <param name="me">Current ulong.</param>
            <param name="target">Target ulong.</param>
            <param name="detailMessage">Detail message.</param>
            <returns>True current ulong is equal to target. False not is not equal.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectEqualsExtensions.ValueEqualsWithDetailMessage(System.String,System.String,System.String@)">
            <summary>
            Check whether current string is equal to target and get detail message.
            </summary>
            <param name="me">Current string.</param>
            <param name="target">Target string.</param>
            <param name="detailMessage">Detail message.</param>
            <returns>True current string is equal to target. False not is not equal.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectEqualsExtensions.ValueEqualsWithDetailMessage(System.Int32,System.Int32,System.String@)">
            <summary>
            Check whether current int is equal to target and get detail message.
            </summary>
            <param name="me">Current int.</param>
            <param name="target">Target int.</param>
            <param name="detailMessage">Detail message.</param>
            <returns>True current int is equal to target. False not is not equal.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectEqualsExtensions.ValueEqualsWithDetailMessage(System.Int64,System.Int64,System.String@)">
            <summary>
            Check whether current long is equal to target and get detail message.
            </summary>
            <param name="me">Current long.</param>
            <param name="target">Target long.</param>
            <param name="detailMessage">Detail message.</param>
            <returns>True current long is equal to target. False not is not equal.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectEqualsExtensions.ValueEqualsWithDetailMessage(System.Boolean,System.Boolean,System.String@)">
            <summary>
            Check whether current bool is equal to target and get detail message.
            </summary>
            <param name="me">Current bool.</param>
            <param name="target">Target bool.</param>
            <param name="detailMessage">Detail message.</param>
            <returns>True current bool is equal to target. False not is not equal.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectEqualsExtensions.ValueEqualsWithDetailMessage(System.Double,System.Double,System.String@)">
            <summary>
            Check whether current double is equal to target and get detail message.
            </summary>
            <param name="me">Current double.</param>
            <param name="target">Target double.</param>
            <param name="detailMessage">Detail message.</param>
            <returns>True current double is equal to target. False not is not equal.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectEqualsExtensions.ValueEqualsWithDetailMessage(System.DateTime,System.DateTime,System.String@)">
            <summary>
            Check whether current DateTime is equal to target and get detail message.
            </summary>
            <param name="me">Current DateTime.</param>
            <param name="target">Target DateTime.</param>
            <param name="detailMessage">Detail message.</param>
            <returns>True current DateTime is equal to target. False not is not equal.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectEqualsExtensions.ValueEqualsWithDetailMessage(System.Single,System.Single,System.String@)">
            <summary>
            Check whether current float is equal to target and get detail message.
            </summary>
            <param name="me">Current float.</param>
            <param name="target">Target float.</param>
            <param name="detailMessage">Detail message.</param>
            <returns>True current float is equal to target. False not is not equal.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectEqualsExtensions.ValueEqualsWithDetailMessage(System.Decimal,System.Decimal,System.String@)">
            <summary>
            Check whether current decimal is equal to target and get detail message.
            </summary>
            <param name="me">Current decimal.</param>
            <param name="target">Target decimal.</param>
            <param name="detailMessage">Detail message.</param>
            <returns>True current decimal is equal to target. False not is not equal.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectEqualsExtensions.ValueEqualsWithDetailMessage(System.Enum,System.Enum,System.String@)">
            <summary>
            Check whether current enum is equal to target and get detail message.
            </summary>
            <param name="me">Current enum.</param>
            <param name="target">Target enum.</param>
            <param name="detailMessage">Detail message.</param>
            <returns>True current enum is equal to target. False not is not equal.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectEqualsExtensions.ValueEqualsWithDetailMessage(System.TimeSpan,System.TimeSpan,System.String@)">
            <summary>
            Check whether current time span is equal to target and get detail message.
            </summary>
            <param name="me">Current time span.</param>
            <param name="target">Target time span.</param>
            <param name="detailMessage">Detail message.</param>
            <returns>True current time span is equal to target. False not is not equal.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectEqualsExtensions.NullEqualsWithDetialMessage(System.Object,System.Object,System.String@)">
            <summary>
            Check whether current object is equals to target in null situation.
            </summary>
            <param name="me">Current object.</param>
            <param name="target">Target object.</param>
            <param name="detailMessage">Detail message.</param>
            <returns>True current object and target object are all null or all not null. False current object is not equal to target in null situation.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Extensions.ObjectEqualsExtensions.NullEqualsWithDetialMessage(System.Object,System.Object,Ctrip.Duckbill.CollectionCompareOption,System.String@)">
            <summary>
            Check whether current object is equals to target in null situation.
            </summary>
            <param name="me">Current object.</param>
            <param name="target">Target object.</param>
            <param name="collectionCompareOption">Collection compare option.</param>
            <param name="detailMessage">Detail message.</param>
            <returns>True current object and target object are all null or all not null. False current object is not equal to target in null situation.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Globalization.ICultureRepository">
            <summary>
            Culture information repository.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Globalization.ICultureRepository.GetCultureInfo(System.String)">
            <summary>
            Gets the culture information.
            </summary>
            <param name="name">The culture name.</param>
            <returns>Culture information.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Globalization.Implement.CultureRepository">
            <summary>
            Culture repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Globalization.Implement.CultureRepository.cultureData">
            <summary>
            Culture information data.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Globalization.Implement.CultureRepository.GetCultureInfo(System.String)">
            <summary>
            Gets the culture information.
            </summary>
            <param name="name">The culture name.</param>
            <returns>Culture information.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Globalization.Implement.CultureRepository.GenerateCultureInfo(System.String)">
            <summary>
            Generates the culture information.
            </summary>
            <param name="name">The culture name.</param>
            <returns>Culture information.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.ICaseInsensitiveStringEqualityComparer">
            <summary>
            Case insensitive string equality comparer.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.ICommonAttribute">
            <summary>
            Common attribute interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.ICommonAttribute.Name">
            <summary>
            Gets or sets default setting item field.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.ICommonAttribute.Value">
            <summary>
            Gets or sets default setting item value.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.ICurrentAppDomain">
            <summary>
            Current app domain interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.ICurrentAppDomain.BaseDirectory">
            <summary>
            Gets base directory.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.ICurrentAppDomain.DynamicDirectory">
            <summary>
            Gets dynamic directory.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.ICurrentAppDomain.GetDomainAssemblies">
            <summary>
            Get appdomain assemblies.
            </summary>
            <returns>Assembly collection.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.ICurrentAppDomain.AddAssemblyResolve(System.ResolveEventHandler)">
            <summary>
            Add assembly resolve handler.
            </summary>
            <param name="handler">Resolve event handler.</param>
        </member>
        <member name="T:Ctrip.Duckbill.ICurrentEnvironment">
            <summary>
            Current environment interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.ICurrentEnvironment.MachineName">
            <summary>
            Gets current machine name.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.ICurrentEnvironment.GetVariable(System.String)">
            <summary>
            Gets the variable.
            </summary>
            <param name="variable">The variable.</param>
            <returns>Variable value.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.IGuidFactory">
            <summary>
            Guid interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IGuidFactory.Create">
            <summary>
            Create guid.
            </summary>
            <returns>Guid instance.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.IMoneyFormatter">
            <summary>
            Money formatter interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IMoneyFormatter.FormatMoneyWithSign(System.Decimal)">
            <summary>
            Format money.
            </summary>
            <param name="money">Amount of the money.</param>
            <returns>Formatted money.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Implement.CaseInsensitiveStringEqualityComparer">
            <summary>
            Case insensitive string equality comparer.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.CaseInsensitiveStringEqualityComparer.Equals(System.String,System.String)">
            <summary>
            Determines whether the specified object instances are considered equal.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>True if the objects are considered equal; otherwise, false. If both objA and objB are null, the method returns true.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.CaseInsensitiveStringEqualityComparer.GetHashCode(System.String)">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <param name="obj">Current object.</param>
            <returns>A hash code for the current Object.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Implement.CommonAttribute">
            <summary>
            Default route setting item.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Implement.CommonAttribute.Name">
            <summary>
            Gets or sets default setting item field.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Implement.CommonAttribute.Value">
            <summary>
            Gets or sets default setting item value.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Implement.CurrentAppDomain">
            <summary>
            Default app domain.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.CurrentAppDomain.current">
            <summary>
            Current app domain.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Implement.CurrentAppDomain.BaseDirectory">
            <summary>
            Gets base directory.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Implement.CurrentAppDomain.DynamicDirectory">
            <summary>
            Gets dynamic directory.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.CurrentAppDomain.GetDomainAssemblies">
            <summary>
            Get appdomain assemblies.
            </summary>
            <returns>Assembly collection.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.CurrentAppDomain.AddAssemblyResolve(System.ResolveEventHandler)">
            <summary>
            Add assembly resolve handler.
            </summary>
            <param name="handler">Resolve event handler.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Implement.DefaultCurrentEnvironment">
            <summary>
            Default current enviroment.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Implement.DefaultCurrentEnvironment.MachineName">
            <summary>
            Gets current maching name.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.DefaultCurrentEnvironment.GetVariable(System.String)">
            <summary>
            Gets the variable.
            </summary>
            <param name="variable">The variable.</param>
            <returns>Variable value.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Implement.DefaultGuidFactory">
            <summary>
            Default guid factory.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.DefaultGuidFactory.Create">
            <summary>
            Create guid.
            </summary>
            <returns>Guid instance.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Implement.DefaultMoneyFormatter">
            <summary>
            Default implement of money formatter.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.DefaultMoneyFormatter.formatter">
            <summary>
            Number formatter.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.DefaultMoneyFormatter.FormatMoneyWithSign(System.Decimal)">
            <summary>
            Format money.
            </summary>
            <param name="money">Amount of the money.</param>
            <returns>Formatted money.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.DefaultMoneyFormatter.GenerateUSAMoneyFormatter">
            <summary>
            Generate usa money formatter.
            </summary>
            <returns>USA money formatter.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Implement.DefaultRegex">
            <summary>
            Default implement of regex.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.DefaultRegex.regexes">
            <summary>
            Existed regexes.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.DefaultRegex.IsMatch(System.String,System.String)">
            <summary>
            Indicates whether the specified regular expression finds a match in the specified input string.
            </summary>
            <param name="input">The string to search for a match. </param>
            <param name="pattern">The regular expression pattern to match. </param>
            <returns>True if the regular expression finds a match; otherwise, false.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.DefaultRegex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Indicates whether the specified regular expression finds a match in the specified input string, using the specified matching options.
            </summary>
            <param name="input">The string to search for a match. </param>
            <param name="pattern">The regular expression pattern to match. </param>
            <param name="option">A bitwise combination of the enumeration values that provide options for matching. </param>
            <returns>True if the regular expression finds a match; otherwise, false.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.DefaultRegex.Replace(System.String,System.String,System.String)">
            <summary>
            In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string.
            </summary>
            <param name="input">The string to search for a match. </param>
            <param name="pattern">The regular expression pattern to match. </param>
            <param name="replacement">The replacement string. </param>
            <returns>A new string that is identical to the input string, except that the replacement string takes the place of each matched string.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.DefaultRegex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string. Specified options modify the matching operation.
            </summary>
            <param name="input">The string to search for a match. </param>
            <param name="pattern">The regular expression pattern to match. </param>
            <param name="replacement">The replacement string. </param>
            <param name="option">A bitwise combination of the enumeration values that provide options for matching. </param>
            <returns>A new string that is identical to the input string, except that the replacement string takes the place of each matched string.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.DefaultRegex.Match(System.String,System.String)">
            <summary>
            Searches the specified input string for the first occurrence of the specified regular expression.
            </summary>
            <param name="input">The string to search for a match. </param>
            <param name="pattern">The regular expression pattern to match. </param>
            <returns>An object that contains information about the match.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.DefaultRegex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Searches the input string for the first occurrence of the specified regular expression, using the specified matching options.
            </summary>
            <param name="input">The string to search for a match. </param>
            <param name="pattern">The regular expression pattern to match. </param>
            <param name="option">A bitwise combination of the enumeration values that provide options for matching. </param>
            <returns>An object that contains information about the match.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.DefaultRegex.Matches(System.String,System.String)">
            <summary>
            Searches the specified input string for all occurrences of a specified regular expression.
            </summary>
            <param name="input">The string to search for a match. </param>
            <param name="pattern">The regular expression pattern to match. </param>
            <returns>A collection of the Match objects found by the search.If no matches are found, the method returns an empty collection object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.DefaultRegex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Searches the specified input string for all occurrences of a specified regular expression, using the specified matching options.
            </summary>
            <param name="input">The string to search for a match. </param>
            <param name="pattern">The regular expression pattern to match. </param>
            <param name="option">A bitwise combination of the enumeration values that provide options for matching. </param>
            <returns>A collection of the Match objects found by the search.If no matches are found, the method returns an empty collection object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.DefaultRegex.GetOrGenerateRegex(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Get or generate regex.
            </summary>
            <param name="pattern">The regular expression pattern to match. </param>
            <param name="option">A bitwise combination of the enumeration values that provide options for matching. </param>
            <returns>Regex instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.DefaultRegex.GenerateRegex(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Generate regex.
            </summary>
            <param name="pattern">The regular expression pattern to match. </param>
            <param name="option">A bitwise combination of the enumeration values that provide options for matching. </param>
            <returns>Regex instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.DefaultRegex.GetRegexKey(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Get key.
            </summary>
            <param name="pattern">The regular expression pattern to match. </param>
            <param name="option">A bitwise combination of the enumeration values that provide options for matching. </param>
            <returns>Regex key.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Implement.DynamicILObjectConverter">
            <summary>
            Dynamic il object converter implement.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.DynamicILObjectConverter.methods">
            <summary>
            Build methods for types.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Implement.DynamicILObjectConverter.ConvertFunction">
            <summary>
            Delegate of build object.
            </summary>
            <param name="original">Original object.</param>
            <returns>Object instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.DynamicILObjectConverter.ConvertTo``1(System.Object)">
            <summary>
            Convert original object to destination object.
            </summary>
            <typeparam name="TDestination">Destination object type.</typeparam>
            <param name="original">Original object.</param>
            <returns>Destination object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.DynamicILObjectConverter.GetKey(System.Type,System.Type)">
            <summary>
            Get key.
            </summary>
            <param name="original">Original type.</param>
            <param name="destination">Destination type.</param>
            <returns>Function key.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.DynamicILObjectConverter.GetConvertFunction(System.Type,System.Type)">
            <summary>
            Get convert function.
            </summary>
            <param name="original">Original type.</param>
            <param name="destination">Destination type.</param>
            <returns>Convert function delegate.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.DynamicILObjectConverter.GenerateBuildObjectFunction(System.String,System.Type,System.Type)">
            <summary>
            Generate convert function.
            </summary>
            <param name="key">Function key.</param>
            <param name="original">Original type.</param>
            <param name="destination">Destination type.</param>
            <returns>Build object function delegate.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Implement.ILBuilder.ClassArrayPropertyILBuilder">
            <summary>
            Class array property il builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.ClassArrayPropertyILBuilder.OriginalProperty">
            <summary>
            Original property.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.ClassArrayPropertyILBuilder.DestinationProperty">
            <summary>
            Destination property.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.ClassArrayPropertyILBuilder.Original">
            <summary>
            Original variable.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.ClassArrayPropertyILBuilder.Destination">
            <summary>
            Destination variable.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.ClassArrayPropertyILBuilder.OriginalPropertyType">
            <summary>
            Original type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.ClassArrayPropertyILBuilder.DestinationPropertyType">
            <summary>
            Destination type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.ClassArrayPropertyILBuilder.OriginalPropertyElementType">
            <summary>
            Original element type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.ClassArrayPropertyILBuilder.DestinationPropertyElementType">
            <summary>
            Destination element type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.ClassArrayPropertyILBuilder.CloneMethod">
            <summary>
            Convert method.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.ILBuilder.ClassArrayPropertyILBuilder.#ctor(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Initializes a new instance of the ClassArrayPropertyILBuilder class.
            </summary>
            <param name="originalProperty">Original property.</param>
            <param name="destinationProperty">Destination property.</param>
            <param name="originalVariable">Original variable.</param>
            <param name="destinationVariable">Destination variable.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.ILBuilder.ClassArrayPropertyILBuilder.BuildIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Build il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Implement.ILBuilder.ClassListPropertyILBuilder">
            <summary>
            Class list property il builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.ClassListPropertyILBuilder.OriginalProperty">
            <summary>
            Original property.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.ClassListPropertyILBuilder.DestinationProperty">
            <summary>
            Destination property.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.ClassListPropertyILBuilder.Original">
            <summary>
            Original variable.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.ClassListPropertyILBuilder.Destination">
            <summary>
            Destination variable.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.ClassListPropertyILBuilder.OriginalPropertyType">
            <summary>
            Original type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.ClassListPropertyILBuilder.DestinationPropertyType">
            <summary>
            Destination type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.ClassListPropertyILBuilder.OriginalPropertyElementType">
            <summary>
            Original element type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.ClassListPropertyILBuilder.DestinationPropertyElementType">
            <summary>
            Destination element type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.ClassListPropertyILBuilder.CloneMethod">
            <summary>
            Convert method.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.ILBuilder.ClassListPropertyILBuilder.#ctor(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Initializes a new instance of the ClassListPropertyILBuilder class.
            </summary>
            <param name="originalProperty">Original property.</param>
            <param name="destinationProperty">Destination property.</param>
            <param name="originalVariable">Original variable.</param>
            <param name="destinationVariable">Destination variable.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.ILBuilder.ClassListPropertyILBuilder.BuildIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Build il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Implement.ILBuilder.ClassPropertyILBuilder">
            <summary>
            Class property il builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.ClassPropertyILBuilder.OriginalProperty">
            <summary>
            Original property.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.ClassPropertyILBuilder.DestinationProperty">
            <summary>
            Destination property.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.ClassPropertyILBuilder.Original">
            <summary>
            Original variable.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.ClassPropertyILBuilder.Destination">
            <summary>
            Destination variable.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.ILBuilder.ClassPropertyILBuilder.#ctor(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Initializes a new instance of the ClassPropertyILBuilder class.
            </summary>
            <param name="originalProperty">Original property.</param>
            <param name="destinationProperty">Destination property.</param>
            <param name="originalVariable">Original variable.</param>
            <param name="destinationVariable">Destination variable.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.ILBuilder.ClassPropertyILBuilder.BuildIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Build il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Implement.ILBuilder.ClassRootILBuilder">
            <summary>
            Class root il builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.ClassRootILBuilder.originalType">
            <summary>
            Original object type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.ClassRootILBuilder.destinationType">
            <summary>
            Destination object type.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.ILBuilder.ClassRootILBuilder.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the ClassRootILBuilder class.
            </summary>
            <param name="original">Original type.</param>
            <param name="destination">Destination type.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.ILBuilder.ClassRootILBuilder.BuildIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Build il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Implement.ILBuilder.IILBuilder">
            <summary>
            IL Builder interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.ILBuilder.IILBuilder.BuildIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Build il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Implement.ILBuilder.ILBuilderFactory">
            <summary>
            IL builder factory.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.ILBuilder.ILBuilderFactory.CreateILBuilder(System.Type,System.Type)">
            <summary>
            Create il builder.
            </summary>
            <param name="originalType">Original type.</param>
            <param name="destinationType">Destination type.</param>
            <returns>IL builder.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.ILBuilder.ILBuilderFactory.CreateILBuilder(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Create il builder.
            </summary>
            <param name="originalProperty">Original property.</param>
            <param name="destinationProperty">Destination property.</param>
            <param name="originalVarialbe">Original variable.</param>
            <param name="destinationVariable">Destination variable.</param>
            <returns>IL builder.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Implement.ILBuilder.SimpleArrayPropertyILBuilder">
            <summary>
            Simple array property il builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.SimpleArrayPropertyILBuilder.OriginalProperty">
            <summary>
            Original property.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.SimpleArrayPropertyILBuilder.DestinationProperty">
            <summary>
            Destination property.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.SimpleArrayPropertyILBuilder.Original">
            <summary>
            Original variable.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.SimpleArrayPropertyILBuilder.Destination">
            <summary>
            Destination variable.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.SimpleArrayPropertyILBuilder.OriginalPropertyType">
            <summary>
            Original type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.SimpleArrayPropertyILBuilder.DestinationPropertyType">
            <summary>
            Destination type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.SimpleArrayPropertyILBuilder.OriginalPropertyElementType">
            <summary>
            Original element type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.SimpleArrayPropertyILBuilder.DestinationPropertyElementType">
            <summary>
            Destination element type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.SimpleArrayPropertyILBuilder.CloneMethod">
            <summary>
            Convert method.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.ILBuilder.SimpleArrayPropertyILBuilder.#ctor(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Initializes a new instance of the SimpleArrayPropertyILBuilder class.
            </summary>
            <param name="originalProperty">Original property.</param>
            <param name="destinationProperty">Destination property.</param>
            <param name="originalVariable">Original variable.</param>
            <param name="destinationVariable">Destination variable.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.ILBuilder.SimpleArrayPropertyILBuilder.BuildIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Build il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.ILBuilder.SimpleArrayPropertyILBuilder.GetAndSetTypeEqualPropertyValue(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Get and set type equal propery value.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.ILBuilder.SimpleArrayPropertyILBuilder.GetAndSetTypeNotEqualPropertyValue(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Get and set type not equal property value.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Implement.ILBuilder.SimpleListPropertyILBuilder">
            <summary>
            Simple list property il builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.SimpleListPropertyILBuilder.OriginalProperty">
            <summary>
            Original property.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.SimpleListPropertyILBuilder.DestinationProperty">
            <summary>
            Destination property.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.SimpleListPropertyILBuilder.Original">
            <summary>
            Original variable.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.SimpleListPropertyILBuilder.Destination">
            <summary>
            Destination variable.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.SimpleListPropertyILBuilder.OriginalPropertyType">
            <summary>
            Original type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.SimpleListPropertyILBuilder.DestinationPropertyType">
            <summary>
            Destination type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.SimpleListPropertyILBuilder.OriginalPropertyElementType">
            <summary>
            Original element type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.SimpleListPropertyILBuilder.DestinationPropertyElementType">
            <summary>
            Destination element type.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.ILBuilder.SimpleListPropertyILBuilder.#ctor(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Initializes a new instance of the SimpleListPropertyILBuilder class.
            </summary>
            <param name="originalProperty">Original property.</param>
            <param name="destinationProperty">Destination property.</param>
            <param name="originalVariable">Original variable.</param>
            <param name="destinationVariable">Destination variable.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.ILBuilder.SimpleListPropertyILBuilder.BuildIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Build il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.ILBuilder.SimpleListPropertyILBuilder.GetAndSetTypeEqualPropertyValue(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Get and set type equal propery value.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.ILBuilder.SimpleListPropertyILBuilder.GetAndSetTypeNotEqualPropertyValue(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Get and set type not equal property value.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Implement.ILBuilder.SimplePropertyILBuilder">
            <summary>
            Simple property il builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.SimplePropertyILBuilder.OriginalProperty">
            <summary>
            Original property.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.SimplePropertyILBuilder.DestinationProperty">
            <summary>
            Destination property.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.SimplePropertyILBuilder.Original">
            <summary>
            Original variable.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.SimplePropertyILBuilder.Destination">
            <summary>
            Destination variable.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.SimplePropertyILBuilder.OriginalType">
            <summary>
            Original type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Implement.ILBuilder.SimplePropertyILBuilder.DestinationType">
            <summary>
            Destination type.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.ILBuilder.SimplePropertyILBuilder.#ctor(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Initializes a new instance of the SimplePropertyILBuilder class.
            </summary>
            <param name="originalProperty">Original property.</param>
            <param name="destinationProperty">Destination property.</param>
            <param name="originalVariable">Original variable.</param>
            <param name="destinationVariable">Destination variable.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.ILBuilder.SimplePropertyILBuilder.BuildIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Build il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.ILBuilder.SimplePropertyILBuilder.GetAndSetPropertyValue(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Get property value.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.ILBuilder.SimplePropertyILBuilder.GetAndSetTypeEqualPropertyValue(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Get and set type equal propery value.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.ILBuilder.SimplePropertyILBuilder.GetAndSetTypeNotEqualPropertyValue(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Get and set type not equal property value.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Implement.ILBuilder.Utility">
            <summary>
            Class property utility.
            </summary>
            <summary>
            Class property utility.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.ILBuilder.Utility.IsValid(System.Reflection.PropertyInfo)">
            <summary>
            Check whether property is valid(Need generate IL).
            </summary>
            <param name="property">Request property.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.ILBuilder.Utility.GetPropertyInOriginalType(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo[])">
            <summary>
            Get property in original type.
            </summary>
            <param name="propertyInDestinationType">Property in destination type.</param>
            <param name="originalTypeProperties">Original type properties.</param>
            <returns>Property in original type.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.ILBuilder.Utility.IsSimpleType(System.Type)">
            <summary>
            Check whether type is simple type.
            </summary>
            <param name="type">Type defined.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.ILBuilder.Utility.MatchProperty(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
            <summary>
            Match property type.
            </summary>
            <param name="propertyInOriginalType">Property in original type.</param>
            <param name="propertyInDestinationType">Property in destination type.</param>
            <returns>Match result.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.ILBuilder.Utility.IsIgnore(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the specified property is ignore.
            </summary>
            <param name="property">The property.</param>
            <returns><c>true</c> if the specified property is ignore; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.ILBuilder.Utility.GetConvertMappingAttribute(System.Reflection.PropertyInfo)">
            <summary>
            Gets the convert mapping attribute.
            </summary>
            <param name="property">The property.</param>
            <returns>Convert mapping attribute.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Implement.Random">
            <summary>
            Thales random extension.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.Random.#ctor">
            <summary>
            Initializes a new instance of the Random class.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.Random.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Random class.
            </summary>
            <param name="seed">Random seed.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.Random.GetRandomSeed">
            <summary>
            Get random seed.
            </summary>
            <returns>Random seed.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Implement.StaticNow">
            <summary>
            Static now.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Implement.StaticNow.DateTime">
            <summary>
            Gets date time now.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Implement.StaticNow.DateTimeOffset">
            <summary>
            Gets date time off set now.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Implement.VirtualPathHelper">
            <summary>
            Virtual path helper.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.VirtualPathHelper.VirtualPathEquals(System.String,System.String)">
            <summary>
            Check whether virtual path are equals.
            </summary>
            <param name="pathA">Path A.</param>
            <param name="pathB">Path B.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.VirtualPathHelper.GetParentVirtualPath(System.String)">
            <summary>
            Get parent virtual path. The view file without the extensions is a level.
            </summary>
            <param name="path">Requested path.</param>
            <returns>Parent path.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Implement.VirtualPathHelper.GetPathLevels(System.String)">
            <summary>
            Gets path levels.
            </summary>
            <param name="path">Parameter of path.</param>
            <returns>Path levels.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.ComponentModel.Implement.DefaultObjectComponentModelUtility">
            <summary>
            Default object component model utility.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.ComponentModel.Implement.DefaultObjectComponentModelUtility.typePropertyDescriptors">
            <summary>
            Type property descriptors.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.ComponentModel.Implement.DefaultObjectComponentModelUtility.GetPropertyDescriptors(System.Object)">
            <summary>
            Get object property descriptors.
            </summary>
            <param name="obj">Requested object.</param>
            <returns>Object property descriptors.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.ComponentModel.Implement.DefaultObjectComponentModelUtility.GeneratePropertyDescriptors(System.Type)">
            <summary>
            Generate type property descriptors.
            </summary>
            <param name="type">Requested type.</param>
            <returns>Type property descriptors.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.ComponentModel.IObjectComponentModelUtility">
            <summary>
            Object reflection utility interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.ComponentModel.IObjectComponentModelUtility.GetPropertyDescriptors(System.Object)">
            <summary>
            Get object property descriptors.
            </summary>
            <param name="obj">Requested object.</param>
            <returns>Object property descriptors.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Objects.Implement.ILBuilder.EnumerableTypeWrapper.ArrayTypeWrapper">
            <summary>
            Array type wrapper.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.EnumerableTypeWrapper.ArrayTypeWrapper.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the ArrayTypeWrapper class.
            </summary>
            <param name="type">Master type.</param>
        </member>
        <member name="P:Ctrip.Duckbill.Objects.Implement.ILBuilder.EnumerableTypeWrapper.ArrayTypeWrapper.Type">
            <summary>
            Gets type.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Objects.Implement.ILBuilder.EnumerableTypeWrapper.ArrayTypeWrapper.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.EnumerableTypeWrapper.ArrayTypeWrapper.GenerateGetCountIl(System.Reflection.Emit.ILGenerator@,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Generate get count il.
            </summary>
            <param name="il">Il Generator.</param>
            <param name="objectVariable">Object variable.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.EnumerableTypeWrapper.ArrayTypeWrapper.GenerateGetElementIL(System.Reflection.Emit.ILGenerator@,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.LocalBuilder@)">
            <summary>
            Generate get count il.
            </summary>
            <param name="il">Il Generator.</param>
            <param name="collectionObjectVariable">Object variable.</param>
            <param name="indexVariable">Index variable.</param>
            <param name="valueVariable">Value variable.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.EnumerableTypeWrapper.ArrayTypeWrapper.GenerateSetElementIL(System.Reflection.Emit.ILGenerator@,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Generate set count il.
            </summary>
            <param name="il">Il Generator.</param>
            <param name="collectionObjectVariable">Object variable.</param>
            <param name="indexVariable">Index variable.</param>
            <param name="valueVariable">Value variable.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.EnumerableTypeWrapper.ArrayTypeWrapper.GenerateAddElementIL(System.Reflection.Emit.ILGenerator@,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Generate add count il.
            </summary>
            <param name="il">Il Generator.</param>
            <param name="collectionObjectVariable">Object variable.</param>
            <param name="valueVariable">Value variable.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Objects.Implement.ILBuilder.EnumerableTypeWrapper.EnumerableTypeWrapperFactory">
            <summary>
            Enumerable type wrapper factory.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.EnumerableTypeWrapper.EnumerableTypeWrapperFactory.arrayTypeWrappers">
            <summary>
            Array type wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.EnumerableTypeWrapper.EnumerableTypeWrapperFactory.listTypeWrappers">
            <summary>
            Array type wrapper.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.EnumerableTypeWrapper.EnumerableTypeWrapperFactory.CreateWrapper(System.Type)">
            <summary>
            Create type wrapper.
            </summary>
            <param name="type">Type defined.</param>
            <returns>Type wrapper.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.EnumerableTypeWrapper.EnumerableTypeWrapperFactory.GetArrayType(System.Type)">
            <summary>
            Get array type.
            </summary>
            <param name="type">Type defined.</param>
            <returns>Array type wrapper.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.EnumerableTypeWrapper.EnumerableTypeWrapperFactory.GetListType(System.Type)">
            <summary>
            Get list type.
            </summary>
            <param name="type">Type defined.</param>
            <returns>List type wrapper.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Objects.Implement.ILBuilder.EnumerableTypeWrapper.IEnumerableTypeWrapper">
            <summary>
            Enumerable type wrapper interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Objects.Implement.ILBuilder.EnumerableTypeWrapper.IEnumerableTypeWrapper.Type">
            <summary>
            Gets type.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Objects.Implement.ILBuilder.EnumerableTypeWrapper.IEnumerableTypeWrapper.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.EnumerableTypeWrapper.IEnumerableTypeWrapper.GenerateGetCountIl(System.Reflection.Emit.ILGenerator@,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Generate get count il.
            </summary>
            <param name="il">Il Generator.</param>
            <param name="objectVariable">Object variable.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.EnumerableTypeWrapper.IEnumerableTypeWrapper.GenerateGetElementIL(System.Reflection.Emit.ILGenerator@,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.LocalBuilder@)">
            <summary>
            Generate get count il.
            </summary>
            <param name="il">Il Generator.</param>
            <param name="collectionObjectVariable">Object variable.</param>
            <param name="indexVariable">Index variable.</param>
            <param name="valueVariable">Value variable.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.EnumerableTypeWrapper.IEnumerableTypeWrapper.GenerateSetElementIL(System.Reflection.Emit.ILGenerator@,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Generate set count il.
            </summary>
            <param name="il">Il Generator.</param>
            <param name="collectionObjectVariable">Object variable.</param>
            <param name="indexVariable">Index variable.</param>
            <param name="valueVariable">Value variable.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.EnumerableTypeWrapper.IEnumerableTypeWrapper.GenerateAddElementIL(System.Reflection.Emit.ILGenerator@,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Generate add count il.
            </summary>
            <param name="il">Il Generator.</param>
            <param name="collectionObjectVariable">Object variable.</param>
            <param name="valueVariable">Value variable.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Objects.Implement.ILBuilder.EnumerableTypeWrapper.ListTypeWrapper">
            <summary>
            List type wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.EnumerableTypeWrapper.ListTypeWrapper.getCountMethod">
            <summary>
            Get count method.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.EnumerableTypeWrapper.ListTypeWrapper.getItemMethod">
            <summary>
            Get item method.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.EnumerableTypeWrapper.ListTypeWrapper.setItemMethod">
            <summary>
            Set item method.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.EnumerableTypeWrapper.ListTypeWrapper.addItemMethod">
            <summary>
            Add item method.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.EnumerableTypeWrapper.ListTypeWrapper.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the ListTypeWrapper class.
            </summary>
            <param name="type">
            Master type.
            </param>
        </member>
        <member name="P:Ctrip.Duckbill.Objects.Implement.ILBuilder.EnumerableTypeWrapper.ListTypeWrapper.Type">
            <summary>
            Gets type.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Objects.Implement.ILBuilder.EnumerableTypeWrapper.ListTypeWrapper.ElementType">
            <summary>
            Gets element type.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.EnumerableTypeWrapper.ListTypeWrapper.GenerateGetCountIl(System.Reflection.Emit.ILGenerator@,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Generate get count il.
            </summary>
            <param name="il">
            Il Generator.
            </param>
            <param name="objectVariable">
            Object variable.
            </param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.EnumerableTypeWrapper.ListTypeWrapper.GenerateGetElementIL(System.Reflection.Emit.ILGenerator@,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.LocalBuilder@)">
            <summary>
            Generate get count il.
            </summary>
            <param name="il">
            Il Generator.
            </param>
            <param name="collectionObjectVariable">
            Object variable.
            </param>
            <param name="indexVariable">
            Index variable.
            </param>
            <param name="valueVariable">
            Value variable.
            </param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.EnumerableTypeWrapper.ListTypeWrapper.GenerateSetElementIL(System.Reflection.Emit.ILGenerator@,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Generate set count il.
            </summary>
            <param name="il">
            Il Generator.
            </param>
            <param name="collectionObjectVariable">
            Object variable.
            </param>
            <param name="indexVariable">
            Index variable.
            </param>
            <param name="valueVariable">
            Value variable.
            </param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.EnumerableTypeWrapper.ListTypeWrapper.GenerateAddElementIL(System.Reflection.Emit.ILGenerator@,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Generate add count il.
            </summary>
            <param name="il">
            Il Generator.
            </param>
            <param name="collectionObjectVariable">
            Object variable.
            </param>
            <param name="valueVariable">
            Value variable.
            </param>
        </member>
        <member name="T:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.BoolTypeWrapper">
            <summary>
            Bool type wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.BoolTypeWrapper.MasterType">
            <summary>
            Field of master type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.BoolTypeWrapper.ConvertMethod">
            <summary>
            Convert method.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.BoolTypeWrapper.Type">
            <summary>
            Gets type.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.BoolTypeWrapper.GenerateLoadElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate load element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.BoolTypeWrapper.GenerateSetElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate set element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.BoolTypeWrapper.GetConvertMethod">
            <summary>
            Get convert method.
            </summary>
            <returns>Convert method.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.ByteTypeWrapper">
            <summary>
            Byte type wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.ByteTypeWrapper.MasterType">
            <summary>
            Field of master type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.ByteTypeWrapper.ConvertMethod">
            <summary>
            Convert method.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.ByteTypeWrapper.Type">
            <summary>
            Gets type.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.ByteTypeWrapper.GenerateLoadElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate load element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.ByteTypeWrapper.GenerateSetElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate set element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.ByteTypeWrapper.GetConvertMethod">
            <summary>
            Get convert method.
            </summary>
            <returns>Convert method.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.CharTypeWrapper">
            <summary>
            Char type wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.CharTypeWrapper.MasterType">
            <summary>
            Field of master type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.CharTypeWrapper.ConvertMethod">
            <summary>
            Convert method.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.CharTypeWrapper.Type">
            <summary>
            Gets type.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.CharTypeWrapper.GenerateLoadElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate load element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.CharTypeWrapper.GenerateSetElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate set element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.CharTypeWrapper.GetConvertMethod">
            <summary>
            Get convert method.
            </summary>
            <returns>Convert method.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.ClassTypeWrapper">
            <summary>
            Class type wrapper.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.ClassTypeWrapper.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the ClassTypeWrapper class.
            </summary>
            <param name="type">Type defined.</param>
        </member>
        <member name="P:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.ClassTypeWrapper.Type">
            <summary>
            Gets type.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.ClassTypeWrapper.GenerateLoadElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate load element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.ClassTypeWrapper.GenerateSetElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate set element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.ClassTypeWrapper.GetConvertMethod">
            <summary>
            Get convert method.
            </summary>
            <returns>Convert method.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.DateTimeTypeWrapper">
            <summary>
            DateTime type wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.DateTimeTypeWrapper.MasterType">
            <summary>
            Field of master type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.DateTimeTypeWrapper.ConvertMethod">
            <summary>
            Convert method.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.DateTimeTypeWrapper.Type">
            <summary>
            Gets type.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.DateTimeTypeWrapper.GenerateLoadElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate load element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.DateTimeTypeWrapper.GenerateSetElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate set element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.DateTimeTypeWrapper.GetConvertMethod">
            <summary>
            Get convert method.
            </summary>
            <returns>Convert method.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.DecimalTypeWrapper">
            <summary>
            Decimal type wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.DecimalTypeWrapper.MasterType">
            <summary>
            Field of master type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.DecimalTypeWrapper.ConvertMethod">
            <summary>
            Convert method.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.DecimalTypeWrapper.Type">
            <summary>
            Gets type.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.DecimalTypeWrapper.GenerateLoadElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate load element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.DecimalTypeWrapper.GenerateSetElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate set element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.DecimalTypeWrapper.GetConvertMethod">
            <summary>
            Get convert method.
            </summary>
            <returns>Convert method.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.DoubleTypeWrapper">
            <summary>
            Double type wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.DoubleTypeWrapper.MasterType">
            <summary>
            Field of master type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.DoubleTypeWrapper.ConvertMethod">
            <summary>
            Convert method.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.DoubleTypeWrapper.Type">
            <summary>
            Gets type.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.DoubleTypeWrapper.GenerateLoadElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate load element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.DoubleTypeWrapper.GenerateSetElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate set element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.DoubleTypeWrapper.GetConvertMethod">
            <summary>
            Get convert method.
            </summary>
            <returns>Convert method.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.EnumTypeWrapper">
            <summary>
            Enum type wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.EnumTypeWrapper.convertMethod">
            <summary>
            Convert method.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.EnumTypeWrapper.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the EnumTypeWrapper class.
            </summary>
            <param name="type">Type defined.</param>
        </member>
        <member name="P:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.EnumTypeWrapper.Type">
            <summary>
            Gets type.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.EnumTypeWrapper.GenerateLoadElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate load element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.EnumTypeWrapper.GenerateSetElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate set element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.EnumTypeWrapper.GetConvertMethod">
            <summary>
            Get convert method.
            </summary>
            <returns>Convert method.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.FloatTypeWrapper">
            <summary>
            Float type wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.FloatTypeWrapper.MasterType">
            <summary>
            Field of master type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.FloatTypeWrapper.ConvertMethod">
            <summary>
            Convert method.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.FloatTypeWrapper.Type">
            <summary>
            Gets type.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.FloatTypeWrapper.GenerateLoadElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate load element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.FloatTypeWrapper.GenerateSetElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate set element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.FloatTypeWrapper.GetConvertMethod">
            <summary>
            Get convert method.
            </summary>
            <returns>Convert method.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.IntTypeWrapper">
            <summary>
            Int type wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.IntTypeWrapper.MasterType">
            <summary>
            Field of master type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.IntTypeWrapper.ConvertMethod">
            <summary>
            Convert method.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.IntTypeWrapper.Type">
            <summary>
            Gets type.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.IntTypeWrapper.GenerateLoadElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate load element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.IntTypeWrapper.GenerateSetElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate set element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.IntTypeWrapper.GetConvertMethod">
            <summary>
            Get convert method.
            </summary>
            <returns>Convert method.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.ITypeWrapper">
            <summary>
            Type warpper interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.ITypeWrapper.Type">
            <summary>
            Gets type.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.ITypeWrapper.GenerateLoadElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate load element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.ITypeWrapper.GenerateSetElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate set element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.ITypeWrapper.GetConvertMethod">
            <summary>
            Get convert method.
            </summary>
            <returns>Convert method.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.LongTypeWrapper">
            <summary>
            Long type wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.LongTypeWrapper.MasterType">
            <summary>
            Field of master type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.LongTypeWrapper.ConvertMethod">
            <summary>
            Convert method.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.LongTypeWrapper.Type">
            <summary>
            Gets type.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.LongTypeWrapper.GenerateLoadElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate load element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.LongTypeWrapper.GenerateSetElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate set element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.LongTypeWrapper.GetConvertMethod">
            <summary>
            Get convert method.
            </summary>
            <returns>Convert method.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.SByteTypeWrapper">
            <summary>
            SByte type wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.SByteTypeWrapper.MasterType">
            <summary>
            Field of master type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.SByteTypeWrapper.ConvertMethod">
            <summary>
            Convert method.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.SByteTypeWrapper.Type">
            <summary>
            Gets type.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.SByteTypeWrapper.GenerateLoadElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate load element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.SByteTypeWrapper.GenerateSetElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate set element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.SByteTypeWrapper.GetConvertMethod">
            <summary>
            Get convert method.
            </summary>
            <returns>Convert method.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.ShortTypeWrapper">
            <summary>
            Short type wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.ShortTypeWrapper.MasterType">
            <summary>
            Field of master type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.ShortTypeWrapper.ConvertMethod">
            <summary>
            Convert method.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.ShortTypeWrapper.Type">
            <summary>
            Gets type.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.ShortTypeWrapper.GenerateLoadElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate load element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.ShortTypeWrapper.GenerateSetElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate set element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.ShortTypeWrapper.GetConvertMethod">
            <summary>
            Get convert method.
            </summary>
            <returns>Convert method.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.StringTypeWrapper">
            <summary>
            String type wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.StringTypeWrapper.MasterType">
            <summary>
            Field of master type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.StringTypeWrapper.ConvertMethod">
            <summary>
            Convert method.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.StringTypeWrapper.Type">
            <summary>
            Gets type.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.StringTypeWrapper.GenerateLoadElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate load element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.StringTypeWrapper.GenerateSetElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate set element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.StringTypeWrapper.GetConvertMethod">
            <summary>
            Get convert method.
            </summary>
            <returns>Convert method.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.TypeWrapperFactory">
            <summary>
            Type wrapper factory.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.TypeWrapperFactory.BoolTypeWrapper">
            <summary>
            Bool type wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.TypeWrapperFactory.StringTypeWrapper">
            <summary>
            String type wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.TypeWrapperFactory.DateTimeTypeWrapper">
            <summary>
            DateTime type wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.TypeWrapperFactory.ByteTypeWrapper">
            <summary>
            Byte type wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.TypeWrapperFactory.SByteTypeWrapper">
            <summary>
            SByte type wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.TypeWrapperFactory.ShortTypeWrapper">
            <summary>
            Short type wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.TypeWrapperFactory.UShortTypeWrapper">
            <summary>
            UShort type wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.TypeWrapperFactory.IntTypeWrapper">
            <summary>
            Int type wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.TypeWrapperFactory.UIntTypeWrapper">
            <summary>
            UInt type wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.TypeWrapperFactory.LongTypeWrapper">
            <summary>
            Long type wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.TypeWrapperFactory.ULongTypeWrapper">
            <summary>
            ULong type wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.TypeWrapperFactory.CharTypeWrapper">
            <summary>
            Char type wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.TypeWrapperFactory.DecimalTypeWrapper">
            <summary>
            Decimal type wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.TypeWrapperFactory.DoubleTypeWrapper">
            <summary>
            Double type wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.TypeWrapperFactory.FloatTypeWrapper">
            <summary>
            Float type wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.TypeWrapperFactory.enumsTypeWrappers">
            <summary>
            Enum type wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.TypeWrapperFactory.classTypeWrappers">
            <summary>
            Class type wrapper.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.TypeWrapperFactory.CreateWrapper(System.Type)">
            <summary>
            Create type wrapper.
            </summary>
            <param name="type">Type defined.</param>
            <returns>Type wrapper.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.TypeWrapperFactory.GetEnumType(System.Type)">
            <summary>
            Get enum type.
            </summary>
            <param name="type">Type defined.</param>
            <returns>Enum type wrapper.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.TypeWrapperFactory.GetClassType(System.Type)">
            <summary>
            Get class type.
            </summary>
            <param name="type">Type defined.</param>
            <returns>Class type wrapper.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.UIntTypeWrapper">
            <summary>
            UInt type wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.UIntTypeWrapper.MasterType">
            <summary>
            Field of master type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.UIntTypeWrapper.ConvertMethod">
            <summary>
            Convert method.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.UIntTypeWrapper.Type">
            <summary>
            Gets type.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.UIntTypeWrapper.GenerateLoadElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate load element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.UIntTypeWrapper.GenerateSetElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate set element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.UIntTypeWrapper.GetConvertMethod">
            <summary>
            Get convert method.
            </summary>
            <returns>Convert method.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.ULongTypeWrapper">
            <summary>
            Ulong type wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.ULongTypeWrapper.MasterType">
            <summary>
            Field of master type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.ULongTypeWrapper.ConvertMethod">
            <summary>
            Convert method.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.ULongTypeWrapper.Type">
            <summary>
            Gets type.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.ULongTypeWrapper.GenerateLoadElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate load element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.ULongTypeWrapper.GenerateSetElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate set element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.ULongTypeWrapper.GetConvertMethod">
            <summary>
            Get convert method.
            </summary>
            <returns>Convert method.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.UShortTypeWrapper">
            <summary>
            UShort type wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.UShortTypeWrapper.MasterType">
            <summary>
            Field of master type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.UShortTypeWrapper.ConvertMethod">
            <summary>
            Convert method.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.UShortTypeWrapper.Type">
            <summary>
            Gets type.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.UShortTypeWrapper.GenerateLoadElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate load element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.UShortTypeWrapper.GenerateSetElementIL(System.Reflection.Emit.ILGenerator@)">
            <summary>
            Generate set element il.
            </summary>
            <param name="il">IL generator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Objects.Implement.ILBuilder.TypeWrapper.UShortTypeWrapper.GetConvertMethod">
            <summary>
            Get convert method.
            </summary>
            <returns>Convert method.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.INow">
            <summary>
            Now interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.INow.DateTime">
            <summary>
            Gets date time now.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.INow.DateTimeOffset">
            <summary>
            Gets date time off set now.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.IObjectConverter">
            <summary>
            Object convert interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IObjectConverter.ConvertTo``1(System.Object)">
            <summary>
            Convert original object to destination object.
            </summary>
            <typeparam name="TDestination">Destination object type.</typeparam>
            <param name="original">Original object.</param>
            <returns>Destination object.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.IOC.AutoSetupServiceAttribute">
            <summary>
            Class with this attribute will be auto register as a service. When MISLibraryContainer first initialize.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.AutoSetupServiceAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the AutoSetupServiceAttribute class.
            </summary>
            <param name="service">Service type.</param>
        </member>
        <member name="P:Ctrip.Duckbill.IOC.AutoSetupServiceAttribute.Service">
            <summary>
            Gets service type.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.IOC.AutoSetupServiceAttribute.LifeTime">
            <summary>
            Gets or sets life time.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.IOC.AutoSetupServiceAttribute.Priority">
            <summary>
            Gets or sets priority.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.IOC.AutoSetupServiceAttribute.ConstructorArgs">
            <summary>
            Gets or sets constructor args. This constructor must be public.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.IOC.IAssembliesLoader">
            <summary>
            Assemblies loader interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.IAssembliesLoader.LoadAssemblies">
            <summary>
            Load application assemblies.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.IOC.IAutoSetupServicesContainer">
            <summary>
            Auto setup services container.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.IOC.IAutoSetupServicesContainer.Priority">
            <summary>
            Gets priority for which implement will be used. The larger the number, the more priority. 
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.IOC.Implement.DefaultAssemblyLoader">
            <summary>
            Default assemblies loader.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IOC.Implement.DefaultAssemblyLoader.appDomain">
            <summary>
            App domain interface.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IOC.Implement.DefaultAssemblyLoader.staticAssembly">
            <summary>
            Static assembly interface.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IOC.Implement.DefaultAssemblyLoader.staticPath">
            <summary>
            Static path.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IOC.Implement.DefaultAssemblyLoader.staticDirectory">
            <summary>
            Static directory.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IOC.Implement.DefaultAssemblyLoader.staticConfigurationManager">
            <summary>
            The static configuration manager.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultAssemblyLoader.#ctor(Ctrip.Duckbill.ICurrentAppDomain,Ctrip.Duckbill.Reflection.IStaticAssembly,Ctrip.Duckbill.Reflection.IAssemblyUtility,Ctrip.Duckbill.IO.IStaticPath,Ctrip.Duckbill.IO.IStaticDirectory,Ctrip.Duckbill.Configuration.IStaticConfigurationManager)">
            <summary>
            Initializes a new instance of the DefaultAssemblyLoader class.
            </summary>
            <param name="appDomain">App domain interface.</param>
            <param name="staticAssembly">Static assembly interface.</param>
            <param name="assemblyUtility">Assembly utility.</param>
            <param name="staticPath">Static path.</param>
            <param name="staticDirectory">Static directory.</param>
            <param name="staticConfigurationManager">The static configuration manager.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultAssemblyLoader.LoadAssemblies">
            <summary>
            Load application assemblies.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultAssemblyLoader.GetAppDirectory">
            <summary>
            Get app directory.
            </summary>
            <returns>App directory.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultAssemblyLoader.LoadAssemblies(System.String)">
            <summary>
            Load Service Assemblies.
            </summary>
            <param name="path">Requested path for loading assemblies.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultAssemblyLoader.ValidatePath(System.String)">
            <summary>
            Validate path.
            </summary>
            <param name="path">Requested path.</param>
            <returns>Validate result.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.IOC.Implement.DefaultServicesContainer">
            <summary>
            Default implement of service container.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesContainer.#ctor(Ctrip.Duckbill.IOC.IServicesDefinitionContainer,Ctrip.Duckbill.Reflection.IActivator)">
            <summary>
            Initializes a new instance of the DefaultServicesContainer class.
            </summary>
            <param name="servicesDefinitionContainer">Services definition container.</param>
            <param name="activator">Instance activator.</param>
        </member>
        <member name="P:Ctrip.Duckbill.IOC.Implement.DefaultServicesContainer.Priority">
            <summary>
            Gets priority for which implement will be used. The larger the number, the more priority. 
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesContainer.CreateScope">
            <summary>
            Create service scope.
            </summary>
            <returns>Service scope instance.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.IOC.Implement.DefaultServicesDefinitionContainer">
            <summary>
            Default services definition container.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IOC.Implement.DefaultServicesDefinitionContainer.data">
            <summary>
            Services definition data.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.IOC.Implement.DefaultServicesDefinitionContainer.ServicesDefinition">
            <summary>
            Gets services definition.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesDefinitionContainer.RegisterService(System.Type,System.Type)">
            <summary>
            Register service with implement type and scope life time.
            </summary>
            <param name="service">Service type.</param>
            <param name="implement">Implement type.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesDefinitionContainer.RegisterService``2">
            <summary>
            Register service with implement type and scope life time.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <typeparam name="TImplement">Implement type.</typeparam>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesDefinitionContainer.RegisterService(System.Type,System.Type,System.String)">
            <summary>
            Register service with implement type and scope life time.
            </summary>
            <param name="service">Service type.</param>
            <param name="implement">Implement type.</param>
            <param name="subKey">Sub key.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesDefinitionContainer.RegisterService``2(System.String)">
            <summary>
            Register service with implement type and scope life time.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <typeparam name="TImplement">Implement type.</typeparam>
            <param name="subKey">Sub key.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesDefinitionContainer.RegisterService(System.Type,System.Type,Ctrip.Duckbill.IOC.ServiceLifeTime)">
            <summary>
            Register service with implement type and service life time.
            </summary>
            <param name="service">Service type.</param>
            <param name="implement">Implement type.</param>
            <param name="lifeTime">Service life time.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesDefinitionContainer.RegisterService``2(Ctrip.Duckbill.IOC.ServiceLifeTime)">
            <summary>
            Register service with implement type and service life time.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <typeparam name="TImplement">Implement type.</typeparam>
            <param name="lifeTime">Service life time.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesDefinitionContainer.RegisterService(System.Type,System.Type,System.String,Ctrip.Duckbill.IOC.ServiceLifeTime)">
            <summary>
            Register service with implement type and service life time.
            </summary>
            <param name="service">Service type.</param>
            <param name="implement">Implement type.</param>
            <param name="subKey">Sub key.</param>
            <param name="lifeTime">Service life time.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesDefinitionContainer.RegisterService``2(System.String,Ctrip.Duckbill.IOC.ServiceLifeTime)">
            <summary>
            Register service with implement type and service life time.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <typeparam name="TImplement">Implement type.</typeparam>
            <param name="subKey">Sub key.</param>
            <param name="lifeTime">Service life time.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesDefinitionContainer.RegisterService(System.Type,System.Func{System.Object})">
            <summary>
            Register service with service factory and scope life time.
            </summary>
            <param name="service">Service type.</param>
            <param name="serviceFactory">Service factory.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesDefinitionContainer.RegisterService``1(System.Func{System.Object})">
            <summary>
            Register service with service factory and scope life time.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <param name="serviceFactory">Service factory.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesDefinitionContainer.RegisterService(System.Type,System.Func{System.Object},System.String)">
            <summary>
            Register service with service factory and scope life time.
            </summary>
            <param name="service">Service type.</param>
            <param name="serviceFactory">Service factory.</param>
            <param name="subKey">Sub key.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesDefinitionContainer.RegisterService``1(System.Func{System.Object},System.String)">
            <summary>
            Register service with service factory and scope life time.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <param name="serviceFactory">Service factory.</param>
            <param name="subKey">Sub key.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesDefinitionContainer.RegisterService(System.Type,System.Func{System.Object},Ctrip.Duckbill.IOC.ServiceLifeTime)">
            <summary>
            Register service with service factory and service life time.
            </summary>
            <param name="service">Service type.</param>
            <param name="serviceFactory">Service factory.</param>
            <param name="lifeTime">Service life time.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesDefinitionContainer.RegisterService``1(System.Func{System.Object},Ctrip.Duckbill.IOC.ServiceLifeTime)">
            <summary>
            Register service with service factory and service life time.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <param name="serviceFactory">Service factory.</param>
            <param name="lifeTime">Service life time.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesDefinitionContainer.RegisterService(System.Type,System.Func{System.Object},System.String,Ctrip.Duckbill.IOC.ServiceLifeTime)">
            <summary>
            Register service with service factory and service life time.
            </summary>
            <param name="service">Service type.</param>
            <param name="serviceFactory">Service factory.</param>
            <param name="subKey">Sub key.</param>
            <param name="lifeTime">Service life time.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesDefinitionContainer.RegisterService``1(System.Func{System.Object},System.String,Ctrip.Duckbill.IOC.ServiceLifeTime)">
            <summary>
            Register service with service factory and service life time.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <param name="serviceFactory">Service factory.</param>
            <param name="subKey">Sub key.</param>
            <param name="lifeTime">Service life time.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesDefinitionContainer.CreateServiceDefine(System.Type,System.Type,System.Func{System.Object},System.String,Ctrip.Duckbill.IOC.ServiceLifeTime)">
            <summary>
            Create service define.
            </summary>
            <param name="service">Service type.</param>
            <param name="implement">Implement type.</param>
            <param name="serviceFactory">Service factory.</param>
            <param name="subKey">Sub key.</param>
            <param name="lifeTime">Service life time.</param>
            <returns>Service define.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.IOC.Implement.DefaultServicesScope">
            <summary>
            Default implement of service scope.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IOC.Implement.DefaultServicesScope.registeredServices">
            <summary>
            Registered services.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IOC.Implement.DefaultServicesScope.singletonServiceInstances">
            <summary>
            Singleton services instance.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IOC.Implement.DefaultServicesScope.scopeServiceInstances">
            <summary>
            Scope services instance.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IOC.Implement.DefaultServicesScope.activator">
            <summary>
            Object activator.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesScope.#ctor(Ctrip.Duckbill.IOC.IServicesDefinitionContainer,Ctrip.Duckbill.Reflection.IActivator)">
            <summary>
            Initializes a new instance of the DefaultServicesScope class.
            </summary>
            <param name="servicesDefinitionContainer">Services definition container.</param>
            <param name="activator">Instance activator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesScope.#ctor(System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,Ctrip.Duckbill.IOC.IServiceDefinition}},System.Collections.Concurrent.ConcurrentDictionary{System.Type,System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}},Ctrip.Duckbill.Reflection.IActivator)">
            <summary>
            Initializes a new instance of the DefaultServicesScope class.
            </summary>
            <param name="registeredServices">Registered services.</param>
            <param name="singletonServiceInstances">Singleton service instances.</param>
            <param name="activator">Instance activator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesScope.ContainService(System.Type)">
            <summary>
            Check whether the service has been registered in service locator.
            </summary>
            <param name="serviceType">Service type.</param>
            <returns>True if the service has been registered; otherwise false.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesScope.ContainService``1">
            <summary>
            Check whether the service has been registered in service locator.
            </summary>
            <typeparam name="TService">Type of service.</typeparam>
            <returns>True if the service has been registered; otherwise false.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesScope.ContainService(System.Type,System.String)">
            <summary>
            Check whether the service has been registered in service locator.
            </summary>
            <param name="serviceType">Service type.</param>
            <param name="subKey">Sub key.</param>
            <returns>True if the service has been registered; otherwise false.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesScope.ContainService``1(System.String)">
            <summary>
            Check whether the service has been registered in service locator.
            </summary>
            <typeparam name="TService">Type of service.</typeparam>
            <param name="subKey">Sub key.</param>
            <returns>True if the service has been registered; otherwise false.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesScope.Resolve``1">
            <summary>
            Resolve Service Implementation.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <returns>Service Implementation object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesScope.ResolveAll``1">
            <summary>
            Resolve all Service Implementations.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <returns>Service Implementation object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesScope.Resolve``1(System.String)">
            <summary>
            Resolve Service Implementation.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <param name="subKey">Sub key.</param>
            <returns>Service Implementation Instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesScope.GetInstance``1">
            <summary>
            Get an instance of the given TService.
            </summary>
            <typeparam name="TService">Type of service requested.</typeparam>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesScope.GetService(System.Type,System.String)">
            <summary>
            Gets the service object of the specified type and key.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <param name="subKey">Sub key.</param>
            <returns>A service object of type serviceType.-or- null if there is no service object of type serviceType.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesScope.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>A service object of type serviceType.-or- null if there is no service object of type serviceType.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesScope.GetAllServices(System.Type)">
            <summary>
            Gets the service object collection of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>A service object collection of type serviceType.-or- null if there is no service object of type serviceType.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>   
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesScope.CreateServiceInstance(Ctrip.Duckbill.IOC.IServiceDefinition)">
            <summary>
            Create service instance.
            </summary>
            <param name="serviceDefinition">Service definition.</param>
            <returns>Service instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesScope.GetServiceDefinition(System.Type,System.String)">
            <summary>
            Get service definition.
            </summary>
            <param name="serviceType">Service type.</param>
            <param name="subkey">Sub key.</param>
            <returns>Service definition.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesScope.GetServiceInstance(Ctrip.Duckbill.IOC.IServiceDefinition)">
            <summary>
            Get service instance.
            </summary>
            <param name="serviceDefinition">Service definition.</param>
            <returns>Service instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.DefaultServicesScope.GetOrGenerateServiceInstance(System.Collections.Concurrent.ConcurrentDictionary{System.Type,System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Object}},Ctrip.Duckbill.IOC.IServiceDefinition)">
            <summary>
            Get or generate service instance.
            </summary>
            <param name="instanceContainer">Instance container.</param>
            <param name="serviceDefinition">Service definition.</param>
            <returns>Service instance.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.IOC.Implement.ServiceDefinition">
            <summary>
            Service definition.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.IOC.Implement.ServiceDefinition.Service">
            <summary>
            Gets or sets service type.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.IOC.Implement.ServiceDefinition.Implement">
            <summary>
            Gets or sets implement type.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.IOC.Implement.ServiceDefinition.LifeTime">
            <summary>
            Gets or sets life time.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.IOC.Implement.ServiceDefinition.SubKey">
            <summary>
            Gets or sets sub key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.IOC.Implement.ServiceDefinition.ServiceFactory">
            <summary>
            Gets or sets service factory.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.IOC.Implement.ServicesWirer">
            <summary>
            Default services wirer.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IOC.Implement.ServicesWirer.currentAppDomain">
            <summary>
            Current AppDomain.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IOC.Implement.ServicesWirer.assemblyTypeLoader">
            <summary>
            Assembly type loader.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IOC.Implement.ServicesWirer.activator">
            <summary>
            Object activator.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IOC.Implement.ServicesWirer.myContainer">
            <summary>
            My container.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IOC.Implement.ServicesWirer.wiringStrategies">
            <summary>
            Services wiring strategies.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.ServicesWirer.#ctor(Ctrip.Duckbill.ICurrentAppDomain,Ctrip.Duckbill.Reflection.IAssemblyTypeLoader,Ctrip.Duckbill.Reflection.IActivator)">
            <summary>
            Initializes a new instance of the ServicesWirer class.
            </summary>
            <param name="currentAppDomain">Current app domain.</param>
            <param name="assemblyTypeLoader">Assembly type loader.</param>
            <param name="activator">Object activator.</param>
        </member>
        <member name="P:Ctrip.Duckbill.IOC.Implement.ServicesWirer.ServicesDefinitionContainer">
            <summary>
            Gets services definition container.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.ServicesWirer.Wire">
            <summary>
            Wire the services.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.ServicesWirer.GenerateStrategy">
            <summary>
            Gets services definitions.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.ServicesWirer.IsServicesWiringStrategy(System.Type)">
            <summary>
            Check whether type is an instance services module..
            </summary>
            <param name="type">Current type.</param>
            <returns>True is an instance services module. False is not.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.IOC.Implement.WireAutoSetupServiceAttributeStrategy">
            <summary>
            Wire auto setup service attribute strategy.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IOC.Implement.WireAutoSetupServiceAttributeStrategy.currentAppDomain">
            <summary>
            Current app domain.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IOC.Implement.WireAutoSetupServiceAttributeStrategy.assemblyTypeLoader">
            <summary>
            Assembly type loader.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.WireAutoSetupServiceAttributeStrategy.#ctor(Ctrip.Duckbill.ICurrentAppDomain,Ctrip.Duckbill.Reflection.IAssemblyTypeLoader)">
            <summary>
            Initializes a new instance of the WireAutoSetupServiceAttributeStrategy class.
            </summary>
            <param name="currentAppDomain">Current app domain.</param>
            <param name="assemblyTypeLoader">Assembly type loader.</param>
        </member>
        <member name="P:Ctrip.Duckbill.IOC.Implement.WireAutoSetupServiceAttributeStrategy.Priority">
            <summary>
            Gets priority.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.WireAutoSetupServiceAttributeStrategy.GetServicesDefinition">
            <summary>
            Gets services definitions.
            </summary>
            <returns>Services definition.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.WireAutoSetupServiceAttributeStrategy.ContainsAutoSetupServiceAttribute(System.Type)">
            <summary>
            Check whether type contains AutoSetupServiceAttribute.
            </summary>
            <param name="type">Current type.</param>
            <returns>True contain, false not contain.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.IOC.Implement.WireISignServiceStrategy">
            <summary>
            Wire isign services strategy.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IOC.Implement.WireISignServiceStrategy.currentAppDomain">
            <summary>
            Current app domain.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IOC.Implement.WireISignServiceStrategy.assemblyTypeLoader">
            <summary>
            Assembly type loader.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.WireISignServiceStrategy.#ctor(Ctrip.Duckbill.ICurrentAppDomain,Ctrip.Duckbill.Reflection.IAssemblyTypeLoader)">
            <summary>
            Initializes a new instance of the WireISignServiceStrategy class.
            </summary>
            <param name="currentAppDomain">Current app domain.</param>
            <param name="assemblyTypeLoader">Assembly type loader.</param>
        </member>
        <member name="P:Ctrip.Duckbill.IOC.Implement.WireISignServiceStrategy.Priority">
            <summary>
            Gets priority.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.WireISignServiceStrategy.GetServicesDefinition">
            <summary>
            Gets services definitions.
            </summary>
            <returns>Services definition.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.WireISignServiceStrategy.IsImplementISign(System.Type)">
            <summary>
            Check whether type is implement isign.
            </summary>
            <param name="type">Current type.</param>
            <returns>True is implement isign, false is not.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.IOC.Implement.WireServicesModuleStrategy">
            <summary>
            Wire services module strategy.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IOC.Implement.WireServicesModuleStrategy.currentAppDomain">
            <summary>
            Current app domain.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IOC.Implement.WireServicesModuleStrategy.assemblyTypeLoader">
            <summary>
            Assembly type loader.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IOC.Implement.WireServicesModuleStrategy.activator">
            <summary>
            Object activator.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.WireServicesModuleStrategy.#ctor(Ctrip.Duckbill.ICurrentAppDomain,Ctrip.Duckbill.Reflection.IAssemblyTypeLoader,Ctrip.Duckbill.Reflection.IActivator)">
            <summary>
            Initializes a new instance of the WireServicesModuleStrategy class.
            </summary>
            <param name="currentAppDomain">Current app domain.</param>
            <param name="assemblyTypeLoader">Assembly type loader.</param>
            <param name="activator">Object activator.</param>
        </member>
        <member name="P:Ctrip.Duckbill.IOC.Implement.WireServicesModuleStrategy.Priority">
            <summary>
            Gets priority.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.WireServicesModuleStrategy.GetServicesDefinition">
            <summary>
            Gets services definitions.
            </summary>
            <returns>Services definition.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.WireServicesModuleStrategy.IsInstanceServicesModule(System.Type)">
            <summary>
            Check whether type is an instance services module..
            </summary>
            <param name="type">Current type.</param>
            <returns>True is an instance services module. False is not.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.IOC.Implement.WireSimpleNameMatchStrategy">
            <summary>
            Wire simple name match strategy.
            </summary>
            <summary>
            Wire simple name match strategy. .net 4.0.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IOC.Implement.WireSimpleNameMatchStrategy.currentAppDomain">
            <summary>
            Current AppDomain.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IOC.Implement.WireSimpleNameMatchStrategy.assemblyTypeLoader">
            <summary>
            Assembly type loader.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.WireSimpleNameMatchStrategy.#ctor(Ctrip.Duckbill.ICurrentAppDomain,Ctrip.Duckbill.Reflection.IAssemblyTypeLoader)">
            <summary>
            Initializes a new instance of the WireSimpleNameMatchStrategy class.
            </summary>
            <param name="currentAppDomain">Current app domain.</param>
            <param name="assemblyTypeLoader">Assembly type loader.</param>
        </member>
        <member name="P:Ctrip.Duckbill.IOC.Implement.WireSimpleNameMatchStrategy.Priority">
            <summary>
            Gets priority.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.WireSimpleNameMatchStrategy.GetServicesDefinition">
            <summary>
            Gets services definitions.
            </summary>
            <returns>Services definition.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.WireSimpleNameMatchStrategy.IsSimpleNameMatch(System.Type)">
            <summary>
            Check whether type is simple name match.
            </summary>
            <param name="type">Current type.</param>
            <returns>True is simple name match, false is not.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.Implement.WireSimpleNameMatchStrategy.GetImplementedInterfaces(System.Type)">
            <summary>
            Get implemented interface.
            </summary>
            <param name="type">The type.</param>
            <returns>The implemented interface.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.IOC.IServiceDefinition">
            <summary>
            Service definition interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.IOC.IServiceDefinition.Service">
            <summary>
            Gets service type.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.IOC.IServiceDefinition.Implement">
            <summary>
            Gets implement type.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.IOC.IServiceDefinition.LifeTime">
            <summary>
            Gets life time.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.IOC.IServiceDefinition.SubKey">
            <summary>
            Gets sub key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.IOC.IServiceDefinition.ServiceFactory">
            <summary>
            Gets service factory.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.IOC.IServicesContainer">
            <summary>
            Services container interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.IServicesContainer.CreateScope">
            <summary>
            Create service scope.
            </summary>
            <returns>Service scope instance.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.IOC.IServicesDefinitionContainer">
            <summary>
            Service definition container.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.IOC.IServicesDefinitionContainer.ServicesDefinition">
            <summary>
            Gets services definition.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.IServicesDefinitionContainer.RegisterService(System.Type,System.Type)">
            <summary>
            Register service with implement type and scope life time.
            </summary>
            <param name="service">Service type.</param>
            <param name="implement">Implement type.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.IServicesDefinitionContainer.RegisterService``2">
            <summary>
            Register service with implement type and scope life time.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <typeparam name="TImplement">Implement type.</typeparam>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.IServicesDefinitionContainer.RegisterService(System.Type,System.Type,System.String)">
            <summary>
            Register service with implement type and scope life time.
            </summary>
            <param name="service">Service type.</param>
            <param name="implement">Implement type.</param>
            <param name="subKey">Sub key.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.IServicesDefinitionContainer.RegisterService``2(System.String)">
            <summary>
            Register service with implement type and scope life time.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <typeparam name="TImplement">Implement type.</typeparam>
            <param name="subKey">Sub key.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.IServicesDefinitionContainer.RegisterService(System.Type,System.Type,Ctrip.Duckbill.IOC.ServiceLifeTime)">
            <summary>
            Register service with implement type and service life time.
            </summary>
            <param name="service">Service type.</param>
            <param name="implement">Implement type.</param>
            <param name="lifeTime">Service life time.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.IServicesDefinitionContainer.RegisterService``2(Ctrip.Duckbill.IOC.ServiceLifeTime)">
            <summary>
            Register service with implement type and service life time.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <typeparam name="TImplement">Implement type.</typeparam>
            <param name="lifeTime">Service life time.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.IServicesDefinitionContainer.RegisterService(System.Type,System.Type,System.String,Ctrip.Duckbill.IOC.ServiceLifeTime)">
            <summary>
            Register service with implement type and service life time.
            </summary>
            <param name="service">Service type.</param>
            <param name="implement">Implement type.</param>
            <param name="subKey">Sub key.</param>
            <param name="lifeTime">Service life time.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.IServicesDefinitionContainer.RegisterService``2(System.String,Ctrip.Duckbill.IOC.ServiceLifeTime)">
            <summary>
            Register service with implement type and service life time.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <typeparam name="TImplement">Implement type.</typeparam>
            <param name="subKey">Sub key.</param>
            <param name="lifeTime">Service life time.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.IServicesDefinitionContainer.RegisterService(System.Type,System.Func{System.Object})">
            <summary>
            Register service with service factory and scope life time.
            </summary>
            <param name="service">Service type.</param>
            <param name="serviceFactory">Service factory.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.IServicesDefinitionContainer.RegisterService``1(System.Func{System.Object})">
            <summary>
            Register service with service factory and scope life time.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <param name="serviceFactory">Service factory.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.IServicesDefinitionContainer.RegisterService(System.Type,System.Func{System.Object},System.String)">
            <summary>
            Register service with service factory and scope life time.
            </summary>
            <param name="service">Service type.</param>
            <param name="serviceFactory">Service factory.</param>
            <param name="subKey">Sub key.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.IServicesDefinitionContainer.RegisterService``1(System.Func{System.Object},System.String)">
            <summary>
            Register service with service factory and scope life time.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <param name="serviceFactory">Service factory.</param>
            <param name="subKey">Sub key.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.IServicesDefinitionContainer.RegisterService(System.Type,System.Func{System.Object},Ctrip.Duckbill.IOC.ServiceLifeTime)">
            <summary>
            Register service with service factory and service life time.
            </summary>
            <param name="service">Service type.</param>
            <param name="serviceFactory">Service factory.</param>
            <param name="lifeTime">Service life time.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.IServicesDefinitionContainer.RegisterService``1(System.Func{System.Object},Ctrip.Duckbill.IOC.ServiceLifeTime)">
            <summary>
            Register service with service factory and service life time.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <param name="serviceFactory">Service factory.</param>
            <param name="lifeTime">Service life time.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.IServicesDefinitionContainer.RegisterService(System.Type,System.Func{System.Object},System.String,Ctrip.Duckbill.IOC.ServiceLifeTime)">
            <summary>
            Register service with service factory and service life time.
            </summary>
            <param name="service">Service type.</param>
            <param name="serviceFactory">Service factory.</param>
            <param name="subKey">Sub key.</param>
            <param name="lifeTime">Service life time.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.IServicesDefinitionContainer.RegisterService``1(System.Func{System.Object},System.String,Ctrip.Duckbill.IOC.ServiceLifeTime)">
            <summary>
            Register service with service factory and service life time.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <param name="serviceFactory">Service factory.</param>
            <param name="subKey">Sub key.</param>
            <param name="lifeTime">Service life time.</param>
        </member>
        <member name="T:Ctrip.Duckbill.IOC.IServicesLocator">
            <summary>
            The generic Service Locator interface. This interface is used to retrieve services (instances identified by type and optional name) from a container.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.IServicesLocator.ContainService(System.Type)">
            <summary>
            Check whether the service has been registered in service locator.
            </summary>
            <param name="serviceType">Service type.</param>
            <returns>True if the service has been registered; otherwise false.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.IServicesLocator.ContainService``1">
            <summary>
            Check whether the service has been registered in service locator.
            </summary>
            <typeparam name="TService">Type of service.</typeparam>
            <returns>True if the service has been registered; otherwise false.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.IServicesLocator.ContainService(System.Type,System.String)">
            <summary>
            Check whether the service has been registered in service locator.
            </summary>
            <param name="serviceType">Service type.</param>
            <param name="subKey">Sub key.</param>
            <returns>True if the service has been registered; otherwise false.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.IServicesLocator.ContainService``1(System.String)">
            <summary>
            Check whether the service has been registered in service locator.
            </summary>
            <typeparam name="TService">Type of service.</typeparam>
            <param name="subKey">Sub key.</param>
            <returns>True if the service has been registered; otherwise false.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.IServicesLocator.GetAllServices(System.Type)">
            <summary>
            Gets the service object collection of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>A service object collection of type serviceType.-or- null if there is no service object of type serviceType.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.IServicesLocator.GetService(System.Type,System.String)">
            <summary>
            Gets the service object of the specified type and key.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <param name="subKey">Sub key.</param>
            <returns>A service object of type serviceType.-or- null if there is no service object of type serviceType.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.IServicesLocator.Resolve``1">
            <summary>
            Resolve Service Implementation.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <returns>Service Implementation object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.IServicesLocator.ResolveAll``1">
            <summary>
            Resolve all Service Implementations.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <returns>Service Implementation object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.IServicesLocator.Resolve``1(System.String)">
            <summary>
            Resolve Service Implementation.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <param name="subKey">Sub key.</param>
            <returns>Service Implementation Instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.IServicesLocator.GetInstance``1">
            <summary>
            Get an instance of the given TService.
            </summary>
            <typeparam name="TService">Type of service requested.</typeparam>
            <returns>The requested service instance.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.IOC.IServicesModule">
            <summary>
            Service module interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.IOC.IServicesModule.ServicesDefinition">
            <summary>
            Gets services definition.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.IServicesModule.Configure">
            <summary>
            Configure services.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.IOC.IServicesScope">
            <summary>
            Services scope interface.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.IOC.IServicesWirer">
            <summary>
            Service wirer.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.IOC.IServicesWirer.ServicesDefinitionContainer">
            <summary>
            Gets services definition container.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.IServicesWirer.Wire">
            <summary>
            Wire the services.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.IOC.IServicesWiringStrategy">
            <summary>
            Services wiring strategy interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.IOC.IServicesWiringStrategy.Priority">
            <summary>
            Gets priority.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.IServicesWiringStrategy.GetServicesDefinition">
            <summary>
            Gets services definitions.
            </summary>
            <returns>Services definition.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.IOC.ISign">
            <summary>
            Auto setup service interface.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.IOC.ServiceLifeTime">
            <summary>
            Service life time.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IOC.ServiceLifeTime.Transient">
            <summary>
            Every time when you get a service a new instance will be create.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IOC.ServiceLifeTime.Scope">
            <summary>
            Per Resolve One Same Instance in a Scope.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IOC.ServiceLifeTime.Singleton">
            <summary>
            Just exist one instance in all application life time.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.IOC.ServicesModule">
            <summary>
            Abstract services module.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IOC.ServicesModule.services">
            <summary>
            Services definition.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.IOC.ServicesModule.ServicesDefinition">
            <summary>
            Gets services definition.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.ServicesModule.Configure">
            <summary>
            Configure services.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.ServicesModule.RegisterService(System.Type,System.Type)">
            <summary>
            Register service with implement type and scope life time.
            </summary>
            <param name="service">Service type.</param>
            <param name="implement">Implement type.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.ServicesModule.RegisterService``2">
            <summary>
            Register service with implement type and scope life time.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <typeparam name="TImplement">Implement type.</typeparam>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.ServicesModule.RegisterService(System.Type,System.Type,System.String)">
            <summary>
            Register service with implement type and scope life time.
            </summary>
            <param name="service">Service type.</param>
            <param name="implement">Implement type.</param>
            <param name="subKey">Sub key.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.ServicesModule.RegisterService``2(System.String)">
            <summary>
            Register service with implement type and scope life time.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <typeparam name="TImplement">Implement type.</typeparam>
            <param name="subKey">Sub key.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.ServicesModule.RegisterService(System.Type,System.Type,Ctrip.Duckbill.IOC.ServiceLifeTime)">
            <summary>
            Register service with implement type and service life time.
            </summary>
            <param name="service">Service type.</param>
            <param name="implement">Implement type.</param>
            <param name="lifeTime">Service life time.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.ServicesModule.RegisterService``2(Ctrip.Duckbill.IOC.ServiceLifeTime)">
            <summary>
            Register service with implement type and service life time.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <typeparam name="TImplement">Implement type.</typeparam>
            <param name="lifeTime">Service life time.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.ServicesModule.RegisterService(System.Type,System.Type,System.String,Ctrip.Duckbill.IOC.ServiceLifeTime)">
            <summary>
            Register service with implement type and service life time.
            </summary>
            <param name="service">Service type.</param>
            <param name="implement">Implement type.</param>
            <param name="subKey">Sub key.</param>
            <param name="lifeTime">Service life time.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.ServicesModule.RegisterService``2(System.String,Ctrip.Duckbill.IOC.ServiceLifeTime)">
            <summary>
            Register service with implement type and service life time.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <typeparam name="TImplement">Implement type.</typeparam>
            <param name="subKey">Sub key.</param>
            <param name="lifeTime">Service life time.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.ServicesModule.RegisterService(System.Type,System.Func{System.Object})">
            <summary>
            Register service with service factory and scope life time.
            </summary>
            <param name="service">Service type.</param>
            <param name="serviceFactory">Service factory.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.ServicesModule.RegisterService``1(System.Func{System.Object})">
            <summary>
            Register service with service factory and scope life time.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <param name="serviceFactory">Service factory.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.ServicesModule.RegisterService(System.Type,System.Func{System.Object},System.String)">
            <summary>
            Register service with service factory and scope life time.
            </summary>
            <param name="service">Service type.</param>
            <param name="serviceFactory">Service factory.</param>
            <param name="subKey">Sub key.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.ServicesModule.RegisterService``1(System.Func{System.Object},System.String)">
            <summary>
            Register service with service factory and scope life time.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <param name="serviceFactory">Service factory.</param>
            <param name="subKey">Sub key.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.ServicesModule.RegisterService(System.Type,System.Func{System.Object},Ctrip.Duckbill.IOC.ServiceLifeTime)">
            <summary>
            Register service with service factory and service life time.
            </summary>
            <param name="service">Service type.</param>
            <param name="serviceFactory">Service factory.</param>
            <param name="lifeTime">Service life time.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.ServicesModule.RegisterService``1(System.Func{System.Object},Ctrip.Duckbill.IOC.ServiceLifeTime)">
            <summary>
            Register service with service factory and service life time.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <param name="serviceFactory">Service factory.</param>
            <param name="lifeTime">Service life time.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.ServicesModule.RegisterService(System.Type,System.Func{System.Object},System.String,Ctrip.Duckbill.IOC.ServiceLifeTime)">
            <summary>
            Register service with service factory and service life time.
            </summary>
            <param name="service">Service type.</param>
            <param name="serviceFactory">Service factory.</param>
            <param name="subKey">Sub key.</param>
            <param name="lifeTime">Service life time.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IOC.ServicesModule.RegisterService``1(System.Func{System.Object},System.String,Ctrip.Duckbill.IOC.ServiceLifeTime)">
            <summary>
            Register service with service factory and service life time.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <param name="serviceFactory">Service factory.</param>
            <param name="subKey">Sub key.</param>
            <param name="lifeTime">Service life time.</param>
        </member>
        <member name="T:Ctrip.Duckbill.IO.Extensions.PathExtensions">
            <summary>
            Path extensions.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IO.Extensions.PathExtensions.pathUtility">
            <summary>
            The stream utility.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Extensions.PathExtensions.EnsureFolderExist(System.String)">
            <summary>
            Ensure configurations configuration file folder is exist. If folder is miss then create a folder.
            </summary>
            <param name="filePath">Configuration file path.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Extensions.PathExtensions.GetPhysicalPath(System.String)">
            <summary>
            Get physical path.
            </summary>
            <param name="path">Parameter of path.</param>
            <returns>Physical path.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Extensions.PathExtensions.GetRelativePath(System.String)">
            <summary>
            Get relative path.
            </summary>
            <param name="path">Parameter of path.</param>
            <returns>Relative path.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Extensions.PathExtensions.GetExistDirectory(System.String)">
            <summary>
            Get the exist directory from this path to root.
            </summary>
            <param name="path">Current path.</param>
            <returns>Exist directory.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Extensions.PathExtensions.SetTestPathUtility(Ctrip.Duckbill.IO.IPathUtility)">
            <summary>
            Sets the test path utility.
            </summary>
            <param name="utility">The utility.</param>
        </member>
        <member name="T:Ctrip.Duckbill.IO.Extensions.StreamExtensions">
            <summary>
            Stream extensions.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IO.Extensions.StreamExtensions.streamUtility">
            <summary>
            The stream utility.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Extensions.StreamExtensions.GetBytes(System.IO.Stream)">
            <summary>
            Get bytes array.
            </summary>
            <param name="me">Current stream.</param>
            <returns>Bytes array.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Extensions.StreamExtensions.SetTestStreamUtility(Ctrip.Duckbill.IO.IStreamUtility)">
            <summary>
            Sets the test stream utility.
            </summary>
            <param name="utility">The utility.</param>
        </member>
        <member name="T:Ctrip.Duckbill.IO.IDirectoryInfo">
            <summary>
            Directory information.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.IO.IDirectoryWatcher">
            <summary>
            Directory watcher.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.IO.IDirectoryWatcher.Path">
            <summary>
            Gets full directory path.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IDirectoryWatcher.AddCreatedHandler(System.Action{System.Object,System.IO.FileSystemEventArgs})">
            <summary>
            Add created handler.
            </summary>
            <param name="createdHandler">Created handler.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IDirectoryWatcher.AddChangedHandler(System.Action{System.Object,System.IO.FileSystemEventArgs})">
            <summary>
            Add changed handler.
            </summary>
            <param name="changedHandler">Changed handler.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IDirectoryWatcher.AddDeletedHandler(System.Action{System.Object,System.IO.FileSystemEventArgs})">
            <summary>
            Add deleted handler.
            </summary>
            <param name="deletedHandler">Deleted handler.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IDirectoryWatcher.AddRenamedHandler(System.Action{System.Object,System.IO.RenamedEventArgs})">
            <summary>
            Add renamed handler.
            </summary>
            <param name="renamedHandler">Renamed handler.</param>
        </member>
        <member name="T:Ctrip.Duckbill.IO.IDirectoryWatcherFactory">
            <summary>
            Directory watcher factory.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IDirectoryWatcherFactory.CreateWatcher(System.String)">
            <summary>
            Create directory watcher.
            </summary>
            <param name="path">Full path.</param>
            <returns>Directory watcher.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.IO.IFileInfo">
            <summary>
            Provides the interface for both System.IO.FileInfo and System.IO.DirectoryInfo objects.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.IO.IFileInfo.Exists">
            <summary>
            Gets a value indicating whether a file exists..
            </summary>
            <value><c>true</c> if the file exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ctrip.Duckbill.IO.IFileInfo.FullName">
            <summary>
            Gets the full path of the directory or file.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.IO.IFileInfo.Attributes">
            <summary>
            Gets or sets the attributes for the current file or directory.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.IO.Implement.DirectoryInfoWrapper">
            <summary>
            Directory information wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IO.Implement.DirectoryInfoWrapper.myDirectoryInfo">
            <summary>
            My directory information.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.DirectoryInfoWrapper.#ctor(System.IO.DirectoryInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.IO.Implement.DirectoryInfoWrapper" /> class.
            </summary>
            <param name="directoryInfo">The directory information.</param>
        </member>
        <member name="T:Ctrip.Duckbill.IO.Implement.DirectoryWatcherFactory">
            <summary>
            Directory watch factory.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IO.Implement.DirectoryWatcherFactory.utility">
            <summary>
            Path utility.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.DirectoryWatcherFactory.#ctor(Ctrip.Duckbill.IO.IPathUtility)">
            <summary>
            Initializes a new instance of the DirectoryWatcherFactory class.
            </summary>
            <param name="utility">Path utility.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.DirectoryWatcherFactory.CreateWatcher(System.String)">
            <summary>
            Create directory watcher.
            </summary>
            <param name="path">Full path.</param>
            <returns>Directory watcher.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.IO.Implement.FileInfoWrapper">
            <summary>
            File information wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IO.Implement.FileInfoWrapper.myFileInfo">
            <summary>
            My file information.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.FileInfoWrapper.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.IO.Implement.FileInfoWrapper"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="P:Ctrip.Duckbill.IO.Implement.FileInfoWrapper.Exists">
            <summary>
            Gets a value indicating whether a file exists..
            </summary>
            <value><c>true</c> if the file exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ctrip.Duckbill.IO.Implement.FileInfoWrapper.FullName">
            <summary>
            Gets the full path of the directory or file.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.IO.Implement.FileInfoWrapper.Attributes">
            <summary>
            Gets or sets the attributes for the current file or directory.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.IO.Implement.FileSystemWatcherDirectoryWatcher">
            <summary>
            File system watcher directory watcher.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IO.Implement.FileSystemWatcherDirectoryWatcher.watcher">
            <summary>
            My watcher.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IO.Implement.FileSystemWatcherDirectoryWatcher.createdHandlers">
            <summary>
            Created handler.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IO.Implement.FileSystemWatcherDirectoryWatcher.changedHandlers">
            <summary>
            Changed handler.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IO.Implement.FileSystemWatcherDirectoryWatcher.deletedHandlers">
            <summary>
            Deleted handler.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IO.Implement.FileSystemWatcherDirectoryWatcher.renamedHandlers">
            <summary>
            Renamed handler.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.FileSystemWatcherDirectoryWatcher.#ctor(System.String,Ctrip.Duckbill.IO.IPathUtility)">
            <summary>
            Initializes a new instance of the FileSystemWatcherDirectoryWatcher class.
            </summary>
            <param name="path">Full requested path.</param>
            <param name="utility">Path utility.</param>
        </member>
        <member name="P:Ctrip.Duckbill.IO.Implement.FileSystemWatcherDirectoryWatcher.Path">
            <summary>
            Gets full directory path.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.FileSystemWatcherDirectoryWatcher.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.FileSystemWatcherDirectoryWatcher.AddCreatedHandler(System.Action{System.Object,System.IO.FileSystemEventArgs})">
            <summary>
            Add created handler.
            </summary>
            <param name="createdHandler">Created handler.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.FileSystemWatcherDirectoryWatcher.AddChangedHandler(System.Action{System.Object,System.IO.FileSystemEventArgs})">
            <summary>
            Add changed handler.
            </summary>
            <param name="changedHandler">Changed handler.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.FileSystemWatcherDirectoryWatcher.AddDeletedHandler(System.Action{System.Object,System.IO.FileSystemEventArgs})">
            <summary>
            Add deleted handler.
            </summary>
            <param name="deletedHandler">Deleted handler.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.FileSystemWatcherDirectoryWatcher.AddRenamedHandler(System.Action{System.Object,System.IO.RenamedEventArgs})">
            <summary>
            Add renamed handler.
            </summary>
            <param name="renamedHandler">Renamed handler.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.FileSystemWatcherDirectoryWatcher.OnCreated(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            On path changed event.
            </summary>
            <param name="source">Changed source.</param>
            <param name="e">Path change event args.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.FileSystemWatcherDirectoryWatcher.OnDeleted(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            On path changed event.
            </summary>
            <param name="source">Changed source.</param>
            <param name="e">Path change event args.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.FileSystemWatcherDirectoryWatcher.OnChanged(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            On path changed event.
            </summary>
            <param name="source">Changed source.</param>
            <param name="e">Path change event args.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.FileSystemWatcherDirectoryWatcher.OnRenamed(System.Object,System.IO.RenamedEventArgs)">
            <summary>
            On path rename event.
            </summary>
            <param name="source">Rename source.</param>
            <param name="e">Path rename args.</param>
        </member>
        <member name="T:Ctrip.Duckbill.IO.Implement.PathUtility">
            <summary>
            Default path utility.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IO.Implement.PathUtility.staticPath">
            <summary>
            Static path.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IO.Implement.PathUtility.staticDirectory">
            <summary>
            Static directory.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.IO.Implement.PathUtility.staticFile">
            <summary>
            Static file.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.PathUtility.#ctor(Ctrip.Duckbill.IO.IStaticPath,Ctrip.Duckbill.IO.IStaticDirectory,Ctrip.Duckbill.IO.IStaticFile)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.IO.Implement.PathUtility"/> class.
            </summary>
            <param name="staticPath">Static path.</param>
            <param name="staticDirectory">Static directory.</param>
            <param name="staticFile">Static file.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.PathUtility.GetDirectory(System.String)">
            <summary>
            Get path directory.
            </summary>
            <param name="path">The path of a file or directory.</param>
            <returns>If path is a file, return file directory full path. If path is a directory, return the directory. If path is not exist, return string.Empty.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.PathUtility.GetExistDirectoryOrParentDirectory(System.String)">
            <summary>
            Get the first exist directory or parent directory.
            </summary>
            <param name="path">The path of a file or directory.</param>
            <returns>If path is a file, return the first exist directory or parent directory full path. If path is a directory, return it self or first exist parent directory. If all parent directives are not exist, return string.Empty.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.PathUtility.EnsureFolderExist(System.String)">
            <summary>
            Ensure directory or file directory is exist. If directory is not exist then create the directory(with chain).
            </summary>
            <param name="path">Directory or file path.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.PathUtility.GetPhysicalPath(System.String)">
            <summary>
            Get physical path.
            </summary>
            <param name="path">Parameter of path.</param>
            <returns>Physical path.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.PathUtility.GetRelativePath(System.String)">
            <summary>
            Get relative path.
            </summary>
            <param name="path">Parameter of path.</param>
            <returns>Relative path.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.PathUtility.CreateFolderChain(System.String)">
            <summary>
            Create path.
            </summary>
            <param name="folderPath">Configuration folder.</param>
        </member>
        <member name="T:Ctrip.Duckbill.IO.Implement.StaticDirectory">
            <summary>
            Dot net static directory functions wrap.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.StaticDirectory.CreateDirectory(System.String)">
            <summary>
            Creates all directories and subdirectories in the specified path.
            </summary>
            <param name="path">The directory path to create.</param>
            <returns>An object that represents the directory for the specified path.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.StaticDirectory.Delete(System.String)">
            <summary>
             Deletes an empty directory from a specified path.
            </summary>
            <param name="path">The name of the empty directory to remove. This directory must be writable or empty.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.StaticDirectory.Delete(System.String,System.Boolean)">
            <summary>
            Deletes the specified directory and, if indicated, any subdirectories and files in the directory.
            </summary>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive">True to remove directories, subdirectories, and files in path; otherwise, false.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.StaticDirectory.GetCurrentDirectory">
            <summary>
            Gets the current working directory of the application.
            </summary>
            <returns>A string that contains the path of the current working directory, and does not end with a backslash (\).</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.NotSupportedException">The operating system is Windows CE, which does not have current directory functionality.This method is available in the .NET Compact Framework, but is not currently supported.</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.StaticDirectory.Exists(System.String)">
            <summary>
            Determines whether the given path refers to an existing directory on disk.
            </summary>
            <param name="path">The path to test.</param>
            <returns>True if path refers to an existing directory; otherwise, false.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.StaticDirectory.GetDirectories(System.String)">
            <summary>
            Gets the names of subdirectories (including their paths) in the specified directory.
            </summary>
            <param name="path">The path for which an array of subdirectory names is returned.</param>
            <returns>An array of the full names (including paths) of subdirectories in the specified path.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">Path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars.</exception>
            <exception cref="T:System.ArgumentNullException">Path is null.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.IOException">Path is a file name.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.StaticDirectory.GetDirectories(System.String,System.String)">
            <summary>
            Gets the names of subdirectories (including their paths) that match the specified search pattern in the current directory.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against the names of files in path. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by System.IO.Path.DirectorySeparatorChar or System.IO.Path.AltDirectorySeparatorChar, nor can it contain any of the characters in System.IO.Path.InvalidPathChars.</param>
            <returns>An array of the full names (including paths) of the subdirectories that match the search pattern.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">Path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars.</exception>
            <exception cref="T:System.ArgumentNullException">Path or searchPattern is null.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.IOException">Path is a file name.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.StaticDirectory.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the names of the subdirectories (including their paths) that match the specified search pattern in the current directory, and optionally searches subdirectories.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against the names of files in path. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by System.IO.Path.DirectorySeparatorChar or System.IO.Path.AltDirectorySeparatorChar, nor can it contain any of the characters in System.IO.Path.InvalidPathChars.</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include all subdirectories or only the current directory.</param>
            <returns>An array of the full names (including paths) of the subdirectories that match the search pattern.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">Path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars.</exception>
            <exception cref="T:System.ArgumentNullException">Path or searchPattern is null.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.IOException">Path is a file name.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.StaticDirectory.GetDirectoryRoot(System.String)">
            <summary>
            Returns the volume information, root information, or both for the specified path.
            </summary>
            <param name="path">The path of a file or directory.</param>
            <returns>A string that contains the volume information, root information, or both for the specified path.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">Path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars.</exception>
            <exception cref="T:System.ArgumentNullException">Path is null.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.StaticDirectory.GetFiles(System.String)">
            <summary>
            Returns the names of files (including their paths) in the specified directory.
            </summary>
            <param name="path">The directory from which to retrieve the files.</param>
            <returns>An array of the full names (including paths) for the files in the specified directory.</returns>
            <exception cref="T:System.IO.IOException">Path is a file name.-or-A network error has occurred.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">Path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars.</exception>
            <exception cref="T:System.ArgumentNullException">Path is null.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.StaticDirectory.GetFiles(System.String,System.String)">
            <summary>
            Returns the names of files (including their paths) that match the specified search pattern in the specified directory.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of files in path. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by System.IO.Path.DirectorySeparatorChar or System.IO.Path.AltDirectorySeparatorChar, nor can it contain any of the characters in System.IO.Path.InvalidPathChars.</param>
            <returns>An array of the full names (including paths) for the files in the specified directory that match the specified search pattern.</returns>
            <exception cref="T:System.IO.IOException">Path is a file name.-or-A network error has occurred.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">Path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars.</exception>
            <exception cref="T:System.ArgumentNullException">Path or searchPattern is null.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.StaticDirectory.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns the names of files (including their paths) that match the specified search pattern in the specified directory, using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of files in path. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by System.IO.Path.DirectorySeparatorChar or System.IO.Path.AltDirectorySeparatorChar, nor can it contain any of the characters in System.IO.Path.InvalidPathChars.</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include all subdirectories or only the current directory.</param>
            <returns>An array of the full names (including paths) for the files in the specified directory that match the specified search pattern and option.</returns>
            <exception cref="T:System.IO.IOException">Path is a file name.-or-A network error has occurred.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">Path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars.</exception>
            <exception cref="T:System.ArgumentNullException">Path or searchPattern is null.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.StaticDirectory.GetFileSystemEntries(System.String)">
            <summary>
            Returns the names of all files and subdirectories in the specified directory.
            </summary>
            <param name="path">The directory for which file and subdirectory names are returned.</param>
            <returns>An array of the names of files and subdirectories in the specified directory.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">Path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars.</exception>
            <exception cref="T:System.ArgumentNullException">Path is null.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.IOException">Path is a file name.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.StaticDirectory.GetFileSystemEntries(System.String,System.String)">
            <summary>
            Returns an array of file system entries that match the specified search criteria.
            </summary>
            <param name="path">The path to be searched.</param>
            <param name="searchPattern">The search string to match against the names of files in path. The searchPattern parameter cannot end in two periods ("..") or contain two periods ("..") followed by System.IO.Path.DirectorySeparatorChar or System.IO.Path.AltDirectorySeparatorChar, nor can it contain any of the characters in System.IO.Path.InvalidPathChars.</param>
            <returns>An array of file system entries that match the specified search criteria.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">Path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars.</exception>
            <exception cref="T:System.ArgumentNullException">Path or searchPattern is null.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.IOException">Path is a file name.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.StaticDirectory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets an array of all the file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The string used to search for all files or directories that match its search pattern. The default pattern is for all files and directories: "*".</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.The default value is System.IO.SearchOption.TopDirectoryOnly.</param>
            <returns>An array of file system entries that match the specified search criteria.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">Path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars.</exception>
            <exception cref="T:System.ArgumentNullException">Path or searchPattern is null.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.IOException">Path is a file name.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">SearchOption is not a valid System.IO.SearchOption value.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="T:Ctrip.Duckbill.IO.Implement.StaticFile">
            <summary>
            Static file.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.StaticFile.Create(System.String)">
            <summary>
            Creates or overwrites a file in the specified path.
            </summary>
            <param name="path">The path and name of the file to create.</param>
            <returns>A System.IO.FileStream that provides read/write access to the file specified in path.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.StaticFile.Exists(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="path">The file to check.</param>
            <returns>true if the caller has the required permissions and path contains the name of an existing file; otherwise, false. This method also returns false if path is null, an invalid path, or a zero-length string. If the caller does not have sufficient permissions to read the specified file, no exception is thrown and the method returns false regardless of the existence of path.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.StaticFile.Delete(System.String)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="path">The name of the file to be deleted. Wildcard characters are not supported.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.StaticFile.ReadAllText(System.String)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>A string containing all lines of the file.</returns>
            <exception cref="T:System.ArgumentException">Path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.ArgumentNullException">Path is null.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.ArgumentException">Path specified a file that is read-only.-or- This operation is not supported on the current platform.-or- path specified a directory.-or- The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in path was not found.</exception>
            <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.StaticFile.WriteAllText(System.String,System.String)">
            <summary>
            Creates a new file, writes the specified string to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <exception cref="T:System.ArgumentException">Path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.ArgumentNullException">Path is null or contents is empty.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.StaticFile.GetFileInfo(System.String)">
            <summary>
            Gets the file information.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>File information interface.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.IO.Implement.StaticPath">
            <summary>
            Static path.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.StaticPath.Combine(System.String[])">
            <summary>
            Combines an array of strings into a path.
            </summary>
            <param name="paths">An array of parts of the path.</param>
            <returns>The combined paths.</returns>
            <exception cref="T:System.ArgumentException">One of the strings in the array contains one or more of the invalid characters defined in System.IO.Path.GetInvalidPathChars().</exception>
            <exception cref="T:System.ArgumentNullException">One of the strings in the array is null.</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.StaticPath.GetDirectoryName(System.String)">
            <summary>
            Returns the directory information for the specified path string.
            </summary>
            <param name="path">The path of a file or directory.</param>
            <returns>Directory information for path, or null if path denotes a root directory or is null. Returns System.String.Empty if path does not contain directory information.</returns>
            <exception cref="T:System.ArgumentException">The path parameter contains invalid characters, is empty, or contains only white spaces.</exception>
            <exception cref="T:System.IO.PathTooLongException">The path parameter is longer than the system-defined maximum length.</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.StaticPath.GetExtension(System.String)">
            <summary>
            Returns the extension of the specified path string.
            </summary>
            <param name="path">The path string from which to get the extension.</param>
            <returns>The extension of the specified path (including the period "."), or null, or System.String.Empty. If path is null, System.IO.Path.GetExtension(System.String) returns null. If path does not have extension information, System.IO.Path.GetExtension(System.String) returns System.String.Empty.</returns>
            <exception cref="T:System.ArgumentException">Path contains one or more of the invalid characters defined in System.IO.Path.GetInvalidPathChars().</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.StaticPath.GetFileName(System.String)">
            <summary>
            Returns the file name and extension of the specified path string.
            </summary>
            <param name="path">The path string from which to obtain the file name and extension.</param>
            <returns>The characters after the last directory character in path. If the last character of path is a directory or volume separator character, this method returns System.String.Empty. If path is null, this method returns null.</returns>
            <exception cref="T:System.ArgumentException">Path contains one or more of the invalid characters defined in System.IO.Path.GetInvalidPathChars().</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.StaticPath.GetFileNameWithoutExtension(System.String)">
            <summary>
            Returns the file name of the specified path string without the extension.
            </summary>
            <param name="path">The path of the file.</param>
            <returns>The string returned by System.IO.Path.GetFileName(System.String), minus the last period (.) and all characters following it.</returns>
            <exception cref="T:System.ArgumentException">Path contains one or more of the invalid characters defined in System.IO.Path.GetInvalidPathChars().</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.StaticPath.GetFullPath(System.String)">
            <summary>
            Returns the absolute path for the specified path string.
            </summary>
            <param name="path">The file or directory for which to obtain absolute path information.</param>
            <returns>The fully qualified location of path, such as "C:\MyFile.txt".</returns>
            <exception cref="T:System.ArgumentException">Path is a zero-length string, contains only white space, or contains one or more of the invalid characters defined in System.IO.Path.GetInvalidPathChars().-or- The system could not retrieve the absolute path.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
            <exception cref="T:System.ArgumentNullException">Path is null.</exception>
            <exception cref="T:System.NotSupportedException">Path contains a colon (":") that is not part of a volume identifier (for example, "c:\").</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.StaticPath.HasExtension(System.String)">
            <summary>
            Determines whether a path includes a file name extension.
            </summary>
            <param name="path">The path to search for an extension.</param>
            <returns>True if the characters that follow the last directory separator (\\ or /) or volume separator (:) in the path include a period (.) followed by one or more characters; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">Path contains one or more of the invalid characters defined in System.IO.Path.GetInvalidPathChars().</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.StaticPath.IsPathRooted(System.String)">
            <summary>
            Gets a value indicating whether the specified path string contains a root.
            </summary>
            <param name="path">The path to test.</param>
            <returns>True if path contains a root; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">Path contains one or more of the invalid characters defined in System.IO.Path.GetInvalidPathChars().</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.StaticPath.GetPathRoot(System.String)">
            <summary>
            Gets the root directory information of the specified path.
            </summary>
            <param name="path">The path from which to obtain root directory information.</param>
            <returns>The root directory of path, such as "C:\", or null if path is null, or an empty string if path does not contain root directory information.</returns>
            <exception cref="T:System.ArgumentException">Path contains one or more of the invalid characters defined in System.IO.Path.GetInvalidPathChars().-or- System.String.Empty was passed to path.</exception>
        </member>
        <member name="T:Ctrip.Duckbill.IO.Implement.StreamUtility">
            <summary>
            Stream utility.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IO.Implement.StreamUtility.GetBytes(System.IO.Stream)">
            <summary>
            Get bytes array.
            </summary>
            <param name="me">Current stream.</param>
            <returns>Bytes array.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.IO.IPathUtility">
            <summary>
            Path utility interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IPathUtility.GetDirectory(System.String)">
            <summary>
            Get path directory.
            </summary>
            <param name="path">The path of a file or directory.</param>
            <returns>If path is a file, return file directory full path. If path is a directory, return the directory. If path is not exist, return string.Empty.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IPathUtility.GetExistDirectoryOrParentDirectory(System.String)">
            <summary>
            Get the first exist directory or parent directory.
            </summary>
            <param name="path">The path of a file or directory.</param>
            <returns>If path is a file, return the first exist directory or parent directory full path. If path is a directory, return it self or first exist parent directory. If all parent directies are not exist, return string.Empty.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IPathUtility.EnsureFolderExist(System.String)">
            <summary>
            Ensure directory or file directory is exist. If directory is not exist then create the directory(with chain).
            </summary>
            <param name="path">Directory or file path.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IPathUtility.GetPhysicalPath(System.String)">
            <summary>
            Get physical path.
            </summary>
            <param name="path">Parameter of path.</param>
            <returns>Physical path.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IPathUtility.GetRelativePath(System.String)">
            <summary>
            Get relative path.
            </summary>
            <param name="path">Parameter of path.</param>
            <returns>Relative path.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.IO.IStaticDirectory">
            <summary>
            Dotnet static directory functions.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IStaticDirectory.CreateDirectory(System.String)">
            <summary>
            Creates all directories and subdirectories in the specified path.
            </summary>
            <param name="path">The directory path to create.</param>
            <returns>An object that represents the directory for the specified path.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IStaticDirectory.Delete(System.String)">
            <summary>
             Deletes an empty directory from a specified path.
            </summary>
            <param name="path">The name of the empty directory to remove. This directory must be writable or empty.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IStaticDirectory.Delete(System.String,System.Boolean)">
            <summary>
            Deletes the specified directory and, if indicated, any subdirectories and files in the directory.
            </summary>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive">True to remove directories, subdirectories, and files in path; otherwise, false.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IStaticDirectory.GetCurrentDirectory">
            <summary>
            Gets the current working directory of the application.
            </summary>
            <returns>A string that contains the path of the current working directory, and does not end with a backslash (\).</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.NotSupportedException">The operating system is Windows CE, which does not have current directory functionality.This method is available in the .NET Compact Framework, but is not currently supported.</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IStaticDirectory.Exists(System.String)">
            <summary>
            Determines whether the given path refers to an existing directory on disk.
            </summary>
            <param name="path">The path to test.</param>
            <returns>True if path refers to an existing directory; otherwise, false.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IStaticDirectory.GetDirectories(System.String)">
            <summary>
            Gets the names of subdirectories (including their paths) in the specified directory.
            </summary>
            <param name="path">The path for which an array of subdirectory names is returned.</param>
            <returns>An array of the full names (including paths) of subdirectories in the specified path.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">Path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars.</exception>
            <exception cref="T:System.ArgumentNullException">Path is null.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.IOException">Path is a file name.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IStaticDirectory.GetDirectories(System.String,System.String)">
            <summary>
            Gets the names of subdirectories (including their paths) that match the specified search pattern in the current directory.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against the names of files in path. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by System.IO.Path.DirectorySeparatorChar or System.IO.Path.AltDirectorySeparatorChar, nor can it contain any of the characters in System.IO.Path.InvalidPathChars.</param>
            <returns>An array of the full names (including paths) of the subdirectories that match the search pattern.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">Path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars.</exception>
            <exception cref="T:System.ArgumentNullException">Path or searchPattern is null.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.IOException">Path is a file name.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IStaticDirectory.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the names of the subdirectories (including their paths) that match the specified search pattern in the current directory, and optionally searches subdirectories.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against the names of files in path. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by System.IO.Path.DirectorySeparatorChar or System.IO.Path.AltDirectorySeparatorChar, nor can it contain any of the characters in System.IO.Path.InvalidPathChars.</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include all subdirectories or only the current directory.</param>
            <returns>An array of the full names (including paths) of the subdirectories that match the search pattern.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">Path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars.</exception>
            <exception cref="T:System.ArgumentNullException">Path or searchPattern is null.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.IOException">Path is a file name.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IStaticDirectory.GetDirectoryRoot(System.String)">
            <summary>
            Returns the volume information, root information, or both for the specified path.
            </summary>
            <param name="path">The path of a file or directory.</param>
            <returns>A string that contains the volume information, root information, or both for the specified path.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">Path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars.</exception>
            <exception cref="T:System.ArgumentNullException">Path is null.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IStaticDirectory.GetFiles(System.String)">
            <summary>
            Returns the names of files (including their paths) in the specified directory.
            </summary>
            <param name="path">The directory from which to retrieve the files.</param>
            <returns>An array of the full names (including paths) for the files in the specified directory.</returns>
            <exception cref="T:System.IO.IOException">Path is a file name.-or-A network error has occurred.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">Path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars.</exception>
            <exception cref="T:System.ArgumentNullException">Path is null.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IStaticDirectory.GetFiles(System.String,System.String)">
            <summary>
            Returns the names of files (including their paths) that match the specified search pattern in the specified directory.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of files in path. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by System.IO.Path.DirectorySeparatorChar or System.IO.Path.AltDirectorySeparatorChar, nor can it contain any of the characters in System.IO.Path.InvalidPathChars.</param>
            <returns>An array of the full names (including paths) for the files in the specified directory that match the specified search pattern.</returns>
            <exception cref="T:System.IO.IOException">Path is a file name.-or-A network error has occurred.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">Path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars.</exception>
            <exception cref="T:System.ArgumentNullException">Path or searchPattern is null.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IStaticDirectory.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns the names of files (including their paths) that match the specified search pattern in the specified directory, using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of files in path. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by System.IO.Path.DirectorySeparatorChar or System.IO.Path.AltDirectorySeparatorChar, nor can it contain any of the characters in System.IO.Path.InvalidPathChars.</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include all subdirectories or only the current directory.</param>
            <returns>An array of the full names (including paths) for the files in the specified directory that match the specified search pattern and option.</returns>
            <exception cref="T:System.IO.IOException">Path is a file name.-or-A network error has occurred.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">Path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars.</exception>
            <exception cref="T:System.ArgumentNullException">Path or searchPattern is null.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IStaticDirectory.GetFileSystemEntries(System.String)">
            <summary>
            Returns the names of all files and subdirectories in the specified directory.
            </summary>
            <param name="path">The directory for which file and subdirectory names are returned.</param>
            <returns>An array of the names of files and subdirectories in the specified directory.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">Path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars.</exception>
            <exception cref="T:System.ArgumentNullException">Path is null.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.IOException">Path is a file name.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IStaticDirectory.GetFileSystemEntries(System.String,System.String)">
            <summary>
            Returns an array of file system entries that match the specified search criteria.
            </summary>
            <param name="path">The path to be searched.</param>
            <param name="searchPattern">The search string to match against the names of files in path. The searchPattern parameter cannot end in two periods ("..") or contain two periods ("..") followed by System.IO.Path.DirectorySeparatorChar or System.IO.Path.AltDirectorySeparatorChar, nor can it contain any of the characters in System.IO.Path.InvalidPathChars.</param>
            <returns>An array of file system entries that match the specified search criteria.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">Path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars.</exception>
            <exception cref="T:System.ArgumentNullException">Path or searchPattern is null.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.IOException">Path is a file name.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IStaticDirectory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets an array of all the file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The string used to search for all files or directories that match its search pattern. The default pattern is for all files and directories: "*".</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.The default value is System.IO.SearchOption.TopDirectoryOnly.</param>
            <returns>An array of file system entries that match the specified search criteria.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">Path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars.</exception>
            <exception cref="T:System.ArgumentNullException">Path or searchPattern is null.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.IOException">Path is a file name.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">SearchOption is not a valid System.IO.SearchOption value.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="T:Ctrip.Duckbill.IO.IStaticFile">
            <summary>
            Dotnet static file functions.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IStaticFile.Create(System.String)">
            <summary>
            Creates or overwrites a file in the specified path.
            </summary>
            <param name="path">The path and name of the file to create.</param>
            <returns>A System.IO.FileStream that provides read/write access to the file specified in path.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IStaticFile.Exists(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="path">The file to check.</param>
            <returns>true if the caller has the required permissions and path contains the name of an existing file; otherwise, false. This method also returns false if path is null, an invalid path, or a zero-length string. If the caller does not have sufficient permissions to read the specified file, no exception is thrown and the method returns false regardless of the existence of path.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IStaticFile.Delete(System.String)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="path">The name of the file to be deleted. Wildcard characters are not supported.</param>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IStaticFile.ReadAllText(System.String)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>A string containing all lines of the file.</returns>
            <exception cref="T:System.ArgumentException">Path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.ArgumentNullException">Path is null.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.ArgumentException">Path specified a file that is read-only.-or- This operation is not supported on the current platform.-or- path specified a directory.-or- The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in path was not found.</exception>
            <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IStaticFile.WriteAllText(System.String,System.String)">
            <summary>
            Creates a new file, writes the specified string to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <exception cref="T:System.ArgumentException">Path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.ArgumentNullException">Path is null or contents is empty.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.NotSupportedException">Path is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IStaticFile.GetFileInfo(System.String)">
            <summary>
            Gets the file information.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>File information interface.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.IO.IStaticPath">
            <summary>
            Dotnet static path functions.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IStaticPath.Combine(System.String[])">
            <summary>
            Combines an array of strings into a path.
            </summary>
            <param name="paths">An array of parts of the path.</param>
            <returns>The combined paths.</returns>
            <exception cref="T:System.ArgumentException">One of the strings in the array contains one or more of the invalid characters defined in System.IO.Path.GetInvalidPathChars().</exception>
            <exception cref="T:System.ArgumentNullException">One of the strings in the array is null.</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IStaticPath.GetDirectoryName(System.String)">
            <summary>
            Returns the directory information for the specified path string.
            </summary>
            <param name="path">The path of a file or directory.</param>
            <returns>Directory information for path, or null if path denotes a root directory or is null. Returns System.String.Empty if path does not contain directory information.</returns>
            <exception cref="T:System.ArgumentException">The path parameter contains invalid characters, is empty, or contains only white spaces.</exception>
            <exception cref="T:System.IO.PathTooLongException">The path parameter is longer than the system-defined maximum length.</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IStaticPath.GetExtension(System.String)">
            <summary>
            Returns the extension of the specified path string.
            </summary>
            <param name="path">The path string from which to get the extension.</param>
            <returns>The extension of the specified path (including the period "."), or null, or System.String.Empty. If path is null, System.IO.Path.GetExtension(System.String) returns null. If path does not have extension information, System.IO.Path.GetExtension(System.String) returns System.String.Empty.</returns>
            <exception cref="T:System.ArgumentException">Path contains one or more of the invalid characters defined in System.IO.Path.GetInvalidPathChars().</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IStaticPath.GetFileName(System.String)">
            <summary>
            Returns the file name and extension of the specified path string.
            </summary>
            <param name="path">The path string from which to obtain the file name and extension.</param>
            <returns>The characters after the last directory character in path. If the last character of path is a directory or volume separator character, this method returns System.String.Empty. If path is null, this method returns null.</returns>
            <exception cref="T:System.ArgumentException">Path contains one or more of the invalid characters defined in System.IO.Path.GetInvalidPathChars().</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IStaticPath.GetFileNameWithoutExtension(System.String)">
            <summary>
            Returns the file name of the specified path string without the extension.
            </summary>
            <param name="path">The path of the file.</param>
            <returns>The string returned by System.IO.Path.GetFileName(System.String), minus the last period (.) and all characters following it.</returns>
            <exception cref="T:System.ArgumentException">Path contains one or more of the invalid characters defined in System.IO.Path.GetInvalidPathChars().</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IStaticPath.GetFullPath(System.String)">
            <summary>
            Returns the absolute path for the specified path string.
            </summary>
            <param name="path">The file or directory for which to obtain absolute path information.</param>
            <returns>The fully qualified location of path, such as "C:\MyFile.txt".</returns>
            <exception cref="T:System.ArgumentException">Path is a zero-length string, contains only white space, or contains one or more of the invalid characters defined in System.IO.Path.GetInvalidPathChars().-or- The system could not retrieve the absolute path.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
            <exception cref="T:System.ArgumentNullException">Path is null.</exception>
            <exception cref="T:System.NotSupportedException">Path contains a colon (":") that is not part of a volume identifier (for example, "c:\").</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IStaticPath.HasExtension(System.String)">
            <summary>
            Determines whether a path includes a file name extension.
            </summary>
            <param name="path">The path to search for an extension.</param>
            <returns>True if the characters that follow the last directory separator (\\ or /) or volume separator (:) in the path include a period (.) followed by one or more characters; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">Path contains one or more of the invalid characters defined in System.IO.Path.GetInvalidPathChars().</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IStaticPath.IsPathRooted(System.String)">
            <summary>
            Gets a value indicating whether the specified path string contains a root.
            </summary>
            <param name="path">The path to test.</param>
            <returns>True if path contains a root; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">Path contains one or more of the invalid characters defined in System.IO.Path.GetInvalidPathChars().</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IStaticPath.GetPathRoot(System.String)">
            <summary>
            Gets the root directory information of the specified path.
            </summary>
            <param name="path">The path from which to obtain root directory information.</param>
            <returns>The root directory of path, such as "C:\", or null if path is null, or an empty string if path does not contain root directory information.</returns>
            <exception cref="T:System.ArgumentException">Path contains one or more of the invalid characters defined in System.IO.Path.GetInvalidPathChars().-or- System.String.Empty was passed to path.</exception>
        </member>
        <member name="T:Ctrip.Duckbill.IO.IStreamUtility">
            <summary>
            Stream utility interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IO.IStreamUtility.GetBytes(System.IO.Stream)">
            <summary>
            Get bytes array.
            </summary>
            <param name="me">Current stream.</param>
            <returns>Bytes array.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.IRandom">
            <summary>
            Represents a pseudo-random number generator, a device that produces a sequence of numbers that meet certain statistical requirements for randomness.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IRandom.Next">
            <summary>
            Returns a nonnegative random number.
            </summary>
            <returns>A 32-bit signed integer greater than or equal to zero and less than System.Int32.MaxValue.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IRandom.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number to be generated. maxValue must be greater than or equal to zero.</param>
            <returns>A 32-bit signed integer greater than or equal to zero, and less than maxValue; that is, the range of return values ordinarily includes zero but not maxValue. However, if maxValue equals zero, maxValue is returned.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">MaxValue is less than zero.</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IRandom.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within a specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue.</param>
            <returns>A 32-bit signed integer greater than or equal to minValue and less than maxValue; that is, the range of return values includes minValue but not maxValue. If minValue equals maxValue, minValue is returned.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">MinValue is greater than maxValue.</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IRandom.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers.
            </summary>
            <param name="buffer">An array of bytes to contain random numbers.</param>
            <exception cref="T:System.ArgumentNullException">Buffer is null.</exception>
        </member>
        <member name="M:Ctrip.Duckbill.IRandom.NextDouble">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>A double-precision floating point number greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.IRegex">
            <summary>
            Regex interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.IRegex.IsMatch(System.String,System.String)">
            <summary>
            Indicates whether the specified regular expression finds a match in the specified input string.
            </summary>
            <param name="input">The string to search for a match. </param>
            <param name="pattern">The regular expression pattern to match. </param>
            <returns>True if the regular expression finds a match; otherwise, false.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IRegex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Indicates whether the specified regular expression finds a match in the specified input string, using the specified matching options.
            </summary>
            <param name="input">The string to search for a match. </param>
            <param name="pattern">The regular expression pattern to match. </param>
            <param name="option">A bitwise combination of the enumeration values that provide options for matching. </param>
            <returns>True if the regular expression finds a match; otherwise, false.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IRegex.Replace(System.String,System.String,System.String)">
            <summary>
            In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string.
            </summary>
            <param name="input">The string to search for a match. </param>
            <param name="pattern">The regular expression pattern to match. </param>
            <param name="replacement">The replacement string. </param>
            <returns>A new string that is identical to the input string, except that the replacement string takes the place of each matched string.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IRegex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string. Specified options modify the matching operation.
            </summary>
            <param name="input">The string to search for a match. </param>
            <param name="pattern">The regular expression pattern to match. </param>
            <param name="replacement">The replacement string. </param>
            <param name="option">A bitwise combination of the enumeration values that provide options for matching. </param>
            <returns>A new string that is identical to the input string, except that the replacement string takes the place of each matched string.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IRegex.Match(System.String,System.String)">
            <summary>
            Searches the specified input string for the first occurrence of the specified regular expression.
            </summary>
            <param name="input">The string to search for a match. </param>
            <param name="pattern">The regular expression pattern to match. </param>
            <returns>An object that contains information about the match.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IRegex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Searches the input string for the first occurrence of the specified regular expression, using the specified matching options.
            </summary>
            <param name="input">The string to search for a match. </param>
            <param name="pattern">The regular expression pattern to match. </param>
            <param name="option">A bitwise combination of the enumeration values that provide options for matching. </param>
            <returns>An object that contains information about the match.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IRegex.Matches(System.String,System.String)">
            <summary>
            Searches the specified input string for all occurrences of a specified regular expression.
            </summary>
            <param name="input">The string to search for a match. </param>
            <param name="pattern">The regular expression pattern to match. </param>
            <returns>A collection of the Match objects found by the search.If no matches are found, the method returns an empty collection object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.IRegex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Searches the specified input string for all occurrences of a specified regular expression, using the specified matching options.
            </summary>
            <param name="input">The string to search for a match. </param>
            <param name="pattern">The regular expression pattern to match. </param>
            <param name="option">A bitwise combination of the enumeration values that provide options for matching. </param>
            <returns>A collection of the Match objects found by the search.If no matches are found, the method returns an empty collection object.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Log.BaseAsyncLogListener">
            <summary>
            Base async log listener.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Log.BaseAsyncLogListener.AsyncLogQueue">
            <summary>
            The asynchronous log queue.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Log.BaseAsyncLogListener.currentThread">
            <summary>
            The current thread.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Log.BaseAsyncLogListener.tasks">
            <summary>
            The tasks.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Log.BaseAsyncLogListener.#ctor(System.String,Ctrip.Duckbill.Threading.ITaskFactory,Ctrip.Duckbill.Threading.ICurrentThread,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Log.BaseAsyncLogListener" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="taskFactory">The task factory.</param>
            <param name="currentThread">The current thread.</param>
            <param name="taskCount">The task count.</param>
        </member>
        <member name="P:Ctrip.Duckbill.Log.BaseAsyncLogListener.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Ctrip.Duckbill.Log.BaseAsyncLogListener.Write(Ctrip.Duckbill.Log.ILogEntry)">
            <summary>
            Writes the specified log.
            </summary>
            <param name="log">The log.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Log.BaseAsyncLogListener.RealWrite(Ctrip.Duckbill.Log.ILogEntry)">
            <summary>
            Reals write.
            </summary>
            <param name="log">The log.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Log.BaseAsyncLogListener.MonitorAction">
            <summary>
            Monitor action.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Log.BaseAsyncLogSource">
            <summary>
            Base async log source.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Log.BaseAsyncLogSource.AsyncLogQueue">
            <summary>
            The asynchronous log queue.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Log.BaseAsyncLogSource.currentThread">
            <summary>
            The current thread.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Log.BaseAsyncLogSource.tasks">
            <summary>
            The tasks.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Log.BaseAsyncLogSource.#ctor(System.String,Ctrip.Duckbill.Log.ILogConfigRepository,Ctrip.Duckbill.Log.ILogFilterRepository,Ctrip.Duckbill.Log.ILogListenerRepository,Ctrip.Duckbill.Log.ILogFormatterRepository,Ctrip.Duckbill.Threading.ITaskFactory,Ctrip.Duckbill.Threading.ICurrentThread,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Log.BaseAsyncLogSource" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="logConfigRepository">The log configuration repository.</param>
            <param name="logFilterRepository">The log filter repository.</param>
            <param name="logListenerRepository">The log listener repository.</param>
            <param name="logFormatterRepository">The log formatter repository.</param>
            <param name="taskFactory">The task factory.</param>
            <param name="currentThread">The current thread.</param>
            <param name="taskCount">The task count.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Log.BaseAsyncLogSource.Process(Ctrip.Duckbill.Log.ILogEntry)">
            <summary>
            Processes the specified log.
            </summary>
            <param name="log">The log.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Log.BaseAsyncLogSource.MonitorAction">
            <summary>
            Monitor action.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Log.BaseLogSource">
            <summary>
            Base log source.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Log.BaseLogSource.LogConfigRepository">
            <summary>
            The log configuration repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Log.BaseLogSource.LogFilterRepository">
            <summary>
            The log filter repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Log.BaseLogSource.LogListenerRepository">
            <summary>
            The log listener repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Log.BaseLogSource.LogFormatterRepository">
            <summary>
            The log formatter repository.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Log.BaseLogSource.#ctor(System.String,Ctrip.Duckbill.Log.ILogConfigRepository,Ctrip.Duckbill.Log.ILogFilterRepository,Ctrip.Duckbill.Log.ILogListenerRepository,Ctrip.Duckbill.Log.ILogFormatterRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Log.BaseLogSource" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="logConfigRepository">The log configuration repository.</param>
            <param name="logFilterRepository">The log filter repository.</param>
            <param name="logListenerRepository">The log listener repository.</param>
            <param name="logFormatterRepository">The log formatter repository.</param>
        </member>
        <member name="P:Ctrip.Duckbill.Log.BaseLogSource.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Ctrip.Duckbill.Log.BaseLogSource.Process(Ctrip.Duckbill.Log.ILogEntry)">
            <summary>
            Processes the specified log.
            </summary>
            <param name="log">The log.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Log.BaseLogSource.RealProcess(Ctrip.Duckbill.Log.ILogEntry)">
            <summary>
            Processes the specified log.
            </summary>
            <param name="log">The log.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Log.BaseLogSource.TryProcess(Ctrip.Duckbill.Log.ILogEntry@)">
            <summary>
            Tries the process.
            </summary>
            <param name="log">The log.</param>
            <returns><c>true</c> if log is valid after process, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Log.BaseLogSource.SpecialProcess(Ctrip.Duckbill.Log.ILogEntry)">
            <summary>
            Specials the process.
            </summary>
            <param name="log">The log.</param>
            <returns>Processed log.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Log.BaseLogSource.GetListeners">
            <summary>
            Gets the listeners.
            </summary>
            <returns>Log listeners.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Log.CommonAsyncSource">
            <summary>
            Common async source.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Log.CommonAsyncSource.#ctor(Ctrip.Duckbill.Log.ILogConfigRepository,Ctrip.Duckbill.Log.ILogFilterRepository,Ctrip.Duckbill.Log.ILogListenerRepository,Ctrip.Duckbill.Log.ILogFormatterRepository,Ctrip.Duckbill.Threading.ITaskFactory,Ctrip.Duckbill.Threading.ICurrentThread)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Log.CommonAsyncSource"/> class.
            </summary>
            <param name="logConfigRepository">The log configuration repository.</param>
            <param name="logFilterRepository">The log filter repository.</param>
            <param name="logListenerRepository">The log listener repository.</param>
            <param name="logFormatterRepository">The log formatter repository.</param>
            <param name="taskFactory">The task factory.</param>
            <param name="currentThread">The current thread.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Log.CommonFormatter">
            <summary>
            Common formatter.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Log.CommonFormatter.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Ctrip.Duckbill.Log.CommonFormatter.Format(Ctrip.Duckbill.Log.ILogEntry)">
            <summary>
            Formats the specified log.
            </summary>
            <param name="log">The log.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Log.CommonSource">
            <summary>
            Common source.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Log.CommonSource.#ctor(Ctrip.Duckbill.Log.ILogConfigRepository,Ctrip.Duckbill.Log.ILogFilterRepository,Ctrip.Duckbill.Log.ILogListenerRepository,Ctrip.Duckbill.Log.ILogFormatterRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Log.CommonSource"/> class.
            </summary>
            <param name="logConfigRepository">The log configuration repository.</param>
            <param name="logFilterRepository">The log filter repository.</param>
            <param name="logListenerRepository">The log listener repository.</param>
            <param name="logFormatterRepository">The log formatter repository.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Log.ExceptionFilter">
            <summary>
            Exception filter.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Log.ExceptionFilter.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Ctrip.Duckbill.Log.ExceptionFilter.TryProcess(Ctrip.Duckbill.Log.ILogEntry@)">
            <summary>
            Tries the process.
            </summary>
            <param name="log">The log.</param>
            <returns><c>true</c> if log is valid after process, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Log.GlobalOffLogFilter">
            <summary>
            Global off log filter.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Log.GlobalOffLogFilter.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Ctrip.Duckbill.Log.GlobalOffLogFilter.TryProcess(Ctrip.Duckbill.Log.ILogEntry@)">
            <summary>
            Tries the process.
            </summary>
            <param name="log">The log.</param>
            <returns><c>true</c> if log is valid after process, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Log.IDebuggingLogger">
            <summary>
            Debugging logger interface.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Log.IFrameworkLogger">
            <summary>
            I framework logger.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Log.IFrameworkLoggerFactory">
            <summary>
            Framework logger factory.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Log.IFrameworkLoggerFactory.CreateLogger">
            <summary>
            Create framework logger.
            </summary>
            <returns>Framework logger.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Log.ILogConfigRepository">
            <summary>
            Log configuration repository.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Log.ILogConfigRepository.DefaultSource">
            <summary>
            Gets the default source.
            </summary>
            <value>The default source.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Log.ILogConfigRepository.DefaultFormatter">
            <summary>
            Gets the default formatter.
            </summary>
            <value>The default formatter.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Log.ILogConfigRepository.GlobalFilters">
            <summary>
            Gets the global filters.
            </summary>
            <value>The global filters.</value>
        </member>
        <member name="M:Ctrip.Duckbill.Log.ILogConfigRepository.GetLogSourceConfig(System.String)">
            <summary>
            Gets the log source configuration.
            </summary>
            <param name="sourceName">Name of the source.</param>
            <returns>Log source config.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Log.ILogEntry">
            <summary>
            Log entry.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Log.ILogEntry.Priority">
            <summary>
            Gets or sets log priority.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Log.ILogEntry.EventID">
            <summary>
            Gets or sets event id.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Log.ILogEntry.Title">
            <summary>
            Gets or sets title.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Log.ILogEntry.Severity">
            <summary>
            Gets or sets severity.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Log.ILogEntry.Exception">
            <summary>
            Gets or sets exception.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Log.ILogEntry.Messages">
            <summary>
            Gets the messages.
            </summary>
            <value>The messages.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Log.ILogEntry.Categories">
            <summary>
            Gets the categories.
            </summary>
            <value>The categories.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Log.ILogEntry.Properties">
            <summary>
            Gets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Log.ILogEntry.Content">
            <summary>
            Gets the content.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Log.ILogEntry.LogText">
            <summary>
            Gets or sets the log text.
            </summary>
            <value>The log text.</value>
        </member>
        <member name="M:Ctrip.Duckbill.Log.ILogEntry.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Cloned log.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Log.ILogFilter">
            <summary>
            Log filter.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Log.ILogFilter.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Ctrip.Duckbill.Log.ILogFilter.TryProcess(Ctrip.Duckbill.Log.ILogEntry@)">
            <summary>
            Tries the process.
            </summary>
            <param name="log">The log.</param>
            <returns><c>true</c> if log is valid after process, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Log.ILogFilterConfig">
            <summary>
            Log filter config.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Log.ILogFilterConfig.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Log.ILogFilterConfig.IsOn">
            <summary>
            Gets a value indicating whether this instance is turn on.
            </summary>
            <value><c>true</c> if this instance is turn on; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Ctrip.Duckbill.Log.ILogFilterRepository">
            <summary>
            Log filter repository.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Log.ILogFilterRepository.GetFilter(System.String)">
            <summary>
            Gets the filter.
            </summary>
            <param name="filterName">Name of the filter.</param>
            <returns>Log filter name.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Log.ILogFormatter">
            <summary>
            Log formatter.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Log.ILogFormatter.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Ctrip.Duckbill.Log.ILogFormatter.Format(Ctrip.Duckbill.Log.ILogEntry)">
            <summary>
            Formats the specified log.
            </summary>
            <param name="log">The log.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Log.ILogFormatterRepository">
            <summary>
            Log formatter repository.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Log.ILogFormatterRepository.GetFormatter(System.String)">
            <summary>
            Gets the formatter.
            </summary>
            <param name="formatterName">Name of the formatter.</param>
            <returns>Log formatter.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Log.ILogFormatterRepository.GetFormatter(System.String,System.String)">
            <summary>
            Gets the formatter.
            </summary>
            <param name="sourceName">Name of the source.</param>
            <param name="listenerName">Name of the listener.</param>
            <returns>Log formatter.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Log.ILogger">
            <summary>
            Logger interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Log.ILogger.Priority">
            <summary>
            Gets or sets log priority.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Log.ILogger.EventID">
            <summary>
            Gets or sets event id.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Log.ILogger.Title">
            <summary>
            Gets or sets title.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Log.ILogger.Severity">
            <summary>
            Gets or sets severity.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Log.ILogger.Exception">
            <summary>
            Gets or sets exception.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Log.ILogger.AddMessage(System.String)">
            <summary>
            Add message.
            </summary>
            <param name="message">Parameter of message.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Log.ILogger.AddCategory(System.String)">
            <summary>
            Add category.
            </summary>
            <param name="category">Parameter of category.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Log.ILogger.AddProperty(System.String,System.String)">
            <summary>
            Add log property.
            </summary>
            <param name="name">Parameter of property name.</param>
            <param name="value">Parameter of property value.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Log.ILogger.AddContent(System.String,System.Object)">
            <summary>
            Add content.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Log.ILogger.Write">
            <summary>
            Write log.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Log.ILoggerFactory">
            <summary>
            Lof Factory.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Log.ILoggerFactory.CreateLogger">
            <summary>
            Creates the log.
            </summary>
            <returns>Logger Object.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Log.ILoggerWriter">
            <summary>
            Logger writer.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Log.ILoggerWriter.Write(Ctrip.Duckbill.Log.ILogEntry)">
            <summary>
            Writes the specified log.
            </summary>
            <param name="log">The log.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Log.ILogListener">
            <summary>
            Log listener.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Log.ILogListener.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Ctrip.Duckbill.Log.ILogListener.Write(Ctrip.Duckbill.Log.ILogEntry)">
            <summary>
            Writes the specified log.
            </summary>
            <param name="log">The log.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Log.ILogListenerConfig">
            <summary>
            Log listener config.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Log.ILogListenerConfig.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Log.ILogListenerConfig.IsOn">
            <summary>
            Gets a value indicating whether this instance is turn on.
            </summary>
            <value><c>true</c> if this instance is turn on; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Log.ILogListenerConfig.Formatter">
            <summary>
            Gets the formatter.
            </summary>
            <value>The formatter.</value>
        </member>
        <member name="T:Ctrip.Duckbill.Log.ILogListenerRepository">
            <summary>
            Log listener repository.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Log.ILogListenerRepository.GetListener(System.String)">
            <summary>
            Gets the listener.
            </summary>
            <param name="listenerName">Name of the listener.</param>
            <returns>Log listener.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Log.ILogSource">
            <summary>
            Log source.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Log.ILogSource.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Ctrip.Duckbill.Log.ILogSource.Process(Ctrip.Duckbill.Log.ILogEntry)">
            <summary>
            Processes the specified log.
            </summary>
            <param name="log">The log.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Log.ILogSourceConfig">
            <summary>
            Log source config.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Log.ILogSourceConfig.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Log.ILogSourceConfig.Filters">
            <summary>
            Gets the filters.
            </summary>
            <value>The filters.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Log.ILogSourceConfig.Listeners">
            <summary>
            Gets the listeners.
            </summary>
            <value>The listeners.</value>
        </member>
        <member name="T:Ctrip.Duckbill.Log.ILogSourceRepository">
            <summary>
            Log source repository.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Log.ILogSourceRepository.GetMatchedSource(Ctrip.Duckbill.Log.ILogEntry)">
            <summary>
            Gets the matched source.
            </summary>
            <param name="log">The log.</param>
            <returns>Log source array.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Log.Implementation.Configuration.LogConfig">
            <summary>
            Caches config.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Log.Implementation.Configuration.LogConfig.DefaultSource">
            <summary>
            Gets or sets the default source.
            </summary>
            <value>The default source.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Log.Implementation.Configuration.LogConfig.DefaultFormatter">
            <summary>
            Gets or sets the default formatter.
            </summary>
            <value>The default formatter.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Log.Implementation.Configuration.LogConfig.GlobalFilters">
            <summary>
            Gets or sets the global filters.
            </summary>
            <value>The global filters.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Log.Implementation.Configuration.LogConfig.Sources">
            <summary>
            Gets or sets the sources.
            </summary>
            <value>The sources.</value>
        </member>
        <member name="T:Ctrip.Duckbill.Log.Implementation.Configuration.LogConfigRepository">
            <summary>
            Log config repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Log.Implementation.Configuration.LogConfigRepository.configurationAccessor">
            <summary>
            The configuration accessor.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Log.Implementation.Configuration.LogConfigRepository.#ctor(Ctrip.Duckbill.Configuration.IConfigurationAccessor)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Log.Implementation.Configuration.LogConfigRepository"/> class.
            </summary>
            <param name="configurationAccessor">The configuration accessor.</param>
        </member>
        <member name="P:Ctrip.Duckbill.Log.Implementation.Configuration.LogConfigRepository.DefaultSource">
            <summary>
            Gets the default source.
            </summary>
            <value>The default source.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Log.Implementation.Configuration.LogConfigRepository.DefaultFormatter">
            <summary>
            Gets the default formatter.
            </summary>
            <value>The default formatter.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Log.Implementation.Configuration.LogConfigRepository.GlobalFilters">
            <summary>
            Gets the global filters.
            </summary>
            <value>The global filters.</value>
        </member>
        <member name="M:Ctrip.Duckbill.Log.Implementation.Configuration.LogConfigRepository.GetLogSourceConfig(System.String)">
            <summary>
            Gets the log source configuration.
            </summary>
            <param name="sourceName">Name of the source.</param>
            <returns>Log source config.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Log.Implementation.Configuration.LogFilterConfig">
            <summary>
            Log filter config.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Log.Implementation.Configuration.LogFilterConfig.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Log.Implementation.Configuration.LogFilterConfig.IsOn">
            <summary>
            Gets or sets a value indicating whether this instance is turn on.
            </summary>
            <value><c>true</c> if this instance is turn on; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Ctrip.Duckbill.Log.Implementation.Configuration.LogListenerConfig">
            <summary>
            Log listener config.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Log.Implementation.Configuration.LogListenerConfig.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Log.Implementation.Configuration.LogListenerConfig.IsOn">
            <summary>
            Gets or sets a value indicating whether this instance is turn on.
            </summary>
            <value><c>true</c> if this instance is turn on; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Log.Implementation.Configuration.LogListenerConfig.Formatter">
            <summary>
            Gets or sets the formatter.
            </summary>
            <value>The formatter.</value>
        </member>
        <member name="T:Ctrip.Duckbill.Log.Implementation.Configuration.LogSourceConfig">
            <summary>
            Log source config.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Log.Implementation.Configuration.LogSourceConfig.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Log.Implementation.Configuration.LogSourceConfig.FiltersNode">
            <summary>
            Gets or sets the global filters.
            </summary>
            <value>The global filters.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Log.Implementation.Configuration.LogSourceConfig.Filters">
            <summary>
            Gets the filters.
            </summary>
            <value>The filters.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Log.Implementation.Configuration.LogSourceConfig.ListenersNode">
            <summary>
            Gets or sets the listeners node.
            </summary>
            <value>The listeners node.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Log.Implementation.Configuration.LogSourceConfig.Listeners">
            <summary>
            Gets the listeners.
            </summary>
            <value>The listeners.</value>
        </member>
        <member name="T:Ctrip.Duckbill.Log.Implementation.DefaultLogger">
            <summary>
            Default logger.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Log.Implementation.DefaultLogger.writer">
            <summary>
            The writer.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Log.Implementation.DefaultLogger.#ctor(Ctrip.Duckbill.Log.ILoggerWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Log.Implementation.DefaultLogger"/> class.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Ctrip.Duckbill.Log.Implementation.DefaultLogger.Priority">
            <summary>
            Gets or sets log priority.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Log.Implementation.DefaultLogger.EventID">
            <summary>
            Gets or sets event id.
            </summary>
            <value>The event identifier.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Log.Implementation.DefaultLogger.Title">
            <summary>
            Gets or sets title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Log.Implementation.DefaultLogger.Severity">
            <summary>
            Gets or sets severity.
            </summary>
            <value>The severity.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Log.Implementation.DefaultLogger.Exception">
            <summary>
            Gets or sets exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Log.Implementation.DefaultLogger.Messages">
            <summary>
            Gets the messages.
            </summary>
            <value>The messages.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Log.Implementation.DefaultLogger.Categories">
            <summary>
            Gets the categories.
            </summary>
            <value>The categories.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Log.Implementation.DefaultLogger.Properties">
            <summary>
            Gets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Log.Implementation.DefaultLogger.Content">
            <summary>
            Gets the content.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Log.Implementation.DefaultLogger.LogText">
            <summary>
            Gets or sets the log text.
            </summary>
            <value>The log text.</value>
        </member>
        <member name="M:Ctrip.Duckbill.Log.Implementation.DefaultLogger.AddMessage(System.String)">
            <summary>
            Add message.
            </summary>
            <param name="message">Parameter of message.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Log.Implementation.DefaultLogger.AddCategory(System.String)">
            <summary>
            Add category.
            </summary>
            <param name="category">Parameter of category.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Log.Implementation.DefaultLogger.AddProperty(System.String,System.String)">
            <summary>
            Add log property.
            </summary>
            <param name="name">Parameter of property name.</param>
            <param name="value">Parameter of property value.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Log.Implementation.DefaultLogger.AddContent(System.String,System.Object)">
            <summary>
            Add content.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Log.Implementation.DefaultLogger.Write">
            <summary>
            Write log.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Log.Implementation.DefaultLogger.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Cloned log.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Log.Implementation.FrameworkLoggerFactory">
            <summary>
            Framework logger factory.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Log.Implementation.FrameworkLoggerFactory.loggerWriter">
            <summary>
            The logger writer.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Log.Implementation.FrameworkLoggerFactory.#ctor(Ctrip.Duckbill.Log.ILoggerWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Log.Implementation.FrameworkLoggerFactory"/> class.
            </summary>
            <param name="loggerWriter">The logger writer.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Log.Implementation.FrameworkLoggerFactory.CreateLogger">
            <summary>
            Create framework logger.
            </summary>
            <returns>Framework logger.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Log.Implementation.LogFilterRepository">
            <summary>
            Log filter repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Log.Implementation.LogFilterRepository.myFilters">
            <summary>
            My filter.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Log.Implementation.LogFilterRepository.locator">
            <summary>
            The locator.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Log.Implementation.LogFilterRepository.#ctor(Ctrip.Duckbill.IOC.IServicesLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Log.Implementation.LogFilterRepository"/> class.
            </summary>
            <param name="locator">The locator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Log.Implementation.LogFilterRepository.GetFilter(System.String)">
            <summary>
            Gets the filter.
            </summary>
            <param name="filterName">Name of the filter.</param>
            <returns>Log filter name.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Log.Implementation.LogFormatterRepository">
            <summary>
            Log formatter repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Log.Implementation.LogFormatterRepository.myFormatters">
            <summary>
            My formatters.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Log.Implementation.LogFormatterRepository.locator">
            <summary>
            The locator.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Log.Implementation.LogFormatterRepository.logConfigRepository">
            <summary>
            The log configuration repository.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Log.Implementation.LogFormatterRepository.#ctor(Ctrip.Duckbill.IOC.IServicesLocator,Ctrip.Duckbill.Log.ILogConfigRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Log.Implementation.LogFormatterRepository" /> class.
            </summary>
            <param name="locator">The locator.</param>
            <param name="logConfigRepository">The log configuration repository.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Log.Implementation.LogFormatterRepository.GetFormatter(System.String)">
            <summary>
            Gets the formatter.
            </summary>
            <param name="formatterName">Name of the formatter.</param>
            <returns>Log formatter.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Log.Implementation.LogFormatterRepository.GetFormatter(System.String,System.String)">
            <summary>
            Gets the formatter.
            </summary>
            <param name="sourceName">Name of the source.</param>
            <param name="listenerName">Name of the listener.</param>
            <returns>Log formatter.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Log.Implementation.LoggerFactory">
            <summary>
            Logger factory.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Log.Implementation.LoggerFactory.loggerWriter">
            <summary>
            The logger writer.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Log.Implementation.LoggerFactory.#ctor(Ctrip.Duckbill.Log.ILoggerWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Log.Implementation.LoggerFactory"/> class.
            </summary>
            <param name="loggerWriter">The logger writer.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Log.Implementation.LoggerFactory.CreateLogger">
            <summary>
            Creates the log.
            </summary>
            <returns>Logger Object.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Log.Implementation.LoggerWriter">
            <summary>
            Logger writer.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Log.Implementation.LoggerWriter.logSourceRepository">
            <summary>
            The log source repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Log.Implementation.LoggerWriter.logConfigRepository">
            <summary>
            The log configuration repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Log.Implementation.LoggerWriter.logFilterRepository">
            <summary>
            The log filter repository.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Log.Implementation.LoggerWriter.#ctor(Ctrip.Duckbill.Log.ILogSourceRepository,Ctrip.Duckbill.Log.ILogConfigRepository,Ctrip.Duckbill.Log.ILogFilterRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Log.Implementation.LoggerWriter" /> class.
            </summary>
            <param name="logSourceRepository">The log source repository.</param>
            <param name="logConfigRepository">The log configuration repository.</param>
            <param name="logFilterRepository">The log filter repository.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Log.Implementation.LoggerWriter.Write(Ctrip.Duckbill.Log.ILogEntry)">
            <summary>
            Writes the specified log.
            </summary>
            <param name="log">The log.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Log.Implementation.LoggerWriter.TryProcess(Ctrip.Duckbill.Log.ILogEntry@)">
            <summary>
            Tries the process.
            </summary>
            <param name="log">The log.</param>
            <returns><c>true</c> if log is valid after process, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Log.Implementation.LogListenerRepository">
            <summary>
            Log listener repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Log.Implementation.LogListenerRepository.myListeners">
            <summary>
            My listeners.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Log.Implementation.LogListenerRepository.locator">
            <summary>
            The locator.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Log.Implementation.LogListenerRepository.#ctor(Ctrip.Duckbill.IOC.IServicesLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Log.Implementation.LogListenerRepository"/> class.
            </summary>
            <param name="locator">The locator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Log.Implementation.LogListenerRepository.GetListener(System.String)">
            <summary>
            Gets the listener.
            </summary>
            <param name="listenerName">Name of the listener.</param>
            <returns>Log listener.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Log.Implementation.LogSourceRepository">
            <summary>
            Log source repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Log.Implementation.LogSourceRepository.mySource">
            <summary>
            My source.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Log.Implementation.LogSourceRepository.locator">
            <summary>
            The locator.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Log.Implementation.LogSourceRepository.logConfigRepository">
            <summary>
            The log configuration repository.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Log.Implementation.LogSourceRepository.#ctor(Ctrip.Duckbill.IOC.IServicesLocator,Ctrip.Duckbill.Log.ILogConfigRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Log.Implementation.LogSourceRepository"/> class.
            </summary>
            <param name="locator">The locator.</param>
            <param name="logConfigRepository">The log configuration repository.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Log.Implementation.LogSourceRepository.GetMatchedSource(Ctrip.Duckbill.Log.ILogEntry)">
            <summary>
            Gets the matched source.
            </summary>
            <param name="log">The log.</param>
            <returns>Log source array.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Log.Implementation.LogSourceRepository.GetDefaultSource">
            <summary>
            Gets the default source.
            </summary>
            <returns>Log source.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Log.Implementation.LogSourceRepository.GetSource(System.String)">
            <summary>
            Gets the source.
            </summary>
            <param name="sourceName">Name of the source.</param>
            <returns>Log source.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Log.LocalFileListener">
            <summary>
            Local file listener.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Log.LocalFileListener.guidFactory">
            <summary>
            The unique identifier factory.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Log.LocalFileListener.localLogPath">
            <summary>
            The local log path.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Log.LocalFileListener.staticPath">
            <summary>
            The static path.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Log.LocalFileListener.pathUtility">
            <summary>
            The path utility.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Log.LocalFileListener.staticFile">
            <summary>
            The static file.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Log.LocalFileListener.#ctor(Ctrip.Duckbill.Threading.ITaskFactory,Ctrip.Duckbill.Threading.ICurrentThread,Ctrip.Duckbill.IGuidFactory,Ctrip.Duckbill.ICurrentAppDomain,Ctrip.Duckbill.IO.IStaticPath,Ctrip.Duckbill.IO.IPathUtility,Ctrip.Duckbill.IO.IStaticFile)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Log.LocalFileListener" /> class.
            </summary>
            <param name="taskFactory">The task factory.</param>
            <param name="currentThread">The current thread.</param>
            <param name="guidFactory">The unique identifier factory.</param>
            <param name="currentAppDomain">The current application domain.</param>
            <param name="staticPath">The static path.</param>
            <param name="pathUtility">The path utility.</param>
            <param name="staticFile">The static file.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Log.LocalFileListener.RealWrite(Ctrip.Duckbill.Log.ILogEntry)">
            <summary>
            Reals write.
            </summary>
            <param name="log">The log.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Log.LogIOCModule">
            <summary>
            Log ioc module.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Log.LogIOCModule.Configure">
            <summary>
            Configure services.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Net.Host.IHostRepository">
            <summary>
            Host repository interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Net.Host.IHostRepository.Get(System.String)">
            <summary>
            Get host by name.
            </summary>
            <param name="hostName">Requested host name.</param>
            <returns>Host information.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Net.Host.IHostRepository.GetContentHost">
            <summary>
            Get default content host.
            </summary>
            <returns>Default content host information.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Net.Host.IHostRepository.GetAllHosts">
            <summary>
            Get all hosts.
            </summary>
            <returns>All hosts.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Net.Host.IHostUnit">
            <summary>
            Host unit interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Net.Host.IHostUnit.Name">
            <summary>
            Gets the name of host.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Net.Host.IHostUnit.Address">
            <summary>
            Gets the address of host..
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Net.Host.IHostUnit.GetUri">
            <summary>
            Get host uri.
            </summary>
            <returns>Host uri.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Net.Host.Implementation.HostRepository">
            <summary>
            Default host repository implement.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Net.Host.Implementation.HostRepository.configurationAccessor">
            <summary>
            The configuration accessor.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Net.Host.Implementation.HostRepository.#ctor(Ctrip.Duckbill.Configuration.IConfigurationAccessor)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Net.Host.Implementation.HostRepository"/> class.
            </summary>
            <param name="configurationAccessor">The configuration accessor.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Net.Host.Implementation.HostRepository.Get(System.String)">
            <summary>
            Get host by name.
            </summary>
            <param name="hostName">Requested host name.</param>
            <returns>Host information.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Net.Host.Implementation.HostRepository.GetContentHost">
            <summary>
            Get default content host.
            </summary>
            <returns>Default content host information.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Net.Host.Implementation.HostRepository.GetAllHosts">
            <summary>
            Get all hosts.
            </summary>
            <returns>All hosts.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Net.Host.Implementation.HostsConfig">
            <summary>
            Host config entity.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Net.Host.Implementation.HostsConfig.Hosts">
            <summary>
            Gets or sets host collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Net.Host.Implementation.HostUnit">
            <summary>
            Host unit. Defined host name, host protocol and host Address.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Net.Host.Implementation.HostUnit.regex">
            <summary>
            My regex.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Net.Host.Implementation.HostUnit.myAddress">
            <summary>
            My Addresss.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Net.Host.Implementation.HostUnit.myUri">
            <summary>
            My uri.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Net.Host.Implementation.HostUnit.needGenerateUri">
            <summary>
            Need generate uri.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Net.Host.Implementation.HostUnit.Name">
            <summary>
            Gets or sets the name of host.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Net.Host.Implementation.HostUnit.Address">
            <summary>
            Gets or sets the address of host..
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Net.Host.Implementation.HostUnit.GetUri">
            <summary>
            Get host uri.
            </summary>
            <returns>Host uri.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Net.Host.Implementation.HostUnitCollection">
            <summary>
            Host unit collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Net.Host.Implementation.HostUnitCollection.DefaultContentHost">
            <summary>
            Gets or sets default host content name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Net.Host.Implementation.HostUnitCollection.Collection">
            <summary>
            Gets or sets host collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.CollectionCompareOption">
            <summary>
            Collection compare option.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.CollectionCompareOption.NullIsNotEqualToEmpty">
            <summary>
            Null is not equal to empty.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.CollectionCompareOption.NullIsEqualToEmpty">
            <summary>
            Null is equal to empty.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.HtmlExtensions">
            <summary>
            Html extensions.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.HtmlExtensions.ToHtml(Ctrip.Duckbill.ICommonAttribute)">
            <summary>
            To html string.
            </summary>
            <param name="me">Current common attribute.</param>
            <returns>Html string.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Alias.Implementation.Configuration.UrlAliasesConfig">
            <summary>
            Url aliases config.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Alias.Implementation.Configuration.UrlAliasesConfig.AliasCollection">
            <summary>
            Gets or sets alias collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Alias.Implementation.Configuration.UrlAliasUnit">
            <summary>
            Route alias unit. Specify a unique path.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Alias.Implementation.Configuration.UrlAliasUnit.Name">
            <summary>
            Gets or sets alias name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Alias.Implementation.Configuration.UrlAliasUnit.Url">
            <summary>
            Gets or sets router name. Support absolute and relative url.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Alias.Implementation.Configuration.UrlAliasUnit.HostName">
            <summary>
            Gets or sets the name of the host. If the url is a relative url, the host name is needed.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Alias.IUrlAliasUnit">
            <summary>
            Url alias unit interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Alias.IUrlAliasUnit.Name">
            <summary>
            Gets alias name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Alias.IUrlAliasUnit.Url">
            <summary>
            Gets router name. Support absolute and relative url.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Alias.IUrlAliasUnit.HostName">
            <summary>
            Gets the name of the host. If the url is a relative url, the host name is needed.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Alias.IUrlAliasUrlBuilder">
            <summary>
            Url alias url builder.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Alias.IUrlAliasUrlBuilder.BuildUrl(Ctrip.Duckbill.Web.Alias.IUrlAliasUnit)">
            <summary>
            Build url by route alias.
            </summary>
            <param name="alias">An object that contains the parameters for a url.</param>
            <returns>The application absolute path.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Alias.IUrlAliasUrlBuilder.BuildUrl(Ctrip.Duckbill.Web.Alias.IUrlAliasUnit,System.Object)">
            <summary>
            Build url by route alias.
            </summary>
            <param name="alias">An object that contains the parameters for a url.</param>
            <param name="routeValues">The route values.</param>
            <returns>The application absolute path.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Alias.IUrlAliasUrlBuilder.BuildUrl(Ctrip.Duckbill.Web.Alias.IUrlAliasUnit,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Build url by route alias.
            </summary>
            <param name="alias">An object that contains the parameters for a url.</param>
            <param name="routeValues">The route values.</param>
            <returns>The application absolute path.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.AntiXss.IAntiXssEncoder">
            <summary>
            Anti xss encoder.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.AntiXss.IAntiXssEncoder.HtmlAttributeEncode(System.String)">
            <summary>
            Html Attribute Encode.
            </summary>
            <param name="s">Input string.</param>
            <returns>Html attribute encode.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.AntiXss.IAntiXssEncoder.HtmlEncode(System.String)">
            <summary>
            Html Encode.
            </summary>
            <param name="s">Input string.</param>
            <returns>Html encode.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.AntiXss.IAntiXssEncoder.HtmlEncodeUseLineBreak(System.String)">
            <summary>
            Html Encode UseLine Break.
            </summary>
            <param name="s">Input string.</param>
            <returns>Html encode useLine break.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.AntiXss.IAntiXssEncoder.JavaScriptEncode(System.String)">
            <summary>
            Java Script Encode.
            </summary>
            <param name="s">Input string.</param>
            <returns>Java script encode.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.AntiXss.IAntiXssEncoder.UrlEncode(System.String)">
            <summary>
            Url Encode.
            </summary>
            <param name="s">Input string.</param>
            <returns>Url encode.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.AntiXss.IAntiXssEncoder.VisualBasicScriptEncode(System.String)">
            <summary>
            VisualBasic Script Encode.
            </summary>
            <param name="s">Input string.</param>
            <returns>VisualBasic script encode.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.AntiXss.IAntiXssEncoder.XmlAttributeEncode(System.String)">
            <summary>
            Xml Attribute Encode.
            </summary>
            <param name="s">Input string.</param>
            <returns>Xml attribute encode.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.AntiXss.IAntiXssEncoder.XmlEncode(System.String)">
            <summary>
            Xml Encode.
            </summary>
            <param name="s">Input string.</param>
            <returns>Xml encode.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.AntiXss.Implementation.DefaultAntiXssEncoder">
            <summary>
            <c>AntiXssEncoder</c> can be used to provide additional protection to ASP.NET Web-based applications against Cross-Site Scripting (XSS) attacks.
            <remarks>
            <para>
            To provide this protection, the library first defines a set of valid characters such as a-z and 
            A-Z and automatically encodes any characters not defined in that valid set (invalid characters or potential attack characters).
            This technique is commonly referred to as the principle of inclusions and can provide advantages over other techniques.
            Cross-site scripting (XSS) attacks exploit vulnerabilities in Web-based applications that fail to properly validate and/or encode input that is embedded in response data.  
            Malicious users can then inject client-side script into response data causing the unsuspecting user's browser to execute the script code.  
            The script code will appear to have originated from a trusted-site and may be able to bypass browser protection mechanisms such as security zones.
            These attacks are platform and browser independent, and can allow malicious users to perform malicious actions such as gaining unauthorized access 
            to client data like cookies or hijacking sessions entirely.
            <para />
            Simple steps that developers can take to prevent XSS attacks in their ASP.NET applications include 
            (see How To: Prevent Cross-Site Scripting in ASP.NET in the Patterns &amp; Practices series for more detail):
            <list type="bullet">
            	<item>Validating and constraining input</item>
            	<item>Encoding output</item>
            </list>
            </para>
            <para />
            <para>
            To properly use the Microsoft Anti-Cross Site Scripting Library to protect their ASP.NET Web-applications, developers need to:
            <list type="bullet">
            	<item>Step 1: Review ASP.NET code that generates output</item>
            	<item>Step 2: Determine whether output includes un-trusted input parameters</item>
            	<item>Step 3: Determine the context which the un-trusted input is used as output</item>
            	<item>Step 4: Encode output</item>
            </list>
            </para>
            <para>
            <b>Step 1: Review ASP.NET Code that Generates Output</b>
            XSS attacks are dependent on the ability of un-trusted input to be embedded as output, and so code that generates output must first be identified.  
            Some common vectors include calls to Response.Write and ASP &lt;% = calls.
            </para>
            <para>
            <b>Step 2: Determine if Output Could Contain Un-Trusted Input</b>
            Once the sections of code that generate output have been identified, they should be analysed to determined if the output may contain un-trusted input such as input from users or from some other un-trusted source.  If the output does contain un-trusted input then that un-trusted input will require encoding.  Some common sources of un-trusted input include:
            <list type="bullet">
            	<item>Application variables</item>
            	<item>Cookies</item>
            	<item>Databases</item>
            	<item>Form fields</item>
            	<item>Query string variables</item>
            	<item>Session variables</item>
            </list>
            If it is uncertain that the output may contain un-trusted input, then it is best to err on the side of caution and encode the output anyways.
            </para>
            <para>
            <b>Step 3: Determine Encoding Method to Use</b>
            <list type="table">
                <listheader>
                    <term>Encoding Method</term>
                    <term>Description</term>
                </listheader>
                <item>
                    <description>HtmlEncode</description>
                    <description>Encodes input strings for use in HTML</description>
                </item>
                <item>
                    <description>HtmlAttributeEncode</description>
                    <description>Encodes input strings for use in HTML attributes</description>
                </item>
                <item>
                    <description>JavaScriptEncode</description>
                    <description>Encodes input strings for use in JavaScript</description>
                </item>
                <item>
                    <description>UrlEncode</description>
                    <description>Encodes input strings for use in Universal Resource Locators (URLs)</description>
                </item>
                <item>
                    <description>XmlEncode</description>
                    <description>Encodes input strings for use in XML</description>
                </item>
                <item>
                    <description>XmlAttributeEncode</description>
                    <description>Encodes input strings for use in XML attributes</description>
                </item>
            </list>
            </para>
            <para>
            <b>Step 4: Encode Output</b>
            </para>
            </remarks>
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.AntiXss.Implementation.DefaultAntiXssEncoder.HtmlAttributeEncode(System.String)">
            <summary>
            Html Attribute Encode.
            </summary>
            <param name="s">Input string.</param>
            <returns>Html attribute encode.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.AntiXss.Implementation.DefaultAntiXssEncoder.HtmlEncode(System.String)">
            <summary>
            Html Encode.
            </summary>
            <param name="s">Input string.</param>
            <returns>Html encode.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.AntiXss.Implementation.DefaultAntiXssEncoder.HtmlEncodeUseLineBreak(System.String)">
            <summary>
            Html Encode UseLine Break.
            </summary>
            <param name="s">Input string.</param>
            <returns>Html encode useLine break.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.AntiXss.Implementation.DefaultAntiXssEncoder.JavaScriptEncode(System.String)">
            <summary>
            Java Script Encode.
            </summary>
            <param name="s">Input string.</param>
            <returns>Java script encode.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.AntiXss.Implementation.DefaultAntiXssEncoder.UrlEncode(System.String)">
            <summary>
            Url Encode.
            </summary>
            <param name="s">Input string.</param>
            <returns>Url encode.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.AntiXss.Implementation.DefaultAntiXssEncoder.VisualBasicScriptEncode(System.String)">
            <summary>
            VisualBasic Script Encode.
            </summary>
            <param name="s">Input string.</param>
            <returns>VisualBasic script encode.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.AntiXss.Implementation.DefaultAntiXssEncoder.XmlAttributeEncode(System.String)">
            <summary>
            Xml Attribute Encode.
            </summary>
            <param name="s">Input string.</param>
            <returns>Xml attribute encode.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.AntiXss.Implementation.DefaultAntiXssEncoder.XmlEncode(System.String)">
            <summary>
            Xml Encode.
            </summary>
            <param name="s">Input string.</param>
            <returns>Xml encode.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.AntiXss.Implementation.DefaultAntiXssEncoder.SingleByteHex(System.Char)">
            <summary>
            Single Byte Hex.
            </summary>
            <param name="c">Input char.</param>
            <returns>Single byte hex.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.AntiXss.Implementation.DefaultAntiXssEncoder.TwoByteHex(System.Char)">
            <summary>
            Two Byte Hex.
            </summary>
            <param name="c">Input char.</param>
            <returns>Two byte hex.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.AntiXss.Implementation.DefaultAntiXssEncoder.EncodeHtml(System.String)">
            <summary>
            Encode Html.
            </summary>
            <param name="strInput">Input string.</param>
            <returns>Encode html.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.AntiXss.Implementation.DefaultAntiXssEncoder.EncodeHtmlAttribute(System.String)">
            <summary>
            Encode Html Attribute.
            </summary>
            <param name="strInput">Input string.</param>
            <returns>Encode html attribute.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.AntiXss.Implementation.DefaultAntiXssEncoder.EncodeJs(System.String)">
            <summary>
            Encode Js.
            </summary>
            <param name="strInput">Input string.</param>
            <returns>Encode Javascript.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.AntiXss.Implementation.DefaultAntiXssEncoder.EncodeUrl(System.String)">
            <summary>
            Encode Url.
            </summary>
            <param name="strInput">Input string.</param>
            <returns>Encode url.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.AntiXss.Implementation.DefaultAntiXssEncoder.EncodeVbs(System.String)">
            <summary>
            Encode Vbs.
            </summary>
            <param name="strInput">Input string.</param>
            <returns>Encode vbs.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.AntiXss.Implementation.DefaultAntiXssEncoder.EncodeXml(System.String)">
            <summary>
            Encode Xml.
            </summary>
            <param name="strInput">Input string.</param>
            <returns>Encode xml.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.AntiXss.Implementation.DefaultAntiXssEncoder.EncodeXmlAttribute(System.String)">
            <summary>
            Encode Xml Attribute.
            </summary>
            <param name="strInput">Input string.</param>
            <returns>Encode xml attribute.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Browser.IBrowserCapabilitiesSetting">
            <summary>
            Browser capabilities setting.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Browser.IBrowserCapabilitiesSetting.Browser">
            <summary>
            Gets browser name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Browser.IBrowserCapabilitiesSetting.Version">
            <summary>
            Gets browser version.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Browser.IBrowserCapabilitiesSetting.IsNotCompatible">
            <summary>
            Gets a value indicating whether browser is nto compatible.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Browser.Implementation.BrowserCapabilitiesSetting">
            <summary>
            Browser capabilities setting.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Browser.Implementation.BrowserCapabilitiesSetting.Browser">
            <summary>
            Gets or sets browser name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Browser.Implementation.BrowserCapabilitiesSetting.Version">
            <summary>
            Gets or sets browser version.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Browser.Implementation.BrowserCapabilitiesSetting.IsNotCompatible">
            <summary>
            Gets or sets a value indicating whether browser is nto compatible.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Context.IHttpContextRepository">
            <summary>
            Http context repository.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Context.IHttpContextRepository.CurrentUrl">
            <summary>
            Gets current url.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Context.IHttpContextRepository.RelativePath">
            <summary>
            Gets the relative path.
            </summary>
            <value>
            The relative path.
            </value>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Context.IHttpContextRepository.ClientIP">
            <summary>
            Gets the client ip.
            </summary>
            <value>
            The client ip.
            </value>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Context.IHttpContextRepository.CurrentUrlReferrer">
            <summary>
            Gets current url referrer.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Context.IHttpContextRepository.CurrentUserAgent">
            <summary>
            Gets current user agent.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Context.IHttpContextRepository.CurrentHttpContext">
            <summary>
            Gets current http context.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Context.IHttpContextRepository.CurrentHttpContextBase">
            <summary>
            Gets current http context base.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Context.IHttpContextRepository.Header(System.String)">
            <summary>
            Get value from http request header.
            </summary>
            <param name="key">Queried item key.</param>
            <returns>Queried result.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Context.IHttpContextRepository.QueryString(System.String)">
            <summary>
            Get value from http request query string.
            </summary>
            <param name="key">Queried item key.</param>
            <returns>Queried result.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Context.IHttpContextRepository.Form(System.String)">
            <summary>
            Get value from form.
            </summary>
            <param name="key">The key.</param>
            <returns>Form value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Context.IHttpContextRepository.QueryStringOrHeader(System.String)">
            <summary>
            Get value from http request query string or header.
            </summary>
            <param name="key">Queried item key.</param>
            <returns>Queried result.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Context.IHttpContextRepository.ServerVariables(System.String)">
            <summary>
            Gets value from http request server variables.
            </summary>
            <param name="key">Queried item key.</param>
            <returns>Queried result.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Context.IHttpContextRepository.Cookie(System.String)">
            <summary>
            Gets value from http request cookie.
            </summary>
            <param name="key">Queried item key.</param>
            <returns>Queried result.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Context.IHttpContextRepository.Cookie(System.String,System.String)">
            <summary>
            Gets value from http request cookie.
            </summary>
            <param name="key">Queried item key.</param>
            <param name="subKey">The sub key.</param>
            <returns>Queried result.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Context.IHttpContextRepository.RequestRawString">
            <summary>
            Dump the raw http request to a string.
            </summary>
            <returns>Raw http request string value. </returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Context.IHttpContextRepository.GetFile(System.Int32)">
            <summary>
            Gets the file.
            </summary>
            <param name="index">The index.</param>
            <returns>Http posted file.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Context.IHttpContextRepository.Clear(System.String)">
            <summary>
            Empties a data slot with the specified name.
            </summary>
            <param name="name">The name of the data slot to empty.</param>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Context.IHttpContextRepository.GetData(System.String)">
            <summary>
            Retrieves an object with the specified name from the System.Web.HttpContext.
            </summary>
            <param name="name">The name of the item in the call context.</param>
            <returns>The object in the call context associated with the specified name.</returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Context.IHttpContextRepository.SetData(System.String,System.Object)">
            <summary>
            Stores a given object and associates it with the specified name.
            </summary>
            <param name="name">The name with which to associate the new item in the call context.</param>
            <param name="data">The object to store in the call context.</param>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Context.Implementation.ConfigedQueriedDBNameRequestContextItem">
            <summary>
            Configed queried db name request context item.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Context.Implementation.ConfigedQueriedDBNameRequestContextItem.repository">
            <summary>
            Servers database repository.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Context.Implementation.ConfigedQueriedDBNameRequestContextItem.#ctor(Ctrip.Duckbill.Servers.IServersDatabaseRepository)">
            <summary>
            Initializes a new instance of the ConfigedQueriedDBNameRequestContextItem class.
            </summary>
            <param name="repository">Servers database repository.</param>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Context.Implementation.ConfigedQueriedDBNameRequestContextItem.Value">
            <summary>
            Gets request context item value.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Context.Implementation.DefaultHttpContextRepository">
            <summary>
            Default implement of context repository.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Context.Implementation.DefaultHttpContextRepository.CurrentUrl">
            <summary>
            Gets current url.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Context.Implementation.DefaultHttpContextRepository.RelativePath">
            <summary>
            Gets the current path.
            </summary>
            <value>
            The current path.
            </value>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Context.Implementation.DefaultHttpContextRepository.ClientIP">
            <summary>
            Gets the client ip.
            </summary>
            <value>
            The client ip.
            </value>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Context.Implementation.DefaultHttpContextRepository.CurrentUrlReferrer">
            <summary>
            Gets current url referrer.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Context.Implementation.DefaultHttpContextRepository.CurrentUserAgent">
            <summary>
            Gets current user agent.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Context.Implementation.DefaultHttpContextRepository.CurrentHttpContext">
            <summary>
            Gets current http context.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Context.Implementation.DefaultHttpContextRepository.CurrentHttpContextBase">
            <summary>
            Gets current http context base.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Context.Implementation.DefaultHttpContextRepository.Header(System.String)">
            <summary>
            Get value from http reqeust header.
            </summary>
            <param name="key">Queried item key.</param>
            <returns>Queried result.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Context.Implementation.DefaultHttpContextRepository.QueryString(System.String)">
            <summary>
            Get value from http reqeust query string.
            </summary>
            <param name="key">Queried item key.</param>
            <returns>Queried result.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Context.Implementation.DefaultHttpContextRepository.Form(System.String)">
            <summary>
            Get value from form.
            </summary>
            <param name="key">The key.</param>
            <returns>Form value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Context.Implementation.DefaultHttpContextRepository.QueryStringOrHeader(System.String)">
            <summary>
            Get value from http reqeust querystring or header.
            </summary>
            <param name="key">Queried item key.</param>
            <returns>Queried result.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Context.Implementation.DefaultHttpContextRepository.ServerVariables(System.String)">
            <summary>
            Gets value from http request server variables.
            </summary>
            <param name="key">Queried item key.</param>
            <returns>Queried result.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Context.Implementation.DefaultHttpContextRepository.Cookie(System.String)">
            <summary>
            Gets value from http request cookie.
            </summary>
            <param name="key">Queried item key.</param>
            <returns>Queried result.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Context.Implementation.DefaultHttpContextRepository.Cookie(System.String,System.String)">
            <summary>
            Gets value from http request cookie.
            </summary>
            <param name="key">Queried item key.</param>
            <param name="subKey">The sub key.</param>
            <returns>Queried result.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Context.Implementation.DefaultHttpContextRepository.RequestRawString">
            <summary>
            Dump the raw http request to a string.
            </summary>
            <returns>Raw http request string value. </returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Context.Implementation.DefaultHttpContextRepository.GetFile(System.Int32)">
            <summary>
            Gets the file.
            </summary>
            <param name="index">The index.</param>
            <returns>Http posted file.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Context.Implementation.DefaultHttpContextRepository.Clear(System.String)">
            <summary>
            Empties a data slot with the specified name.
            </summary>
            <param name="name">The name of the data slot to empty.</param>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Context.Implementation.DefaultHttpContextRepository.GetData(System.String)">
            <summary>
            Retrieves an object with the specified name from the System.Web.HttpContext.
            </summary>
            <param name="name">The name of the item in the call context.</param>
            <returns>The object in the call context associated with the specified name.</returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Context.Implementation.DefaultHttpContextRepository.SetData(System.String,System.Object)">
            <summary>
            Stores a given object and associates it with the specified name.
            </summary>
            <param name="name">The name with which to associate the new item in the call context.</param>
            <param name="data">The object to store in the call context.</param>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission.</exception>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Context.Implementation.DefaultHttpContextRepository.IsIpAddress(System.String)">
            <summary>
            Determines whether [is ip address] [the specified ip address].
            </summary>
            <param name="ip">The ip address.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Cookie.ICookieConfigUnit">
            <summary>
            Cookie config unit.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Cookie.ICookieConfigUnit.Key">
            <summary>
            Gets the cookie setting key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Cookie.ICookieConfigUnit.CookieName">
            <summary>
            Gets the name of the cookie used in Http header.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Cookie.ICookieConfigUnit.Domain">
            <summary>
            Gets cookie domain.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Cookie.ICookieConfigUnit.Path">
            <summary>
            Gets cookie path.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Cookie.ICookieConfigUnit.ExpiresAfter">
            <summary>
            Gets a timespan that cookie will expires after it.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Cookie.ICookieConfigUnit.SecureOnly">
            <summary>
            Gets a value indicating whether the cookie is available for https site only.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Cookie.ICookieEncryptor">
            <summary>
            Cookie encryptor interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Cookie.ICookieEncryptor.EncryptCookie(System.String)">
            <summary>
            Encrypt cookie.
            </summary>
            <param name="content">Content for encrypt.</param>
            <returns>Encrypted content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Cookie.ICookieEncryptor.DecryptCookie(System.String)">
            <summary>
            Decrypt cookie.
            </summary>
            <param name="encryptedcontent">Content for encrypted content.</param>
            <returns>Decrypted content.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Cookie.ICookieObjectPropertyNameMappingRepository">
            <summary>
            Cookie object property name mapping repository.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Cookie.ICookieObjectPropertyNameMappingRepository.GetDestinationPropertyName(System.String)">
            <summary>
            Get destination cookie object property name.
            </summary>
            <param name="originalPropertyName">Original cookie object property name.</param>
            <returns>Destination cookie object property name.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Cookie.ICookieObjectPropertyNameMappingRepository.GetOriginalPropertyName(System.String)">
            <summary>
            Get original cookie object property name.
            </summary>
            <param name="destinationPropertyName">Destination cookie object property name.</param>
            <returns>Original cookie object property name.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Cookie.ICookieObjectPropertyNameMappingRepository.EnableNameMapping">
            <summary>
            Get a value indicating whether system enable cookie name mapping.
            </summary>
            <returns>A value indicating whether system enable cookie name mapping.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Cookie.ICookiesConfigRepository">
            <summary>
            Cookies repository interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Cookie.ICookiesConfigRepository.GetCookieWarningSize">
            <summary>
            Get cookie warning size.
            </summary>
            <returns>Cookie warning size.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Cookie.ICookiesConfigRepository.GetCookie(System.String)">
            <summary>
            Get cookie config unit by key.
            </summary>
            <param name="key">Requested cookie config key.</param>
            <returns>Cookie config unt.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Cookie.ICookiesRepository">
            <summary>
            Cookies repository interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Cookie.ICookiesRepository.GetValue(System.String)">
            <summary>
            Get cookie value by cookie config key.
            </summary>
            <param name="configKey">Requested cookie config key.</param>
            <returns>Cookie value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Cookie.ICookiesRepository.GetValue(System.String,System.String)">
            <summary>
            Get cookie value by cookie config key and sub index.
            </summary>
            <param name="configKey">Requested cookie config key.</param>
            <param name="subIndex">Requested cookie sub index.</param>
            <returns>Cookie value.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Cookie.ICookiesRepository.GetCookies(System.String)">
            <summary>
            Gets the cookies.
            </summary>
            <param name="cookieName">Name of the cookie.</param>
            <returns>Name Value Collection.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Cookie.ICookiesRepository.SetValue(System.String,System.String,System.String)">
            <summary>
            Set cookie value by cookie config key.
            </summary>
            <param name="configKey">Cookie config key.</param>
            <param name="subIndex">Cookie sub index.</param>
            <param name="value">Cookie value.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Cookie.ICookiesRepository.SetValue(System.String,System.String)">
            <summary>
            Set cookie value by cookie config key.
            </summary>
            <param name="configKey">Cookie config key.</param>
            <param name="value">Cookie value.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Cookie.ICookiesRepository.SetExpire(System.String,System.TimeSpan)">
            <summary>
            Set cookie expire by cookie config key.
            </summary>
            <param name="configKey">Cookie config key.</param>
            <param name="expire">Cookie expire.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Cookie.ICookiesRepository.SetExpire(System.String,System.String,System.TimeSpan)">
            <summary>
            Set cookie expire by cookie config key.
            </summary>
            <param name="configKey">Cookie config key.</param>
            <param name="subIndex">Cookie sub index.</param>
            <param name="expire">Cookie expire.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Cookie.Implementation.CookieConfigUnit">
            <summary>
            Cookie config unit.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Cookie.Implementation.CookieConfigUnit.Key">
            <summary>
            Gets or sets the cookie setting key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Cookie.Implementation.CookieConfigUnit.CookieName">
            <summary>
            Gets or sets the name of the cookie used in Http header.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Cookie.Implementation.CookieConfigUnit.Domain">
            <summary>
            Gets or sets cookie domain.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Cookie.Implementation.CookieConfigUnit.Path">
            <summary>
            Gets or sets cookie path.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Cookie.Implementation.CookieConfigUnit.ExpiresAfterExpression">
            <summary>
            Gets or sets a expression that cookie will expires after it.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Cookie.Implementation.CookieConfigUnit.ExpiresAfter">
            <summary>
            Gets or sets a timespan that cookie will expires after it.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Cookie.Implementation.CookieConfigUnit.SecureOnly">
            <summary>
            Gets or sets a value indicating whether the cookie is available for https site only.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Cookie.Implementation.CookieConfigUnitCollection">
            <summary>
            Cookie config unit collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Cookie.Implementation.CookieConfigUnitCollection.WarningSize">
            <summary>
            Gets or sets cookie warning size.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Cookie.Implementation.CookieConfigUnitCollection.Collection">
            <summary>
            Gets or sets cookie settings collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Cookie.Implementation.CookieObjectPropertyNameMappingConfig">
            <summary>
            Cookie object property name mapping config.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Cookie.Implementation.CookieObjectPropertyNameMappingConfig.Mappings">
            <summary>
            Gets or sets cookie object property name mapping unit collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Cookie.Implementation.CookieObjectPropertyNameMappingUnit">
            <summary>
            Cookie object property name mapping unit.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Cookie.Implementation.CookieObjectPropertyNameMappingUnit.OriginalPropertyName">
            <summary>
            Gets or sets original prperty name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Cookie.Implementation.CookieObjectPropertyNameMappingUnit.DestinationPropertyName">
            <summary>
            Gets or sets destination prperty name.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Cookie.Implementation.CookieObjectPropertyNameMappingUnitCollection">
            <summary>
            Cookie object property name mapping unit collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Cookie.Implementation.CookieObjectPropertyNameMappingUnitCollection.EnableNameMapping">
            <summary>
            Gets or sets a value indicating whether system is enable name mapping.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Cookie.Implementation.CookieObjectPropertyNameMappingUnitCollection.Collection">
            <summary>
            Gets or sets cookie object property name mapping unit collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Cookie.Implementation.CookiesConfig">
            <summary>
            Cookies config.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Cookie.Implementation.CookiesConfig.Cookies">
            <summary>
            Gets or sets cookie config collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Cookie.Implementation.DefaultCookieObjectPropertyNameMappingRepository">
            <summary>
            Default cookie object property name mapping repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Cookie.Implementation.DefaultCookieObjectPropertyNameMappingRepository.configurationManager">
            <summary>
            Configuration manager.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Cookie.Implementation.DefaultCookieObjectPropertyNameMappingRepository.GetDestinationPropertyName(System.String)">
            <summary>
            Get destination cookie object property name.
            </summary>
            <param name="originalPropertyName">Original cookie object property name.</param>
            <returns>Destination cookie object property name.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Cookie.Implementation.DefaultCookieObjectPropertyNameMappingRepository.GetOriginalPropertyName(System.String)">
            <summary>
            Get original cookie object property name.
            </summary>
            <param name="destinationPropertyName">Destination cookie object property name.</param>
            <returns>Original cookie object property name.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Cookie.Implementation.DefaultCookieObjectPropertyNameMappingRepository.EnableNameMapping">
            <summary>
            Get a value indicating whether system enable cookie name mapping.
            </summary>
            <returns>A value indicating whether system enable cookie name mapping.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Cookie.Implementation.DefaultCookiesConfigRepository">
            <summary>
            Default cookies config repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Cookie.Implementation.DefaultCookiesConfigRepository.configurationManager">
            <summary>
            Configuration manager.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Cookie.Implementation.DefaultCookiesConfigRepository.GetCookieWarningSize">
            <summary>
            Get cookie warning size.
            </summary>
            <returns>Cookie warning size.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Cookie.Implementation.DefaultCookiesConfigRepository.GetCookie(System.String)">
            <summary>
            Get cookie config unit by key.
            </summary>
            <param name="key">Requested cookie config key.</param>
            <returns>Cookie config unt.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Cookie.Implement.HttpEncodeCookieEncryptor">
            <summary>
            Http encode cookie encryptor.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Cookie.Implement.HttpEncodeCookieEncryptor.EncryptCookie(System.String)">
            <summary>
            Encrypt cookie.
            </summary>
            <param name="content">Content for encrypt.</param>
            <returns>Encrypted content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Cookie.Implement.HttpEncodeCookieEncryptor.DecryptCookie(System.String)">
            <summary>
            Decrypt cookie.
            </summary>
            <param name="encryptedcontent">Content for encrypted content.</param>
            <returns>Decrypted content.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Encoder.IHtmlEncoder">
            <summary>
            Html encoder interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Encoder.IHtmlEncoder.EncodeJavascript(System.String)">
            <summary>
            Encode javascript.
            </summary>
            <param name="content">Javascript content.</param>
            <returns>Encoded content.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Encoder.Implementation.HttpUtilityHtmlEncoder">
            <summary>
            Implement html encoder by http utility.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Encoder.Implementation.HttpUtilityHtmlEncoder.EncodeJavascript(System.String)">
            <summary>
            Encode javascript.
            </summary>
            <param name="content">Javascript content.</param>
            <returns>Encoded content.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.FreeBlock.IFreeBlockHtmlBuilder">
            <summary>
            Free block html builder.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.FreeBlock.IFreeBlockHtmlBuilder.BuildFreeBlock(Ctrip.Duckbill.Web.FreeBlock.IFreeBlockUnit)">
            <summary>
            Build single free block html.
            </summary>
            <param name="block">Requested block.</param>
            <returns>Block html string.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.FreeBlock.IFreeBlockHtmlBuilder.BuildFreeBlocks(System.Collections.Generic.IEnumerable{Ctrip.Duckbill.Web.FreeBlock.IFreeBlockUnit})">
            <summary>
            Build multiple free block html.
            </summary>
            <param name="blocks">Requested block.</param>
            <returns>Multiple block html string.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.FreeBlock.IFreeBlockSetting">
            <summary>
            Free block setting interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.FreeBlock.IFreeBlockSetting.Key">
            <summary>
            Gets free block key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.FreeBlock.IFreeBlockSetting.IsAtHeader">
            <summary>
            Gets a value indicating whether free block header is at header.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.FreeBlock.IFreeBlockSetting.Ignore">
            <summary>
            Gets a value indicating whether ignore this free block.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.FreeBlock.IFreeBlocksMappingRepository">
            <summary>
            Free blocks mapping repository.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.FreeBlock.IFreeBlocksMappingRepository.GetFreeBlocks(System.String)">
            <summary>
            Get free block setting for this path.
            </summary>
            <param name="path">Requested virtual path.</param>
            <returns>Free block setting collection.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.FreeBlock.IFreeBlocksRepository">
            <summary>
            Free block repository.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.FreeBlock.IFreeBlocksRepository.GetFreeBlock(System.String)">
            <summary>
            Get free block by name.
            </summary>
            <param name="key">Requested free block key.</param>
            <returns>Free block unit.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.FreeBlock.IFreeBlockUnit">
            <summary>
            Free block unit interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.FreeBlock.IFreeBlockUnit.Key">
            <summary>
            Gets free block key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.FreeBlock.IFreeBlockUnit.Content">
            <summary>
            Gets free block content.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.FreeBlock.Implementation.DefaultFreeBlockHtmlBuilder">
            <summary>
            Default free block html builder.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.FreeBlock.Implementation.DefaultFreeBlockHtmlBuilder.BuildFreeBlock(Ctrip.Duckbill.Web.FreeBlock.IFreeBlockUnit)">
            <summary>
            Build free block html.
            </summary>
            <param name="block">Requested block.</param>
            <returns>Block html string.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.FreeBlock.Implementation.DefaultFreeBlockHtmlBuilder.BuildFreeBlocks(System.Collections.Generic.IEnumerable{Ctrip.Duckbill.Web.FreeBlock.IFreeBlockUnit})">
            <summary>
            Build multiple free block html.
            </summary>
            <param name="blocks">Requested block.</param>
            <returns>Multiple block html string.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.FreeBlock.Implementation.DefaultFreeBlocksRepository">
            <summary>
            Default implement of free blocks repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.FreeBlock.Implementation.DefaultFreeBlocksRepository.configurationManager">
            <summary>
            Configuration manager.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.FreeBlock.Implementation.DefaultFreeBlocksRepository.GetFreeBlock(System.String)">
            <summary>
            Get free block by name.
            </summary>
            <param name="key">Requested free block key.</param>
            <returns>Free block unit.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.FreeBlock.Implementation.FreeBlockMappingUnit">
            <summary>
            Mapping free blocks to virtual path.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.FreeBlock.Implementation.FreeBlockMappingUnit.VirtualPath">
            <summary>
            Gets or sets virtual path.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.FreeBlock.Implementation.FreeBlockMappingUnit.Collection">
            <summary>
            Gets or sets free block collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.FreeBlock.Implementation.FreeBlockMappingUnitCollection">
            <summary>
            Free block mapping unit collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.FreeBlock.Implementation.FreeBlockMappingUnitCollection.Collection">
            <summary>
            Gets or sets paths mapping.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.FreeBlock.Implementation.FreeBlocksConfig">
            <summary>
            Free block config.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.FreeBlock.Implementation.FreeBlocksConfig.FreeBlocks">
            <summary>
            Gets or sets free block collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.FreeBlock.Implementation.FreeBlockSetting">
            <summary>
            Free block setting for a special virtual path.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.FreeBlock.Implementation.FreeBlockSetting.Key">
            <summary>
            Gets or sets free block key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.FreeBlock.Implementation.FreeBlockSetting.IsAtHeader">
            <summary>
            Gets or sets a value indicating whether free block header is at header.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.FreeBlock.Implementation.FreeBlockSetting.Ignore">
            <summary>
            Gets or sets a value indicating whether ignore this free block.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.FreeBlock.Implementation.FreeBlocksMappingConfig">
            <summary>
            Free blocks mapping config.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.FreeBlock.Implementation.FreeBlocksMappingConfig.Paths">
            <summary>
            Gets or sets paths mapping.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.FreeBlock.Implementation.FreeBlockUnit">
            <summary>
            Free block unit.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.FreeBlock.Implementation.FreeBlockUnit.Key">
            <summary>
            Gets or sets free block key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.FreeBlock.Implementation.FreeBlockUnit.Content">
            <summary>
            Gets or sets free block content.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.FreeBlock.Implementation.FreeBlockUnit.CDataContent">
            <summary>
            Gets or sets free block content.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.FreeBlock.Implementation.FreeBlockUnitCollection">
            <summary>
            Free block unit collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.FreeBlock.Implementation.FreeBlockUnitCollection.Collection">
            <summary>
            Gets or sets free block collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.FreeBlock.Implementation.InheritableFreeBlocksMappingRepository">
            <summary>
            Inheritable free blocks mapping repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.FreeBlock.Implementation.InheritableFreeBlocksMappingRepository.configurationManager">
            <summary>
            Configuration manager.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.FreeBlock.Implementation.InheritableFreeBlocksMappingRepository.GetFreeBlocks(System.String)">
            <summary>
            Get free block setting for this path.
            </summary>
            <param name="path">Requested virtual path.</param>
            <returns>Free block setting collection.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.HttpApplication">
            <summary>
            Duckbill http application.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.HttpApplication.servicesLocator">
            <summary>
            Services locator.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.HttpApplication.webAppManager">
            <summary>
            Web application manager.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.HttpApplication.#ctor">
            <summary>
            Initializes a new instance of the HttpApplication class.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.HttpApplication.Application_Start">
            <summary>
            Application start handler.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.HttpApplication.Application_BeginRequest">
            <summary>
            Begin request handler.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.HttpApplication.Application_EndRequest">
            <summary>
            End request handler.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.HttpApplication.Application_Error">
            <summary>
            Application error handler.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Image.IImageUrlBuilder">
            <summary>
            Image url builder interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Image.IImageUrlBuilder.Image(System.String)">
            <summary>
            Build image application absolute path.
            </summary>
            <param name="imagePath">The virtual path of the image.</param>
            <returns>The application absolute path of image.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Image.IImageUrlBuilder.Image(System.String,System.String)">
            <summary>
            Build image application absolute path.
            </summary>
            <param name="host">Special host name.</param>
            <param name="imagePath">The virtual path of the image.</param>
            <returns>The application absolute path of image.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Image.Implementation.DefaultImageUrlBuilder">
            <summary>
            Default image url builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Image.Implementation.DefaultImageUrlBuilder.urlBuilder">
            <summary>
            Url builder.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Image.Implementation.DefaultImageUrlBuilder.Image(System.String)">
            <summary>
            Build image application absolute path.
            </summary>
            <param name="imagePath">The virtual path of the image.</param>
            <returns>The application absolute path of image.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Image.Implementation.DefaultImageUrlBuilder.Image(System.String,System.String)">
            <summary>
            Build image application absolute path.
            </summary>
            <param name="host">Special host name.</param>
            <param name="imagePath">The virtual path of the image.</param>
            <returns>The application absolute path of image.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Implementation.HttpPostedFileWrapper">
            <summary>
            Http posted file wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Implementation.HttpPostedFileWrapper.file">
            <summary>
            The file.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Implementation.HttpPostedFileWrapper.#ctor(System.Web.HttpPostedFile)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Web.Implementation.HttpPostedFileWrapper"/> class.
            </summary>
            <param name="file">The file.</param>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Implementation.HttpPostedFileWrapper.ContentLength">
            <summary>
            Gets the size of an uploaded file, in bytes.
            </summary>
            <value>The file length, in bytes.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Implementation.HttpPostedFileWrapper.ContentType">
            <summary>
            Gets the MIME content type of a file sent by a client.
            </summary>
            <value>The MIME content type of the uploaded file.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Implementation.HttpPostedFileWrapper.FileName">
            <summary>
            Gets the fully qualified name of the file on the client.
            </summary>
            <value>The name of the client's file, including the directory path.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Implementation.HttpPostedFileWrapper.InputStream">
            <summary>
            Gets a System.IO.Stream object that points to an uploaded file to prepare for reading the contents of the file.
            </summary>
            <value>The input stream.</value>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Implementation.HttpPostedFileWrapper.SaveAs(System.String)">
            <summary>
            Saves the contents of an uploaded file.
            </summary>
            <param name="filename">The name of the saved file.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Implementation.UrlUtility">
            <summary>
            Url utility implement.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Implementation.UrlUtility.regex">
            <summary>
            The regex.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Implementation.UrlUtility.#ctor(Ctrip.Duckbill.IRegex)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Web.Implementation.UrlUtility"/> class.
            </summary>
            <param name="regex">The regex.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Implementation.UrlUtility.FormatUrl(System.String)">
            <summary>
            Format url.
            </summary>
            <param name="inputString">Current url.</param>
            <returns>Formated url final url will be set to lower case.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Implementation.UrlUtility.FormatUrl(System.String,System.Boolean)">
            <summary>
            Format url.
            </summary>
            <param name="inputString">Current url.</param>
            <param name="keepOriginalCase">If set to <c>true</c> formated url will keep original case.</param>
            <returns>Formated url.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.IP.Implementation.DefaultWebIPUtility">
            <summary>
            Default implement of web ip utility.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.IP.Implementation.DefaultWebIPUtility.contextRepository">
            <summary>
            Context repository.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.IP.Implementation.DefaultWebIPUtility.GetReferenceIP">
            <summary>
            Get reference ip.
            </summary>
            <returns>IP address.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.IP.IWebIPUtility">
            <summary>
            Web ip utility interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.IP.IWebIPUtility.GetReferenceIP">
            <summary>
            Get reference ip.
            </summary>
            <returns>IP address.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.IUrlUtility">
            <summary>
            Url utility interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.IUrlUtility.FormatUrl(System.String)">
            <summary>
            Format url.
            </summary>
            <param name="inputString">Current url.</param>
            <returns>Formated url final url will be set to lower case.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.IUrlUtility.FormatUrl(System.String,System.Boolean)">
            <summary>
            Format url.
            </summary>
            <param name="inputString">Current url.</param>
            <param name="keepOriginalCase">If set to <c>true</c> formated url will keep original case.</param>
            <returns>Formated url.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Link.ICssHrefBuilder">
            <summary>
            Css href builder interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Link.ICssHrefBuilder.Css(System.String)">
            <summary>
            Build css application absolute path.
            </summary>
            <param name="cssPath">The virtual path of the css.</param>
            <returns>The application absolute path of css.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Link.ICssHrefBuilder.Css(System.String,System.String)">
            <summary>
            Build css application absolute path.
            </summary>
            <param name="host">Special host name.</param>
            <param name="cssPath">The virtual path of the css.</param>
            <returns>The application absolute path of css.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Link.ILinkHtmlBuilder">
            <summary>
            Link html builder interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Link.ILinkHtmlBuilder.BuildLink(Ctrip.Duckbill.Web.Link.ILinkUnit)">
            <summary>
            Build single link.
            </summary>
            <param name="link">A single link.</param>
            <returns>A link HTML tag.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Link.ILinkHtmlBuilder.BuildLinks(System.Collections.Generic.IEnumerable{Ctrip.Duckbill.Web.Link.ILinkUnit})">
            <summary>
            Build multiple link.
            </summary>
            <param name="links">A group of links.</param>
            <returns>A group of link HTML tag.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Link.ILinkSetting">
            <summary>
            Link setting interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Link.ILinkSetting.Key">
            <summary>
            Gets link reference key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Link.ILinkSetting.Ignore">
            <summary>
            Gets a value indicating whether ignore this link.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Link.ILinksMappingRepository">
            <summary>
            Link mapping repository interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Link.ILinksMappingRepository.GetLinks(System.String)">
            <summary>
            Get links for this path.
            </summary>
            <param name="path">Requested virtual path.</param>
            <returns>Link setting collection.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Link.ILinksRepository">
            <summary>
            Link repository interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Link.ILinksRepository.GetLinks">
            <summary>
            Get all link.
            </summary>
            <returns>Link collection.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Link.ILinksRepository.GetLink(System.String)">
            <summary>
            Get link by name.
            </summary>
            <param name="key">Link reference key.</param>
            <returns>Link instance.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Link.ILinkUnit">
            <summary>
            Link unit interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Link.ILinkUnit.Key">
            <summary>
            Gets script key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Link.ILinkUnit.HostName">
            <summary>
            Gets host name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Link.ILinkUnit.Href">
            <summary>
            Gets link href.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Link.ILinkUnit.Rel">
            <summary>
            Gets link rel.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Link.ILinkUnit.Type">
            <summary>
            Gets link type.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Link.ILinkUnit.Browser">
            <summary>
            Gets browser type.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Link.ILinkUnit.IEVersion">
            <summary>
            Gets IE version.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Link.ILinkUnit.Attributes">
            <summary>
            Gets attributes.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Link.Implementation.DefaultCssHrefBuilder">
            <summary>
            Default implement of css href builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Link.Implementation.DefaultCssHrefBuilder.urlBuilder">
            <summary>
            Url builder.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Link.Implementation.DefaultCssHrefBuilder.Css(System.String)">
            <summary>
            Build css application absolute path.
            </summary>
            <param name="cssPath">The virtual path of the css.</param>
            <returns>The application absolute path of css.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Link.Implementation.DefaultCssHrefBuilder.Css(System.String,System.String)">
            <summary>
            Build css application absolute path.
            </summary>
            <param name="host">Special host name.</param>
            <param name="cssPath">The virtual path of the css.</param>
            <returns>The application absolute path of css.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Link.Implementation.DefaultLinkHtmlBuilder">
            <summary>
            Default link html builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Link.Implementation.DefaultLinkHtmlBuilder.csshrefBuilder">
            <summary>
            Css href builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Link.Implementation.DefaultLinkHtmlBuilder.imageUrlBuilder">
            <summary>
            Image url builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Link.Implementation.DefaultLinkHtmlBuilder.urlbuilder">
            <summary>
            Url builder.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Link.Implementation.DefaultLinkHtmlBuilder.BuildLink(Ctrip.Duckbill.Web.Link.ILinkUnit)">
            <summary>
            Build single link.
            </summary>
            <param name="link">A single link.</param>
            <returns>A link HTML tag.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Link.Implementation.DefaultLinkHtmlBuilder.BuildLinks(System.Collections.Generic.IEnumerable{Ctrip.Duckbill.Web.Link.ILinkUnit})">
            <summary>
            Build multiple link.
            </summary>
            <param name="links">A group of links.</param>
            <returns>A group of link HTML tag.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Link.Implementation.DefaultLinkHtmlBuilder.GetLinkHtml(Ctrip.Duckbill.Web.Link.ILinkUnit)">
            <summary>
            Generate link HTML tags.
            </summary>
            <param name="link">Link information.</param>
            <returns>HTML string.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Link.Implementation.DefaultLinkHtmlBuilder.GetLinkHtmlAttributes(Ctrip.Duckbill.Web.Link.ILinkUnit)">
            <summary>
            Get link html attributes.
            </summary>
            <param name="link">Link information.</param>
            <returns>HTML attribute string.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Link.Implementation.DefaultLinkHtmlBuilder.BuildHref(Ctrip.Duckbill.Web.Link.ILinkUnit)">
            <summary>
            Build link href.
            </summary>
            <param name="link">Link information.</param>
            <returns>Link href.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Link.Implementation.DefaultLinksRepository">
            <summary>
            Default implement of link repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Link.Implementation.DefaultLinksRepository.configurationManager">
            <summary>
            Configuration manager.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Link.Implementation.DefaultLinksRepository.GetLinks">
            <summary>
            Get all link.
            </summary>
            <returns>Link collection.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Link.Implementation.DefaultLinksRepository.GetLink(System.String)">
            <summary>
            Get link by name.
            </summary>
            <param name="key">Link reference key.</param>
            <returns>Link instance.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Link.Implementation.DefaultPathLinkRender">
            <summary>
            Default implement of path link render interface.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Link.Implementation.DefaultPathLinkRender.myLinkMappingRepository">
            <summary>
            Field of link mapping repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Link.Implementation.DefaultPathLinkRender.myLinkRepository">
            <summary>
            Field of link config repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Link.Implementation.DefaultPathLinkRender.myLinkBuilder">
            <summary>
            Field of link builder.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Link.Implementation.DefaultPathLinkRender.RenderHeaderLink(System.String,System.Collections.Generic.IEnumerable{Ctrip.Duckbill.Web.Link.ILinkUnit})">
            <summary>
            Render one or a group of link HTML tag on header.
            </summary>
            <param name="path">Requested path.</param>
            <param name="addtionalLinks">Addtional links.</param>
            <returns>One or a group of link HTML tag.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Link.Implementation.DefaultPathLinkRender.GetPathLinks(System.Collections.Generic.IEnumerable{Ctrip.Duckbill.Web.Link.ILinkSetting})">
            <summary>
            Get path links.
            </summary>
            <param name="settings">Link settings for path.</param>
            <returns>One or a group of link.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Link.Implementation.InheritableLinksMappingRepository">
            <summary>
            Inheritable implement of link mapping repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Link.Implementation.InheritableLinksMappingRepository.configurationManager">
            <summary>
            Configuration manager.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Link.Implementation.InheritableLinksMappingRepository.GetLinks(System.String)">
            <summary>
            Get links for this path.
            </summary>
            <param name="path">Requested virtual path.</param>
            <returns>Link setting collection.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Link.Implementation.LinkMappingUnit">
            <summary>
            Mapping link reference to virtual path.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Link.Implementation.LinkMappingUnit.VirtualPath">
            <summary>
            Gets or sets virtual path.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Link.Implementation.LinkMappingUnit.Ignore">
            <summary>
            Gets or sets a value indicating whether current path ignore parent links.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Link.Implementation.LinkMappingUnit.LinkCollection">
            <summary>
            Gets or sets link reference collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Link.Implementation.LinkMappingUnitCollection">
            <summary>
            Link mapping unit collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Link.Implementation.LinkMappingUnitCollection.Collection">
            <summary>
            Gets or sets paths mapping.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Link.Implementation.LinksConfig">
            <summary>
            Link reference config.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Link.Implementation.LinksConfig.Links">
            <summary>
            Gets or sets link collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Link.Implementation.LinkSetting">
            <summary>
            Link setting for a special virtual path.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Link.Implementation.LinkSetting.Key">
            <summary>
            Gets or sets link reference key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Link.Implementation.LinkSetting.Ignore">
            <summary>
            Gets or sets a value indicating whether ignore this link.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Link.Implementation.LinksMappingConfig">
            <summary>
            Link mapping config.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Link.Implementation.LinksMappingConfig.Paths">
            <summary>
            Gets or sets paths mapping.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Link.Implementation.LinkUnit">
            <summary>
            Link unit.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Link.Implementation.LinkUnit.Key">
            <summary>
            Gets or sets script key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Link.Implementation.LinkUnit.HostName">
            <summary>
            Gets or sets host name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Link.Implementation.LinkUnit.Href">
            <summary>
            Gets or sets link href.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Link.Implementation.LinkUnit.Rel">
            <summary>
            Gets or sets link rel.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Link.Implementation.LinkUnit.Type">
            <summary>
            Gets or sets link type.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Link.Implementation.LinkUnit.Browser">
            <summary>
            Gets or sets browser type.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Link.Implementation.LinkUnit.IEVersion">
            <summary>
            Gets or sets IE version.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Link.Implementation.LinkUnit.AttributesConfig">
            <summary>
            Gets or sets attributes.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Link.Implementation.LinkUnit.Attributes">
            <summary>
            Gets attributes.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Link.Implementation.LinkUnitCollection">
            <summary>
            Link unit collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Link.Implementation.LinkUnitCollection.Collection">
            <summary>
            Gets or sets link collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Link.IPathLinkRender">
            <summary>
            A interface to render one or a group of link HTML tag.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Link.IPathLinkRender.RenderHeaderLink(System.String,System.Collections.Generic.IEnumerable{Ctrip.Duckbill.Web.Link.ILinkUnit})">
            <summary>
            Render one or a group of link HTML tag on header.
            </summary>
            <param name="path">Requested path.</param>
            <param name="addtionalLinks">Addtional links.</param>
            <returns>One or a group of link HTML tag.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Meta.IMetaHtmlBuilder">
            <summary>
            Meta html builder interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Meta.IMetaHtmlBuilder.BuildMeta(Ctrip.Duckbill.Web.Meta.IMetaUnit,System.Web.HttpBrowserCapabilitiesBase)">
            <summary>
            Build meta html tag.
            </summary>
            <param name="meta">A single meta.</param>
            <param name="browser">Browser information.</param>
            <returns>A meta html tag.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Meta.IMetaHtmlBuilder.BuildMetas(System.Collections.Generic.IEnumerable{Ctrip.Duckbill.Web.Meta.IMetaUnit},System.Web.HttpBrowserCapabilitiesBase)">
            <summary>
            Build metas html tag.
            </summary>
            <param name="metas">Multiple meta.</param>
            <param name="browser">Browser information.</param>
            <returns>A group of html tag.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Meta.IMetaSetting">
            <summary>
            Meta setting interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Meta.IMetaSetting.Key">
            <summary>
            Gets meta key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Meta.IMetaSetting.Ignore">
            <summary>
            Gets a value indicating whether ignore this meta.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Meta.IMetasMappingRepository">
            <summary>
            Metas mapping repository interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Meta.IMetasMappingRepository.GetMetas(System.String)">
            <summary>
            Get metas for this path.
            </summary>
            <param name="path">Requested virtual path.</param>
            <returns>Meta setting collection.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Meta.IMetasRepository">
            <summary>
            Metas repository interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Meta.IMetasRepository.GetMeta(System.String)">
            <summary>
            Get meta.
            </summary>
            <param name="key">Requested key.</param>
            <returns>Meta unit.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Meta.IMetaUnit">
            <summary>
            Meta unit interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Meta.IMetaUnit.Key">
            <summary>
            Gets meta key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Meta.IMetaUnit.Name">
            <summary>
            Gets meta name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Meta.IMetaUnit.Content">
            <summary>
            Gets meta content.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Meta.IMetaUnit.Attributes">
            <summary>
            Gets attributes.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Meta.IMetaUnit.Browsers">
            <summary>
            Gets browsers capabilities setting.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Meta.Implementation.DefaultMetaHtmlBuilder">
            <summary>
            Default implement of meta html builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Meta.Implementation.DefaultMetaHtmlBuilder.regex">
            <summary>
            My regex.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Meta.Implementation.DefaultMetaHtmlBuilder.BuildMeta(Ctrip.Duckbill.Web.Meta.IMetaUnit,System.Web.HttpBrowserCapabilitiesBase)">
            <summary>
            Build meta html tag.
            </summary>
            <param name="meta">A single meta.</param>
            <param name="browser">Browser information.</param>
            <returns>A meta html tag.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Meta.Implementation.DefaultMetaHtmlBuilder.BuildMetas(System.Collections.Generic.IEnumerable{Ctrip.Duckbill.Web.Meta.IMetaUnit},System.Web.HttpBrowserCapabilitiesBase)">
            <summary>
            Build metas html tag.
            </summary>
            <param name="metas">Multiple meta.</param>
            <param name="browser">Browser information.</param>
            <returns>A group of html tag.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Meta.Implementation.DefaultMetaHtmlBuilder.GetMetaHtml(Ctrip.Duckbill.Web.Meta.IMetaUnit,System.Web.HttpBrowserCapabilitiesBase)">
            <summary>
            Generate meta HTML tags.
            </summary>
            <param name="meta">Meta information.</param>
            <param name="browser">Browser information.</param>
            <returns>HTML string.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Meta.Implementation.DefaultMetaHtmlBuilder.GetAttributeHTML(System.Collections.Generic.IEnumerable{Ctrip.Duckbill.ICommonAttribute})">
            <summary>
            Get attribute html.
            </summary>
            <param name="attributes">Common attribute information.</param>
            <returns>HTML string.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Meta.Implementation.DefaultMetaHtmlBuilder.CheckMetaBrowserCapability(Ctrip.Duckbill.Web.Meta.IMetaUnit,System.Web.HttpBrowserCapabilitiesBase)">
            <summary>
            Check meta browser capability.
            </summary>
            <param name="meta">Meta information.</param>
            <param name="browser">Browser information.</param>
            <returns>Whether meta should be render on this browser.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Meta.Implementation.DefaultMetaHtmlBuilder.DetermineSetting(Ctrip.Duckbill.Web.Browser.IBrowserCapabilitiesSetting,System.Web.HttpBrowserCapabilitiesBase)">
            <summary>
            Determine setting for browser.
            </summary>
            <param name="setting">Setting information.</param>
            <param name="browser">Browser information.</param>
            <returns>Whether the setting is for this browser.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Meta.Implementation.DefaultMetasRepository">
            <summary>
            Default implement of metas repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Meta.Implementation.DefaultMetasRepository.configurationManager">
            <summary>
            Configuration manager.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Meta.Implementation.DefaultMetasRepository.GetMeta(System.String)">
            <summary>
            Get meta.
            </summary>
            <param name="key">Requested key.</param>
            <returns>Meta unit.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Meta.Implementation.DefaultPathMetaRender">
            <summary>
            Default implement of path meta render.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Meta.Implementation.DefaultPathMetaRender.RenderHeaderMetas(System.String,System.Collections.Generic.IEnumerable{Ctrip.Duckbill.Web.Meta.IMetaUnit},System.Web.HttpBrowserCapabilitiesBase)">
            <summary>
            Render one or a group of metas HTML tag on header.
            </summary>
            <param name="path">Requested path.</param>
            <param name="addtionalMetas">Addtional mets.</param>
            <param name="browser">Browser capabilities.</param>
            <returns>One or a group of metas HTML tag.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Meta.Implementation.DefaultPathMetaRender.GetPathMetas(System.String)">
            <summary>
            Get path metas.
            </summary>
            <param name="path">Virtual path.</param>
            <returns>Metas for this path.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Meta.Implementation.DefaultPathMetaRender.RenderMetas(System.Collections.Generic.IEnumerable{Ctrip.Duckbill.Web.Meta.IMetaUnit},System.Web.HttpBrowserCapabilitiesBase)">
            <summary>
            Render multiple metas.
            </summary>
            <param name="metas">A group of mets.</param>
            <param name="browser">Browser capabilities.</param>
            <returns>A group of metas HTML tag.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Meta.Implementation.InheritableMetasMappingRepository">
            <summary>
            Inheritable implement of metas mapping repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Meta.Implementation.InheritableMetasMappingRepository.configurationManager">
            <summary>
            Configuration manager.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Meta.Implementation.InheritableMetasMappingRepository.GetMetas(System.String)">
            <summary>
            Get metas for this path.
            </summary>
            <param name="path">Requested virtual path.</param>
            <returns>Meta setting collection.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Meta.Implementation.MetaMappingUnit">
            <summary>
            Mapping metas to virtual path.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Meta.Implementation.MetaMappingUnit.VirtualPath">
            <summary>
            Gets or sets virtual path.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Meta.Implementation.MetaMappingUnit.Collection">
            <summary>
            Gets or sets metas collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Meta.Implementation.MetaMappingUnitCollection">
            <summary>
            Meta mapping unit collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Meta.Implementation.MetaMappingUnitCollection.Collection">
            <summary>
            Gets or sets paths mapping.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Meta.Implementation.MetasConfig">
            <summary>
            Metas config.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Meta.Implementation.MetasConfig.Metas">
            <summary>
            Gets or sets metas collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Meta.Implementation.MetaSetting">
            <summary>
            Meta setting for a special virtual path.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Meta.Implementation.MetaSetting.Key">
            <summary>
            Gets or sets meta key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Meta.Implementation.MetaSetting.Ignore">
            <summary>
            Gets or sets a value indicating whether ignore this meta.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Meta.Implementation.MetasMappingConfig">
            <summary>
            Metas mapping config.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Meta.Implementation.MetasMappingConfig.Paths">
            <summary>
            Gets or sets paths mapping.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Meta.Implementation.MetaUnit">
            <summary>
            Meta unit.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Meta.Implementation.MetaUnit.myKey">
            <summary>
            Field of my key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Meta.Implementation.MetaUnit.Key">
            <summary>
            Gets or sets meta key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Meta.Implementation.MetaUnit.Name">
            <summary>
            Gets or sets meta name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Meta.Implementation.MetaUnit.Content">
            <summary>
            Gets or sets meta content.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Meta.Implementation.MetaUnit.AttributesConfig">
            <summary>
            Gets or sets attributes.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Meta.Implementation.MetaUnit.Attributes">
            <summary>
            Gets attributes.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Meta.Implementation.MetaUnit.BrowsersConfig">
            <summary>
            Gets or sets browsers capabilities setting.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Meta.Implementation.MetaUnit.Browsers">
            <summary>
            Gets browsers capabilities setting.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Meta.Implementation.MetaUnitCollection">
            <summary>
            Meta unit collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Meta.Implementation.MetaUnitCollection.Collection">
            <summary>
            Gets or sets metas collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Meta.IPathMetaRender">
            <summary>
            A interface to render one or a group of meta HTML tag.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Meta.IPathMetaRender.RenderHeaderMetas(System.String,System.Collections.Generic.IEnumerable{Ctrip.Duckbill.Web.Meta.IMetaUnit},System.Web.HttpBrowserCapabilitiesBase)">
            <summary>
            Render one or a group of metas HTML tag on header.
            </summary>
            <param name="path">Requested path.</param>
            <param name="addtionalMetas">Addtional metas.</param>
            <param name="browser">Browser capabilities.</param>
            <returns>One or a group of metas HTML tag.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Misc.HttpValueCollection">
            <summary>
            Http value collection. [Copy from microsoft dotnot source code].
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Misc.HttpValueCollection.#ctor">
            <summary>
            Initializes a new instance of the HttpValueCollection class.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Misc.HttpValueCollection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the HttpValueCollection class.
            </summary>
            <param name="str">Parameter of str.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Misc.HttpValueCollection.#ctor(System.String,System.Boolean,System.Boolean,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the HttpValueCollection class.
            </summary>
            <param name="str">Parameter of str.</param>
            <param name="readOnly">Parameter of read only.</param>
            <param name="urlencoded">Parameter of urlencoded.</param>
            <param name="encoding">Parameter of encoding.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Misc.HttpValueCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the HttpValueCollection class.
            </summary>
            <param name="capacity">Parameter of capacity.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Misc.HttpValueCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the HttpValueCollection class.
            </summary>
            <param name="info">Parameter of serializtion information.</param>
            <param name="context">Parameter of stream context.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Misc.HttpValueCollection.ToString">
            <summary>
            Return the string value of current http value collection.
            </summary>
            <returns>String value of current http value collection.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Misc.HttpValueCollection.ToString(System.Boolean)">
            <summary>
            Return the string value of current http value collection.
            </summary>
            <param name="urlencoded">Parameter of urlencoded.</param>
            <returns>String value of current http value collection.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Misc.HttpValueCollection.ToString(System.Boolean,System.Collections.IDictionary)">
            <summary>
            Return the string value of current http value collection.
            </summary>
            <param name="urlencoded">Parameter of urlencoded.</param>
            <param name="excludeKeys">Parameter o exclued keys.</param>
            <returns>String value of current http value collection.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Misc.HttpValueCollection.MakeReadOnly">
            <summary>
            Make readonley.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Misc.HttpValueCollection.MakeReadWrite">
            <summary>
            Make read and write.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Misc.HttpValueCollection.FillFromString(System.String)">
            <summary>
            Fill from string.
            </summary>
            <param name="s">Parameter of string.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Misc.HttpValueCollection.FillFromString(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Fill from string.
            </summary>
            <param name="s">Parameter of string.</param>
            <param name="urlencoded">Parameter of url encode.</param>
            <param name="encoding">Parameter of encoding.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Misc.HttpValueCollection.FillFromEncodedBytes(System.Byte[],System.Text.Encoding)">
            <summary>
            Fill from encode bytes.
            </summary>
            <param name="bytes">Parameter of encoded bytes.</param>
            <param name="encoding">Parameter of encoding.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Misc.HttpValueCollection.Add(System.Web.HttpCookieCollection)">
            <summary>
            Add a httpcookie collection.
            </summary>
            <param name="c">Parameter of http cookie collection.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Misc.HttpValueCollection.Reset">
            <summary>
            Rest this instance.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Misc.IEOnlyType">
            <summary>
            IE only type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Misc.IEOnlyType.Normal">
            <summary>
            Normal support IE and other browser.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Misc.IEOnlyType.NotIE">
            <summary>
            Not support IE.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Misc.IEOnlyType.IEOnly">
            <summary>
            Just support IE.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.DefaultRouteAliasGenerator">
            <summary>
            Default route alias generator.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.DefaultRouteAliasGenerator.GenerateAlias(System.Web.Routing.RouteData)">
            <summary>
            Generate route alias.
            </summary>
            <param name="routeData">Route data.</param>
            <returns>Route alias.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.DefaultRouteAliasGenerator.IsAlias(Ctrip.Duckbill.Web.Mvc.Alias.IRouteAliasUnit,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Check whether alias unit is current alias.
            </summary>
            <param name="alias">Alias unit.</param>
            <param name="controllerName">Controller name.</param>
            <param name="actionName">Action name.</param>
            <param name="parameters">All parameters.</param>
            <returns>Wheter alias unt is current alias.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.DefaultRouteAliasGenerator.AliasParameterIsInParameters(Ctrip.Duckbill.ICommonAttribute,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Check whehter alias parameter is in parameters.
            </summary>
            <param name="aliasParameter">Alias parameter.</param>
            <param name="parameters">All parameters.</param>
            <returns>Whehter alias parameter is in parameters.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.DefaultSiteAliasesRepository">
            <summary>
            Default implement of site aliases repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.DefaultSiteAliasesRepository.configurationManager">
            <summary>
            Configuration manager.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.DefaultSiteAliasesRepository.hostRepository">
            <summary>
            Host repository.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.DefaultSiteAliasesRepository.GetInSiteAlias(System.String)">
            <summary>
            Get in site alias by alias name.
            </summary>
            <param name="aliasName">Requested alias name.</param>
            <returns>Route alias unit.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.DefaultSiteAliasesRepository.GetAllInSiteAlias">
            <summary>
            Get all in site aliases.
            </summary>
            <returns>All in site aliases.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.DefaultSiteAliasesRepository.GetOffSiteAlias(System.String)">
            <summary>
            Get off site alias by alias name.
            </summary>
            <param name="aliasName">Requested alias name.</param>
            <returns>Url alias unit.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.DefaultSiteAliasesRepository.GetDefaultInSiteHost">
            <summary>
            Get default in site host.
            </summary>
            <returns>Default in site host.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.DefaultSiteAliasesRepository.GetDefaultOffSiteHost">
            <summary>
            Get default ssl host.
            </summary>
            <returns>Default off site host.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.DefaultSiteAliasUrlBuilder">
            <summary>
            Defualt implement of site alias url builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.DefaultSiteAliasUrlBuilder.routeAliasUrlBuilder">
            <summary>
            Route aliaser url builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.DefaultSiteAliasUrlBuilder.urlAliasUrlBuilder">
            <summary>
            Url alias url builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.DefaultSiteAliasUrlBuilder.siteAliasesRepository">
            <summary>
            Site alias repository.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.DefaultSiteAliasUrlBuilder.BuildUrl(System.String)">
            <summary>
            Build url by route alias.
            </summary>
            <param name="alias">Site url alias.</param>
            <returns>The application absolute path.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.DefaultSiteAliasUrlBuilder.BuildUrl(System.String,System.Object)">
            <summary>
            Build url by route alias.
            </summary>
            <param name="alias">Site url alias.</param>
            <param name="routeValues">An object that contains the HTML attributes for the element.</param>
            <returns>The application absolute path.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.DefaultSiteAliasUrlBuilder.BuildUrl(System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Build url by route alias.
            </summary>
            <param name="alias">Site url alias.</param>
            <param name="routeValues">An object that contains the HTML attributes for the element.</param>
            <returns>The application absolute path.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.DefaultUrlAliasUrlBuilder">
            <summary>
            Default url alias url builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.DefaultUrlAliasUrlBuilder.urlbuilder">
            <summary>
            Url builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.DefaultUrlAliasUrlBuilder.aliaseRespository">
            <summary>
            Site aliaseRespository.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.DefaultUrlAliasUrlBuilder.BuildUrl(Ctrip.Duckbill.Web.Alias.IUrlAliasUnit)">
            <summary>
            Build url by route alias.
            </summary>
            <param name="alias">An object that contains the parameters for a url.</param>
            <returns>The application absolute path.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.DefaultUrlAliasUrlBuilder.BuildUrl(Ctrip.Duckbill.Web.Alias.IUrlAliasUnit,System.Object)">
            <summary>
            Build url by route alias.
            </summary>
            <param name="alias">An object that contains the parameters for a url.</param>
            <param name="routeValues">The route values.</param>
            <returns>The application absolute path.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.DefaultUrlAliasUrlBuilder.BuildUrl(Ctrip.Duckbill.Web.Alias.IUrlAliasUnit,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Build url by route alias.
            </summary>
            <param name="alias">An object that contains the parameters for a url.</param>
            <param name="routeValues">The route values.</param>
            <returns>The application absolute path.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.DefaultUrlAliasUrlBuilder.GetQueryString(System.Web.Routing.RouteValueDictionary)">
            <summary>
            Get query string.
            </summary>
            <param name="routeValues">The route values.</param>
            <returns>Query string.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.RouteAliasUnit">
            <summary>
            Route alias unit. A special controller, action and special parameters define a route alias.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.RouteAliasUnit.Name">
            <summary>
            Gets or sets alias.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.RouteAliasUnit.RouteName">
            <summary>
            Gets or sets router name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.RouteAliasUnit.ActionName">
            <summary>
            Gets or sets the name of the action.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.RouteAliasUnit.ControllerName">
            <summary>
            Gets or sets the name of the controller.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.RouteAliasUnit.HostName">
            <summary>
            Gets or sets the name of the host. If the url is a relative url, the host name is needed.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.RouteAliasUnit.ParametersConfig">
            <summary>
            Gets or sets parameters.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.RouteAliasUnit.Parameters">
            <summary>
            Gets parameters.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.SiteAliasesConfig">
            <summary>
            Site aliases config.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.SiteAliasesConfig.InSiteAlias">
            <summary>
            Gets or sets in site alias collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.SiteAliasesConfig.OffSiteAlias">
            <summary>
            Gets or sets off site alias collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.SiteRouteAliasCollection">
            <summary>
            Site route alias collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.SiteRouteAliasCollection.DefaultHost">
            <summary>
            Gets or sets default route host.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.SiteRouteAliasCollection.Collection">
            <summary>
            Gets or sets in site alias collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.SiteUrlAliasCollection">
            <summary>
            Site url alias collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.SiteUrlAliasCollection.DefaulHost">
            <summary>
            Gets or sets default url host.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Alias.Implementation.SiteUrlAliasCollection.Collection">
            <summary>
            Gets or sets off site alias collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.Alias.IRouteAliasGenerator">
            <summary>
            Route alias generator.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Alias.IRouteAliasGenerator.GenerateAlias(System.Web.Routing.RouteData)">
            <summary>
            Generate route alias.
            </summary>
            <param name="routeData">Route data.</param>
            <returns>Route alias.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.Alias.IRouteAliasUnit">
            <summary>
            Route alias unit.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Alias.IRouteAliasUnit.Name">
            <summary>
            Gets alias.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Alias.IRouteAliasUnit.RouteName">
            <summary>
            Gets router name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Alias.IRouteAliasUnit.ActionName">
            <summary>
            Gets the name of the action.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Alias.IRouteAliasUnit.ControllerName">
            <summary>
            Gets the name of the controller.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Alias.IRouteAliasUnit.HostName">
            <summary>
            Gets the name of the host. If the url is a relative url, the host name is needed.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Alias.IRouteAliasUnit.Parameters">
            <summary>
            Gets parameters.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.Alias.IRouteAliasUrlBuilder">
            <summary>
            Route alias url builder.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Alias.IRouteAliasUrlBuilder.BuildUrl(Ctrip.Duckbill.Web.Mvc.Alias.IRouteAliasUnit)">
            <summary>
            Build url by route alias.
            </summary>
            <param name="alias">An object that contains the parameters for a route.</param>
            <returns>The application absolute path.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Alias.IRouteAliasUrlBuilder.BuildUrl(Ctrip.Duckbill.Web.Mvc.Alias.IRouteAliasUnit,System.Object)">
            <summary>
            Build url by route alias.
            </summary>
            <param name="alias">An object that contains the parameters for a route.</param>
            <param name="routeValues">An object that contains the HTML attributes for the element.</param>
            <returns>The application absolute path.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Alias.IRouteAliasUrlBuilder.BuildUrl(Ctrip.Duckbill.Web.Mvc.Alias.IRouteAliasUnit,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Build url by route alias.
            </summary>
            <param name="alias">An object that contains the parameters for a route.</param>
            <param name="routeValues">An object that contains the HTML attributes for the element.</param>
            <returns>The application absolute path.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.Alias.ISiteAliasesRepository">
            <summary>
            Site aliases repository.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Alias.ISiteAliasesRepository.GetInSiteAlias(System.String)">
            <summary>
            Get in site alias by alias name.
            </summary>
            <param name="aliasName">Requested alias name.</param>
            <returns>Route alias unit.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Alias.ISiteAliasesRepository.GetAllInSiteAlias">
            <summary>
            Get all in site aliases.
            </summary>
            <returns>All in site aliases.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Alias.ISiteAliasesRepository.GetOffSiteAlias(System.String)">
            <summary>
            Get off site alias by alias name.
            </summary>
            <param name="aliasName">Requested alias name.</param>
            <returns>Url alias unit.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Alias.ISiteAliasesRepository.GetDefaultInSiteHost">
            <summary>
            Get default in site host.
            </summary>
            <returns>Default in site host.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Alias.ISiteAliasesRepository.GetDefaultOffSiteHost">
            <summary>
            Get default ssl host.
            </summary>
            <returns>Default off site host.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.Alias.ISiteAliasUrlBuilder">
            <summary>
            Site alias url builder.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Alias.ISiteAliasUrlBuilder.BuildUrl(System.String)">
            <summary>
            Build url by route alias.
            </summary>
            <param name="alias">Site url alias.</param>
            <returns>The application absolute path.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Alias.ISiteAliasUrlBuilder.BuildUrl(System.String,System.Object)">
            <summary>
            Build url by route alias.
            </summary>
            <param name="alias">Site url alias.</param>
            <param name="routeValues">An object that contains the HTML attributes for the element.</param>
            <returns>The application absolute path.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Alias.ISiteAliasUrlBuilder.BuildUrl(System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Build url by route alias.
            </summary>
            <param name="alias">Site url alias.</param>
            <param name="routeValues">An object that contains the HTML attributes for the element.</param>
            <returns>The application absolute path.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.BigPipe.IBigPipeViewMappingRepository">
            <summary>
            Big pipe view mapping repository.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.BigPipe.IBigPipeViewMappingRepository.GetNewViewName(System.String,System.String)">
            <summary>
            Get new view name.
            </summary>
            <param name="controllerName">Controller name.</param>
            <param name="viewName">View name.</param>
            <returns>New view name.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.BigPipe.Implementation.BigPipeViewMappingCollection">
            <summary>
            Bige pipe view mapping collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.BigPipe.Implementation.BigPipeViewMappingCollection.Collection">
            <summary>
            Gets or sets big pipe view mapping collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.BigPipe.Implementation.BigPipeViewMappingConfig">
            <summary>
            Bigpipe view mapping config.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.BigPipe.Implementation.BigPipeViewMappingConfig.Mappings">
            <summary>
            Gets or sets bigpipe view mapping collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.BigPipe.Implementation.BigPipeViewMappingUnit">
            <summary>
            Bigpipe view mapping unit.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.BigPipe.Implementation.BigPipeViewMappingUnit.OriginalControllerName">
            <summary>
            Gets or sets original controller name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.BigPipe.Implementation.BigPipeViewMappingUnit.OriginalViewName">
            <summary>
            Gets or sets original view name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.BigPipe.Implementation.BigPipeViewMappingUnit.DestinationViewName">
            <summary>
            Gets or sets destination view name.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.BigPipe.Implementation.DefaultBigPipeViewMappingRepository">
            <summary>
            Default big pipe view mapping repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Mvc.BigPipe.Implementation.DefaultBigPipeViewMappingRepository.configurationManager">
            <summary>
            Configuration manager.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.BigPipe.Implementation.DefaultBigPipeViewMappingRepository.GetNewViewName(System.String,System.String)">
            <summary>
            Get new view name.
            </summary>
            <param name="controllerName">Controller name.</param>
            <param name="viewName">View name.</param>
            <returns>New view name.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.Common.ECBaseViewModel">
            <summary>
            EC base view model.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Common.ECBaseViewModel.Title">
            <summary>
            Gets or sets title.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Common.ECBaseViewModel.Links">
            <summary>
            Gets or sets links.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Common.ECBaseViewModel.Metas">
            <summary>
            Gets or sets metas.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.Pagelet.Implementation.DefaultMvcPageletsConfigRepository">
            <summary>
            Default mvc pagelets config repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Mvc.Pagelet.Implementation.DefaultMvcPageletsConfigRepository.configurationManager">
            <summary>
            Configuration manager.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Pagelet.Implementation.DefaultMvcPageletsConfigRepository.GetSetting(System.String,System.String)">
            <summary>
            Get mvc pagelet setting.
            </summary>
            <param name="controllerName">Controller name.</param>
            <param name="pageletTypeName">Pagelet type name. (AssemblyQualifiedName).</param>
            <returns>Pagelet setting.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.Pagelet.Implementation.MvcPageletsConfig">
            <summary>
            Mvc pagelets config.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Pagelet.Implementation.MvcPageletsConfig.Pagelets">
            <summary>
            Gets or sets mvc pagelet setting collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.Pagelet.Implementation.MvcPageletSettingCollection">
            <summary>
            Mvc pagelet setting collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Pagelet.Implementation.MvcPageletSettingCollection.Collection">
            <summary>
            Gets or sets mvc pagelet setting collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.Pagelet.Implementation.MvcPageletSettingUnit">
            <summary>
            Mvc pagelet setting.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Pagelet.Implementation.MvcPageletSettingUnit.ControllerName">
            <summary>
            Gets or sets controller name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Pagelet.Implementation.MvcPageletSettingUnit.PageletTypeName">
            <summary>
            Gets or sets pagelet type.(AssemblyQualifiedName).
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Pagelet.Implementation.MvcPageletSettingUnit.RenderIndependently">
            <summary>
            Gets or sets a value indicating whether this pagelet render independently.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.Pagelet.IMvcPagelet">
            <summary>
            Mvc pagelet interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Pagelet.IMvcPagelet.RenderIndependently">
            <summary>
            Gets a value indicating whether pagelet render independently.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Pagelet.IMvcPagelet.HasExcuted">
            <summary>
            Gets a value indicating whether pagelet render has excuted.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Pagelet.IMvcPagelet.GetAnchor">
            <summary>
            Get pagelet anchor.
            </summary>
            <returns>Pagelet anchor.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Pagelet.IMvcPagelet.GenerateContentAsync">
            <summary>
            Generate ec mvc pagelet content async.
            </summary>
            <returns>Task that generate context.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Pagelet.IMvcPagelet.GetMarkup">
            <summary>
            Get pagelet markup.
            </summary>
            <returns>Some kind of markup.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.Pagelet.IMvcPageletsConfigRepository">
            <summary>
            Mvc pagelets config repository interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Pagelet.IMvcPageletsConfigRepository.GetSetting(System.String,System.String)">
            <summary>
            Get mvc pagelet setting.
            </summary>
            <param name="controllerName">Controller name.</param>
            <param name="pageletTypeName">Pagelet type name. (AssemblyQualifiedName).</param>
            <returns>Pagelet setting.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.Pagelet.IMvcPageletSettingUnit">
            <summary>
            Mvc pagelet setting unit interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Pagelet.IMvcPageletSettingUnit.ControllerName">
            <summary>
            Gets controller name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Pagelet.IMvcPageletSettingUnit.PageletTypeName">
            <summary>
            Gets pagelet type.(AssemblyQualifiedName).
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Pagelet.IMvcPageletSettingUnit.RenderIndependently">
            <summary>
            Gets a value indicating whether this pagelet render independently.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.Routes.Implementation.DefaultRegisteredRoutesRepository">
            <summary>
            Default implement of registered routes repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Mvc.Routes.Implementation.DefaultRegisteredRoutesRepository.myRoutesData">
            <summary>
            Field of routes data.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Routes.Implementation.DefaultRegisteredRoutesRepository.Get">
            <summary>
            Get all registered routes.
            </summary>
            <returns>All registerd routes.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Routes.Implementation.DefaultRegisteredRoutesRepository.Contains(System.String)">
            <summary>
            Check whether requested route has been registered.
            </summary>
            <param name="routeName">Request route name.</param>
            <returns>A value indicating requested route has been registerd.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Routes.Implementation.DefaultRegisteredRoutesRepository.Add(Ctrip.Duckbill.Web.Mvc.Routes.IRouteUnit)">
            <summary>
            Add a registerd route.
            </summary>
            <param name="route">Route information.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Routes.Implementation.DefaultRegisteredRoutesRepository.GetKey(System.String)">
            <summary>
            Get routes data key.
            </summary>
            <param name="routeName">Route name.</param>
            <returns>Routes data key.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.Routes.Implementation.DefaultRoutesConfigRepository">
            <summary>
            Default implement of route config repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Mvc.Routes.Implementation.DefaultRoutesConfigRepository.myConfigurationManager">
            <summary>
            Configuration manager.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Routes.Implementation.DefaultRoutesConfigRepository.GetRoutes">
            <summary>
            Gets routes collection.
            </summary>
            <returns>Routes collection.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.Routes.Implementation.RouteDataTakenKeys">
            <summary>
            Framework-defined data taken keys.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Mvc.Routes.Implementation.RouteDataTakenKeys.RouteName">
            <summary>
            Route name key.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Mvc.Routes.Implementation.RouteDataTakenKeys.Alias">
            <summary>
            Route alias key.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.Routes.Implementation.RouteDataValueKeys">
            <summary>
            Framework-defined route data value keys.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Mvc.Routes.Implementation.RouteDataValueKeys.ControllerName">
            <summary>
            Controller name key.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Mvc.Routes.Implementation.RouteDataValueKeys.ActionName">
            <summary>
            Action name key.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.Routes.Implementation.RoutesConfig">
            <summary>
            Asp.net form compatible route config.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Routes.Implementation.RoutesConfig.RoutesCollection">
            <summary>
            Gets or sets route setting collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.Routes.Implementation.RouteUnit">
            <summary>
            Asp.net compatible route setting unit.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Routes.Implementation.RouteUnit.Name">
            <summary>
            Gets or sets the name of the route to map.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Routes.Implementation.RouteUnit.URL">
            <summary>
            Gets or sets the URL pattern for the route.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Routes.Implementation.RouteUnit.DefaultControllerName">
            <summary>
            Gets or sets the URL pattern for the default controller.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Routes.Implementation.RouteUnit.DefaultActionName">
            <summary>
            Gets or sets the URL pattern for the default action.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Routes.Implementation.RouteUnit.DefaultParametersConfig">
            <summary>
            Gets or sets default parameters for the route.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Routes.Implementation.RouteUnit.ConstraintsConfig">
            <summary>
            Gets or sets constraints values for the route.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Routes.Implementation.RouteUnit.DefaultParameters">
            <summary>
            Gets default parameters for the route.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Routes.Implementation.RouteUnit.Constraints">
            <summary>
            Gets constraints values for the route.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.Routes.IRegisteredRoutesRepository">
            <summary>
            Registered routes repository interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Routes.IRegisteredRoutesRepository.Get">
            <summary>
            Get all registered routes.
            </summary>
            <returns>All registerd routes.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Routes.IRegisteredRoutesRepository.Contains(System.String)">
            <summary>
            Check whether requested route has been registered.
            </summary>
            <param name="routeName">Request route name.</param>
            <returns>A value indicating requested route has been registerd.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Routes.IRegisteredRoutesRepository.Add(Ctrip.Duckbill.Web.Mvc.Routes.IRouteUnit)">
            <summary>
            Add a registerd route.
            </summary>
            <param name="route">Route information.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.Routes.IRoutesConfigRepository">
            <summary>
            Route config repository interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Routes.IRoutesConfigRepository.GetRoutes">
            <summary>
            Gets routes collection.
            </summary>
            <returns>Routes collection.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.Routes.IRouteUnit">
            <summary>
            Route unit interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Routes.IRouteUnit.Name">
            <summary>
            Gets the name of the route to map.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Routes.IRouteUnit.URL">
            <summary>
            Gets the URL pattern for the route.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Routes.IRouteUnit.DefaultControllerName">
            <summary>
            Gets the URL pattern for the default controller.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Routes.IRouteUnit.DefaultActionName">
            <summary>
            Gets the URL pattern for the default action.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Routes.IRouteUnit.DefaultParameters">
            <summary>
            Gets default parameters for the route.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Mvc.Routes.IRouteUnit.Constraints">
            <summary>
            Gets constraints values for the route.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Mvc.Routes.RouteExtensions">
            <summary>
            Include route data extesion methods.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Routes.RouteExtensions.GetRouteName(System.Web.Routing.RouteData)">
            <summary>
            Get route name.
            </summary>
            <param name="me">Current route data.</param>
            <returns>Route name.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Routes.RouteExtensions.GetControllerName(System.Web.Routing.RouteData)">
            <summary>
            Get controller name.
            </summary>
            <param name="me">Current route data.</param>
            <returns>Controller name.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Routes.RouteExtensions.GetActionName(System.Web.Routing.RouteData)">
            <summary>
            Get action name.
            </summary>
            <param name="me">Current route data.</param>
            <returns>Action name.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Routes.RouteExtensions.SetAlias(System.Web.Routing.RouteData,Ctrip.Duckbill.Web.Mvc.Alias.IRouteAliasUnit)">
            <summary>
            Set alias.
            </summary>
            <param name="me">Current route date.</param>
            <param name="alias">Alias instance.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Routes.RouteExtensions.GetAlias(System.Web.Routing.RouteData)">
            <summary>
            Get alias.
            </summary>
            <param name="me">Current route data.</param>
            <returns>Alias instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Routes.RouteExtensions.SetRouteName(System.Web.Routing.Route,System.String)">
            <summary>
            Set route name.
            </summary>
            <param name="me">Current route.</param>
            <param name="routeName">Parameter of route name.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Mvc.Routes.RouteExtensions.GetName(System.Web.Routing.Route)">
            <summary>
            Get route name.
            </summary>
            <param name="me">Current route.</param>
            <returns>Route name.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Routing.Extensions.RouteExtensions">
            <summary>
            Include route data extension methods.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Routing.Extensions.RouteExtensions.GetRouteName(System.Web.Routing.RouteData)">
            <summary>
            Get route name.
            </summary>
            <param name="me">Current route data.</param>
            <returns>Route name.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Routing.Extensions.RouteExtensions.GetControllerName(System.Web.Routing.RouteData)">
            <summary>
            Get controller name.
            </summary>
            <param name="me">Current route data.</param>
            <returns>Controller name.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Routing.Extensions.RouteExtensions.GetActionName(System.Web.Routing.RouteData)">
            <summary>
            Get action name.
            </summary>
            <param name="me">Current route data.</param>
            <returns>Action name.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Routing.Extensions.RouteExtensions.SetRouteName(System.Web.Routing.Route,System.String)">
            <summary>
            Set route name.
            </summary>
            <param name="me">Current route.</param>
            <param name="routeName">Parameter of route name.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Routing.Extensions.RouteExtensions.GetName(System.Web.Routing.Route)">
            <summary>
            Get route name.
            </summary>
            <param name="me">Current route.</param>
            <returns>Route name.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Routing.Implementation.DefaultRegisteredRoutesRepository">
            <summary>
            Default implement of registered routes repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Routing.Implementation.DefaultRegisteredRoutesRepository.myRoutesData">
            <summary>
            Field of routes data.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Routing.Implementation.DefaultRegisteredRoutesRepository.Get">
            <summary>
            Get all registered routes.
            </summary>
            <returns>All registerd routes.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Routing.Implementation.DefaultRegisteredRoutesRepository.Contains(System.String)">
            <summary>
            Check whether requested route has been registered.
            </summary>
            <param name="routeName">Request route name.</param>
            <returns>A value indicating requested route has been registerd.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Routing.Implementation.DefaultRegisteredRoutesRepository.Add(Ctrip.Duckbill.Web.Routing.IRouteUnit)">
            <summary>
            Add a registerd route.
            </summary>
            <param name="route">Route information.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Routing.Implementation.DefaultRegisteredRoutesRepository.GetKey(System.String)">
            <summary>
            Get routes data key.
            </summary>
            <param name="routeName">Route name.</param>
            <returns>Routes data key.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Routing.Implementation.RouteDataTakenKeys">
            <summary>
            Framework-defined data taken keys.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Routing.Implementation.RouteDataTakenKeys.RouteName">
            <summary>
            Route name key.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Routing.Implementation.RouteDataValueKeys">
            <summary>
            Framework-defined route data value keys.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Routing.Implementation.RouteDataValueKeys.ControllerName">
            <summary>
            Controller name key.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Routing.Implementation.RouteDataValueKeys.ActionName">
            <summary>
            Action name key.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Routing.Implementation.RoutesConfig">
            <summary>
            Asp.net form compatible route config.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Routing.Implementation.RoutesConfig.RoutesCollection">
            <summary>
            Gets or sets route setting collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Routing.Implementation.RoutesConfigRepository">
            <summary>
            Default implement of route config repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Routing.Implementation.RoutesConfigRepository.configurationAccessor">
            <summary>
            Configuration manager.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Routing.Implementation.RoutesConfigRepository.#ctor(Ctrip.Duckbill.Configuration.IConfigurationAccessor)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Web.Routing.Implementation.RoutesConfigRepository"/> class.
            </summary>
            <param name="configurationAccessor">The configuration accessor.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Routing.Implementation.RoutesConfigRepository.GetRoutes">
            <summary>
            Gets routes collection.
            </summary>
            <returns>Routes collection.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Routing.Implementation.RouteUnit">
            <summary>
            Asp.net compatible route setting unit.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Routing.Implementation.RouteUnit.Name">
            <summary>
            Gets or sets the name of the route to map.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Routing.Implementation.RouteUnit.URL">
            <summary>
            Gets or sets the URL pattern for the route.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Routing.Implementation.RouteUnit.DefaultControllerName">
            <summary>
            Gets or sets the URL pattern for the default controller.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Routing.Implementation.RouteUnit.DefaultActionName">
            <summary>
            Gets or sets the URL pattern for the default action.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Routing.Implementation.RouteUnit.DefaultParametersConfig">
            <summary>
            Gets or sets default parameters for the route.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Routing.Implementation.RouteUnit.ConstraintsConfig">
            <summary>
            Gets or sets constraints values for the route.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Routing.Implementation.RouteUnit.DefaultParameters">
            <summary>
            Gets default parameters for the route.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Routing.Implementation.RouteUnit.Constraints">
            <summary>
            Gets constraints values for the route.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Routing.IRegisteredRoutesRepository">
            <summary>
            Registered routes repository interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Routing.IRegisteredRoutesRepository.Get">
            <summary>
            Get all registered routes.
            </summary>
            <returns>All register routes.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Routing.IRegisteredRoutesRepository.Contains(System.String)">
            <summary>
            Check whether requested route has been registered.
            </summary>
            <param name="routeName">Request route name.</param>
            <returns>A value indicating requested route has been registered.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Routing.IRegisteredRoutesRepository.Add(Ctrip.Duckbill.Web.Routing.IRouteUnit)">
            <summary>
            Add a registered route.
            </summary>
            <param name="route">Route information.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Routing.IRoutesConfigRepository">
            <summary>
            Route config repository interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Routing.IRoutesConfigRepository.GetRoutes">
            <summary>
            Gets routes collection.
            </summary>
            <returns>Routes collection.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Routing.IRouteUnit">
            <summary>
            Route unit interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Routing.IRouteUnit.Name">
            <summary>
            Gets the name of the route to map.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Routing.IRouteUnit.URL">
            <summary>
            Gets the URL pattern for the route.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Routing.IRouteUnit.DefaultControllerName">
            <summary>
            Gets the URL pattern for the default controller.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Routing.IRouteUnit.DefaultActionName">
            <summary>
            Gets the URL pattern for the default action.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Routing.IRouteUnit.DefaultParameters">
            <summary>
            Gets default parameters for the route.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Routing.IRouteUnit.Constraints">
            <summary>
            Gets constraints values for the route.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Script.Implementation.DefaultPathScriptRender">
            <summary>
            Default implement for IPathScriptRender.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Script.Implementation.DefaultPathScriptRender.myScriptsMappingRepository">
            <summary>
            Field of script mapping repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Script.Implementation.DefaultPathScriptRender.myScriptsRepository">
            <summary>
            Field of script repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Script.Implementation.DefaultPathScriptRender.myBuilder">
            <summary>
            Field of script builder.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.Implementation.DefaultPathScriptRender.RenderHeaderScript(System.String)">
            <summary>
            Render one or a group of script HTML tag on header.
            </summary>
            <param name="path">Requested path.</param>
            <returns>One or a group of script HTML tag.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.Implementation.DefaultPathScriptRender.RenderBottomScript(System.String)">
            <summary>
            Render one or a group of script HTML tag on bottom.
            </summary>
            <param name="path">Requested path.</param>
            <returns>One or a group of script HTML tag.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.Implementation.DefaultPathScriptRender.RenderHeaderSyncScript(System.String)">
            <summary>
            Render one or a group of sync script HTML tag on header.
            </summary>
            <param name="path">Requested path.</param>
            <returns>One or a group of script HTML tag.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.Implementation.DefaultPathScriptRender.RenderHeaderAsyncScript(System.String)">
            <summary>
            Render one or a group of async script HTML tag on header.
            </summary>
            <param name="path">Requested path.</param>
            <returns>One or a group of script HTML tag.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.Implementation.DefaultPathScriptRender.RenderBottomSyncScript(System.String)">
            <summary>
            Render one or a group of sync script HTML tag on bottom.
            </summary>
            <param name="path">Requested path.</param>
            <returns>One or a group of script HTML tag.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.Implementation.DefaultPathScriptRender.RenderBottomAsyncScript(System.String)">
            <summary>
            Render one or a group of async script HTML tag on bottom.
            </summary>
            <param name="path">Requested path.</param>
            <returns>One or a group of script HTML tag.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.Implementation.DefaultPathScriptRender.GetHeaderSyncScripts(System.Collections.Generic.IEnumerable{Ctrip.Duckbill.Web.Script.IScriptSetting})">
            <summary>
            Get header synchronous script references.
            </summary>
            <param name="scripts">Script for special path.</param>
            <returns>One or a group of script reference.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.Implementation.DefaultPathScriptRender.GetHeaderAsyncScripts(System.Collections.Generic.IEnumerable{Ctrip.Duckbill.Web.Script.IScriptSetting})">
            <summary>
            Get header asynchronous script references.
            </summary>
            <param name="scripts">Script for special path.</param>
            <returns>One or a group of script reference.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.Implementation.DefaultPathScriptRender.GetBottomSyncScripts(System.Collections.Generic.IEnumerable{Ctrip.Duckbill.Web.Script.IScriptSetting})">
            <summary>
            Get bottom synchronous script references.
            </summary>
            <param name="scripts">Script for special path.</param>
            <returns>One or a group of script reference.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.Implementation.DefaultPathScriptRender.GetBottomAsyncScripts(System.Collections.Generic.IEnumerable{Ctrip.Duckbill.Web.Script.IScriptSetting})">
            <summary>
            Get bottom synchronous script references.
            </summary>
            <param name="scripts">Script for special path.</param>
            <returns>One or a group of script reference.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Script.Implementation.DefaultScriptHtmlBuilder">
            <summary>
            Default script html builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Script.Implementation.DefaultScriptHtmlBuilder.srcBuilder">
            <summary>
            Script src builder.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.Implementation.DefaultScriptHtmlBuilder.BuildSyncScript(Ctrip.Duckbill.Web.Script.IScriptUnit)">
            <summary>
            Build single synchronous script.
            </summary>
            <param name="script">A single script.</param>
            <returns>A script HTML tag.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.Implementation.DefaultScriptHtmlBuilder.BuildSyncScripts(System.Collections.Generic.IEnumerable{Ctrip.Duckbill.Web.Script.IScriptUnit})">
            <summary>
            Build multiple synchronous scripts.
            </summary>
            <param name="scripts">A group of script.</param>
            <returns>A group of script HTML tag.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.Implementation.DefaultScriptHtmlBuilder.BuildAsyncScript(Ctrip.Duckbill.Web.Script.IScriptUnit)">
            <summary>
            Build single asynchronous script.
            </summary>
            <param name="script">A single script.</param>
            <returns>A script HTML tag.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.Implementation.DefaultScriptHtmlBuilder.BuildAsyncScript(System.Collections.Generic.IEnumerable{Ctrip.Duckbill.Web.Script.IScriptUnit})">
            <summary>
            Build multiple asynchronous script.
            </summary>
            <param name="scripts">A group of script.</param>
            <returns>A group of script HTML tag.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.Implementation.DefaultScriptHtmlBuilder.GetSyncScriptHtml(Ctrip.Duckbill.Web.Script.IScriptUnit)">
            <summary>
            Generate synchronous scripts HTML tags.
            </summary>
            <param name="script">Script information.</param>
            <returns>HTML string.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.Implementation.DefaultScriptHtmlBuilder.GetAsyncScriptHtml(Ctrip.Duckbill.Web.Script.IScriptUnit)">
            <summary>
            Generate asynchronous scripts HTML tags.
            </summary>
            <param name="script">Script information.</param>
            <returns>One or a group of script reference HTML tag.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.Implementation.DefaultScriptHtmlBuilder.GetAsyncScriptHtml(Ctrip.Duckbill.Web.Script.Implementation.ScriptDependentTree)">
            <summary>
            Generate asynchronous scripts HTML tags.
            </summary>
            <param name="dependentTree">Script dependent tree.</param>
            <returns>One or a group of script reference HTML tag.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.Implementation.DefaultScriptHtmlBuilder.GenerateDependentTrees(System.Collections.Generic.IEnumerable{Ctrip.Duckbill.Web.Script.IScriptUnit})">
            <summary>
            Generate dependent trees.
            </summary>
            <param name="scrpitReferences">Script collection.</param>
            <returns>Script dependent tree collection.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.Implementation.DefaultScriptHtmlBuilder.SortTree(System.Collections.Generic.IEnumerable{Ctrip.Duckbill.Web.Script.Implementation.ScriptDependentTree},System.Collections.Generic.IDictionary{Ctrip.Duckbill.Web.Script.IScriptUnit,System.Int32})">
            <summary>
            Sort trees.
            </summary>
            <param name="trees">Script dependent trees.</param>
            <param name="originalOrders">Original script order.</param>
            <returns>Tree after sort.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.Implementation.DefaultScriptHtmlBuilder.AddDependentsToTree(System.Collections.Generic.List{Ctrip.Duckbill.Web.Script.IScriptUnit}@,Ctrip.Duckbill.Web.Script.Implementation.ScriptDependentTree)">
            <summary>
            Add dependents to tree.
            </summary>
            <param name="candidates">Script candidates.</param>
            <param name="tree">Current tree.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.Implementation.DefaultScriptHtmlBuilder.GetAttributeHTML(Ctrip.Duckbill.Web.Script.IScriptUnit)">
            <summary>
            Get attribute html.
            </summary>
            <param name="script">Script information.</param>
            <returns>HTML string.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Script.Implementation.DefaultScriptSrcBuilder">
            <summary>
            Default script src builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Script.Implementation.DefaultScriptSrcBuilder.urlBuilder">
            <summary>
            Url builder.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.Implementation.DefaultScriptSrcBuilder.Script(System.String)">
            <summary>
            Build script application absolute path.
            </summary>
            <param name="scriptPath">The virtual path of the script.</param>
            <returns>The application absolute path of script.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.Implementation.DefaultScriptSrcBuilder.Script(System.String,System.String)">
            <summary>
            Build script application absolute path.
            </summary>
            <param name="host">Special host name.</param>
            <param name="scriptPath">The virtual path of the script.</param>
            <returns>The application absolute path of script.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Script.Implementation.DefaultScriptsRepository">
            <summary>
            Default implement of script repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Script.Implementation.DefaultScriptsRepository.configurationManager">
            <summary>
            Configuration manager.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.Implementation.DefaultScriptsRepository.GetScripts">
            <summary>
            Get all scripts.
            </summary>
            <returns>Script collection.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.Implementation.DefaultScriptsRepository.GetScript(System.String)">
            <summary>
            Get script by name.
            </summary>
            <param name="key">Script reference key.</param>
            <returns>Script instance.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Script.Implementation.InheritableScriptsMappingRepository">
            <summary>
            Default implement of script mapping repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Script.Implementation.InheritableScriptsMappingRepository.configurationManager">
            <summary>
            Configuration manager.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.Implementation.InheritableScriptsMappingRepository.GetScripts(System.String)">
            <summary>
            Get scripts for this path.
            </summary>
            <param name="path">Requested virtual path.</param>
            <returns>Scripts setting collection.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Script.Implementation.ScriptDependentTree">
            <summary>
            Script dependent tree.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.Implementation.ScriptDependentTree.#ctor(Ctrip.Duckbill.Web.Script.IScriptUnit)">
            <summary>
            Initializes a new instance of the ScriptDependentTree class.
            </summary>
            <param name="script">Paramete of script.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.Implementation.ScriptDependentTree.#ctor(System.Collections.Generic.IEnumerable{Ctrip.Duckbill.Web.Script.IScriptUnit})">
            <summary>
            Initializes a new instance of the ScriptDependentTree class.
            </summary>
            <param name="scripts">Paramete of script collection.</param>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Script.Implementation.ScriptDependentTree.Scripts">
            <summary>
            Gets current script.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Script.Implementation.ScriptDependentTree.DependentScripts">
            <summary>
            Gets or sets dependent scripts.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.Implementation.ScriptDependentTree.Sort(System.Collections.Generic.IDictionary{Ctrip.Duckbill.Web.Script.IScriptUnit,System.Int32})">
            <summary>
            Sort scripts by originial orders.
            </summary>
            <param name="originalOrders">Original orders.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Script.Implementation.ScriptMappingUnit">
            <summary>
            Mapping script reference to virtual path.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Script.Implementation.ScriptMappingUnit.VirtualPath">
            <summary>
            Gets or sets virtual path.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Script.Implementation.ScriptMappingUnit.ScriptCollection">
            <summary>
            Gets or sets js reference collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Script.Implementation.ScriptMappingUnitCollection">
            <summary>
            Script mapping unit collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Script.Implementation.ScriptMappingUnitCollection.Collection">
            <summary>
            Gets or sets paths mapping.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Script.Implementation.ScriptsConfig">
            <summary>
            Script reference config.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Script.Implementation.ScriptsConfig.Scripts">
            <summary>
            Gets or sets script collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Script.Implementation.ScriptSetting">
            <summary>
            Script setting for a special virtual path.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Script.Implementation.ScriptSetting.Key">
            <summary>
            Gets or sets js reference key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Script.Implementation.ScriptSetting.IsAtHeader">
            <summary>
            Gets or sets a value indicating whether js is located in header.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Script.Implementation.ScriptSetting.IsAsyncLoad">
            <summary>
            Gets or sets a value indicating whether js will be async loaded.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Script.Implementation.ScriptSetting.Ignore">
            <summary>
            Gets or sets a value indicating whether ignore this js.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Script.Implementation.ScriptsMappingConfig">
            <summary>
            Scripts mappting config.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Script.Implementation.ScriptsMappingConfig.Paths">
            <summary>
            Gets or sets paths mapping.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Script.Implementation.ScriptUnit">
            <summary>
            Script reference.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Script.Implementation.ScriptUnit.Key">
            <summary>
            Gets or sets script key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Script.Implementation.ScriptUnit.Depends">
            <summary>
            Gets or sets depends script keys, split by ",".
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Script.Implementation.ScriptUnit.HostName">
            <summary>
            Gets or sets host name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Script.Implementation.ScriptUnit.Src">
            <summary>
            Gets or sets script href.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Script.Implementation.ScriptUnit.Type">
            <summary>
            Gets or sets script type.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Script.Implementation.ScriptUnit.Browser">
            <summary>
            Gets or sets browser type.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Script.Implementation.ScriptUnit.IEVersion">
            <summary>
            Gets or sets IE version.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Script.Implementation.ScriptUnit.AttributesConfig">
            <summary>
            Gets or sets attributes.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Script.Implementation.ScriptUnit.Attributes">
            <summary>
            Gets attributes.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Script.Implementation.ScriptUnitCollection">
            <summary>
            Script unit collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Script.Implementation.ScriptUnitCollection.Collection">
            <summary>
            Gets or sets script collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Script.IPathScriptRender">
            <summary>
            A interface to render one or a group of script HTML tag.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.IPathScriptRender.RenderHeaderScript(System.String)">
            <summary>
            Render one or a group of script HTML tag on header.
            </summary>
            <param name="path">Requested path.</param>
            <returns>One or a group of script HTML tag.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.IPathScriptRender.RenderBottomScript(System.String)">
            <summary>
            Render one or a group of script HTML tag on bottom.
            </summary>
            <param name="path">Requested path.</param>
            <returns>One or a group of script HTML tag.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.IPathScriptRender.RenderHeaderSyncScript(System.String)">
            <summary>
            Render one or a group of sync script HTML tag on header.
            </summary>
            <param name="path">Requested path.</param>
            <returns>One or a group of script HTML tag.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.IPathScriptRender.RenderHeaderAsyncScript(System.String)">
            <summary>
            Render one or a group of async script HTML tag on header.
            </summary>
            <param name="path">Requested path.</param>
            <returns>One or a group of script HTML tag.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.IPathScriptRender.RenderBottomSyncScript(System.String)">
            <summary>
            Render one or a group of sync script HTML tag on bottom.
            </summary>
            <param name="path">Requested path.</param>
            <returns>One or a group of script HTML tag.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.IPathScriptRender.RenderBottomAsyncScript(System.String)">
            <summary>
            Render one or a group of async script HTML tag on bottom.
            </summary>
            <param name="path">Requested path.</param>
            <returns>One or a group of script HTML tag.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Script.IScriptHtmlBuilder">
            <summary>
            Script html builder.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.IScriptHtmlBuilder.BuildSyncScript(Ctrip.Duckbill.Web.Script.IScriptUnit)">
            <summary>
            Build single synchronous script.
            </summary>
            <param name="script">A single script.</param>
            <returns>A script HTML tag.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.IScriptHtmlBuilder.BuildSyncScripts(System.Collections.Generic.IEnumerable{Ctrip.Duckbill.Web.Script.IScriptUnit})">
            <summary>
            Build multiple synchronous scripts.
            </summary>
            <param name="scripts">A group of script.</param>
            <returns>A group of script HTML tag.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.IScriptHtmlBuilder.BuildAsyncScript(Ctrip.Duckbill.Web.Script.IScriptUnit)">
            <summary>
            Build single asynchronous script.
            </summary>
            <param name="script">A single script.</param>
            <returns>A script HTML tag.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.IScriptHtmlBuilder.BuildAsyncScript(System.Collections.Generic.IEnumerable{Ctrip.Duckbill.Web.Script.IScriptUnit})">
            <summary>
            Build multiple asynchronous script.
            </summary>
            <param name="scripts">A group of script.</param>
            <returns>A group of script HTML tag.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Script.IScriptSetting">
            <summary>
            Script setting interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Script.IScriptSetting.Key">
            <summary>
            Gets js reference key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Script.IScriptSetting.IsAtHeader">
            <summary>
            Gets a value indicating whether js is located in header.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Script.IScriptSetting.IsAsyncLoad">
            <summary>
            Gets a value indicating whether js will be async loaded.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Script.IScriptSetting.Ignore">
            <summary>
            Gets a value indicating whether ignore this js.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Script.IScriptsMappingRepository">
            <summary>
            Scripts mapping repository interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.IScriptsMappingRepository.GetScripts(System.String)">
            <summary>
            Get scripts for this path.
            </summary>
            <param name="path">Requested virtual path.</param>
            <returns>Scripts setting collection.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Script.IScriptSrcBuilder">
            <summary>
            Script src builder interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.IScriptSrcBuilder.Script(System.String)">
            <summary>
            Build script application absolute path.
            </summary>
            <param name="scriptPath">The virtual path of the script.</param>
            <returns>The application absolute path of script.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.IScriptSrcBuilder.Script(System.String,System.String)">
            <summary>
            Build script application absolute path.
            </summary>
            <param name="host">Special host name.</param>
            <param name="scriptPath">The virtual path of the script.</param>
            <returns>The application absolute path of script.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Script.IScriptsRepository">
            <summary>
            Scripts repository interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.IScriptsRepository.GetScripts">
            <summary>
            Get all scripts.
            </summary>
            <returns>Script collection.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Script.IScriptsRepository.GetScript(System.String)">
            <summary>
            Get script by name.
            </summary>
            <param name="key">Script reference key.</param>
            <returns>Script instance.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Script.IScriptUnit">
            <summary>
            Script unit interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Script.IScriptUnit.Key">
            <summary>
            Gets script key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Script.IScriptUnit.Depends">
            <summary>
            Gets depends script keys, split by ",".
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Script.IScriptUnit.HostName">
            <summary>
            Gets host name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Script.IScriptUnit.Src">
            <summary>
            Gets script href.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Script.IScriptUnit.Type">
            <summary>
            Gets script type.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Script.IScriptUnit.Browser">
            <summary>
            Gets browser type.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Script.IScriptUnit.IEVersion">
            <summary>
            Gets IE version.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Script.IScriptUnit.Attributes">
            <summary>
            Gets attributes.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Services.Implementation.ConfigedWebserivce">
            <summary>
            Configed webservice.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Services.Implementation.ConfigedWebserivce.configuration">
            <summary>
            Service cofiguration.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Services.Implementation.ConfigedWebserivce.proxyType">
            <summary>
            My proxy type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Services.Implementation.ConfigedWebserivce.methods">
            <summary>
            Service methods.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Services.Implementation.ConfigedWebserivce.hostRepository">
            <summary>
            Host repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Services.Implementation.ConfigedWebserivce.random">
            <summary>
            Random interface.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Services.Implementation.ConfigedWebserivce.locator">
            <summary>
            Services locator.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Services.Implementation.ConfigedWebserivce.#ctor(Ctrip.Duckbill.Web.Services.IWebserviceConfigUnit,System.Type,Ctrip.Duckbill.Net.Host.IHostRepository,Ctrip.Duckbill.IRandom,Ctrip.Duckbill.IOC.IServicesLocator)">
            <summary>
            Initializes a new instance of the ConfigedWebserivce class.
            </summary>
            <param name="serviceconfig">Service cofniguration.</param>
            <param name="proxyType">Proxy type.</param>
            <param name="hostRepository">Host repository.</param>
            <param name="random">Random interface.</param>
            <param name="locator">Service locator.</param>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Services.Implementation.ConfigedWebserivce.Name">
            <summary>
            Gets service name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Services.Implementation.ConfigedWebserivce.Urls">
            <summary>
            Gets hosts.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Services.Implementation.ConfigedWebserivce.IsRandomSelectHost">
            <summary>
            Gets a value indicating whether is random select host.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Services.Implementation.ConfigedWebserivce.Timeout">
            <summary>
            Gets time out.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Services.Implementation.ConfigedWebserivce.Invoke(System.String,System.Object[])">
            <summary>
            Inovke mothode.
            </summary>
            <param name="methodName">Method name.</param>
            <param name="parameters">Parameters list.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Services.Implementation.ConfigedWebserivce.Invoke``1(System.String,System.Object[])">
            <summary>
            Inovke mothode.
            </summary>
            <typeparam name="TResponse">Response type.</typeparam>
            <param name="methodName">Method name.</param>
            <param name="parameters">Parameters list.</param>
            <returns>Service response.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Services.Implementation.ConfigedWebserivce.CreateServiceProxyInstance">
            <summary>
            Crate service proxy instance.
            </summary>
            <returns>Service proxy instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Services.Implementation.ConfigedWebserivce.SequenceInvokeMethod(System.Reflection.MethodInfo,System.Web.Services.Protocols.SoapHttpClientProtocol,System.Object[])">
            <summary>
            Sequence invoke method.
            </summary>
            <param name="method">Method information.</param>
            <param name="service">Service proxy instance.</param>
            <param name="parameters">Parameters list.</param>
            <returns>Invoke result.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Services.Implementation.ConfigedWebserivce.RandomInvokeMethod(System.Reflection.MethodInfo,System.Web.Services.Protocols.SoapHttpClientProtocol,System.Object[])">
            <summary>
            Random invoke method.
            </summary>
            <param name="method">Method information.</param>
            <param name="service">Service proxy instance.</param>
            <param name="parameters">Parameters list.</param>
            <returns>Invoke result.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Services.Implementation.Configuration.HostCollection">
            <summary>
            Host collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Services.Implementation.Configuration.HostCollection.IsRandom">
            <summary>
            Gets or sets a value indicating whether is random select host.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Services.Implementation.Configuration.HostCollection.Collection">
            <summary>
            Gets or sets host collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Services.Implementation.Configuration.WebservicesConfig">
            <summary>
            Webservices config.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Services.Implementation.Configuration.WebservicesConfig.DefaultTimeout">
            <summary>
            Gets or sets time out.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Services.Implementation.Configuration.WebservicesConfig.Services">
            <summary>
            Gets or sets serivces.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Services.Implementation.Configuration.WebservicesConfigRepository">
            <summary>
            Default web service config repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Services.Implementation.Configuration.WebservicesConfigRepository.configurationManager">
            <summary>
            Configuration manager.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Services.Implementation.Configuration.WebservicesConfigRepository.#ctor(Ctrip.Duckbill.Configuration.IConfigurationAccessor)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Web.Services.Implementation.Configuration.WebservicesConfigRepository"/> class.
            </summary>
            <param name="configurationManager">The configuration manager.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Services.Implementation.Configuration.WebservicesConfigRepository.GetWebserviceConfig(System.String)">
            <summary>
            Get webservice config.
            </summary>
            <param name="serviceName">Webservice name.</param>
            <returns>Webservice config unit.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Services.Implementation.Configuration.WebserviceUnit">
            <summary>
            Webservice unit.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Services.Implementation.Configuration.WebserviceUnit.Name">
            <summary>
            Gets or sets web service name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Services.Implementation.Configuration.WebserviceUnit.ProxyType">
            <summary>
            Gets or sets webservice proxy type.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Services.Implementation.Configuration.WebserviceUnit.HostsCollection">
            <summary>
            Gets or sets hosts.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Services.Implementation.Configuration.WebserviceUnit.Path">
            <summary>
            Gets or sets host path.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Services.Implementation.Configuration.WebserviceUnit.Timeout">
            <summary>
            Gets or sets time out.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Services.Implementation.Configuration.WebserviceUnit.Hosts">
            <summary>
            Gets hosts.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Services.Implementation.Configuration.WebserviceUnit.IsRandomSelectHost">
            <summary>
            Gets a value indicating whether is random select host.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Services.Implementation.Configuration.WebserviceUnitCollection">
            <summary>
            Webservice unit collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Services.Implementation.Configuration.WebserviceUnitCollection.Collection">
            <summary>
            Gets or sets services collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Services.Implementation.DefaultSoapServiceProxyRepository">
            <summary>
            Default soap service proxy repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Services.Implementation.DefaultSoapServiceProxyRepository.soapservices">
            <summary>
            My soap services.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Services.Implementation.DefaultSoapServiceProxyRepository.GetServiceProxyType(System.String)">
            <summary>
            Get service proxy type.
            </summary>
            <param name="name">Service proxy type name.</param>
            <returns>Service proxy type.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Services.Implementation.DefaultSoapServiceProxyRepository.LoadSoapServices">
            <summary>
            Load soap services.
            </summary>
            <returns>Soap services dictionary.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Services.Implementation.DefaultSoapServiceProxyRepository.GetSoapProxyTypes(System.Reflection.Assembly)">
            <summary>
            Get soap proxy types.
            </summary>
            <param name="assembly">Assembly instance.</param>
            <returns>Type collection.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Services.Implementation.DefaultWebserviceRepository">
            <summary>
            Default webservice repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Services.Implementation.DefaultWebserviceRepository.configRepository">
            <summary>
            Configuration repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Services.Implementation.DefaultWebserviceRepository.soapProxyRepository">
            <summary>
            EC library container repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Services.Implementation.DefaultWebserviceRepository.hostRepository">
            <summary>
            Host repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Services.Implementation.DefaultWebserviceRepository.random">
            <summary>
            Random interface.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Services.Implementation.DefaultWebserviceRepository.locator">
            <summary>
            Services locator.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Services.Implementation.DefaultWebserviceRepository.webservices">
            <summary>
            My webservices.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Services.Implementation.DefaultWebserviceRepository.#ctor(Ctrip.Duckbill.Web.Services.IWebservicesConfigRepository,Ctrip.Duckbill.Web.Services.ISoapServiceProxyRepository,Ctrip.Duckbill.Net.Host.IHostRepository,Ctrip.Duckbill.IRandom,Ctrip.Duckbill.IOC.IServicesLocator)">
            <summary>
            Initializes a new instance of the DefaultWebserviceRepository class.
            </summary>
            <param name="configRepository">Configuration repository.</param>
            <param name="soapProxyRepository">Soap proxy repository.</param>
            <param name="hostRepository">Host repository.</param>
            <param name="random">Random interface.</param>
            <param name="locator">Service locator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Services.Implementation.DefaultWebserviceRepository.GetWebservice(System.String)">
            <summary>
            Get webservice.
            </summary>
            <param name="webserviceName">Webservice name.</param>
            <returns>Webservice instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Services.Implementation.DefaultWebserviceRepository.GenerateWebservice(System.String)">
            <summary>
            Generate webservice.
            </summary>
            <param name="webserviceName">Webservice name.</param>
            <returns>Webservice instance.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Services.ISoapServiceProxyRepository">
            <summary>
            Soap service proxy repository.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Services.ISoapServiceProxyRepository.GetServiceProxyType(System.String)">
            <summary>
            Get service proxy type.
            </summary>
            <param name="name">Service proxy type name.</param>
            <returns>Service proxy type.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Services.IWebservice">
            <summary>
            Webservice interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Services.IWebservice.Name">
            <summary>
            Gets service name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Services.IWebservice.Urls">
            <summary>
            Gets hosts.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Services.IWebservice.IsRandomSelectHost">
            <summary>
            Gets a value indicating whether is random select host.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Services.IWebservice.Timeout">
            <summary>
            Gets time out.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Services.IWebservice.Invoke(System.String,System.Object[])">
            <summary>
            Invoke method.
            </summary>
            <param name="methodName">Method name.</param>
            <param name="parameters">Parameters list.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Services.IWebservice.Invoke``1(System.String,System.Object[])">
            <summary>
            Invoke method.
            </summary>
            <typeparam name="TResponse">Response type.</typeparam>
            <param name="methodName">Method name.</param>
            <param name="parameters">Parameters list.</param>
            <returns>Service response.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Services.IWebserviceConfigUnit">
            <summary>
            Webservice config unit interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Services.IWebserviceConfigUnit.Name">
            <summary>
            Gets web service name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Services.IWebserviceConfigUnit.ProxyType">
            <summary>
            Gets webservice proxy type.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Services.IWebserviceConfigUnit.Hosts">
            <summary>
            Gets hosts.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Services.IWebserviceConfigUnit.IsRandomSelectHost">
            <summary>
            Gets a value indicating whether is random select host.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Services.IWebserviceConfigUnit.Path">
            <summary>
            Gets host path.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.Services.IWebserviceConfigUnit.Timeout">
            <summary>
            Gets time out.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Services.IWebserviceRepository">
            <summary>
            Webservice repository interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Services.IWebserviceRepository.GetWebservice(System.String)">
            <summary>
            Get webservice.
            </summary>
            <param name="webserviceName">Webservice name.</param>
            <returns>Webservice instance.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Services.IWebservicesConfigRepository">
            <summary>
            Webservice config repository interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Services.IWebservicesConfigRepository.GetWebserviceConfig(System.String)">
            <summary>
            Get webservice config.
            </summary>
            <param name="serviceName">Webservice name.</param>
            <returns>Webservice config unit.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Title.Implementation.DefaultTitleHtmlBuilder">
            <summary>
            Default implement of html builder.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Title.Implementation.DefaultTitleHtmlBuilder.BuilderTitle(System.String)">
            <summary>
            Builder title html string.
            </summary>
            <param name="title">Title content.</param>
            <returns>Title html string.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Title.ITitleHtmlBuilder">
            <summary>
            Title html builder.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Title.ITitleHtmlBuilder.BuilderTitle(System.String)">
            <summary>
            Builder title html string.
            </summary>
            <param name="title">Title content.</param>
            <returns>Title html string.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.UrlExtensions">
            <summary>
            Url extensions.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.UrlExtensions.IsCompleteUrl(System.String)">
            <summary>
            Check whether path is complete url.
            </summary>
            <param name="me">Current url.</param>
            <returns>Whether path is complete url.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.UrlExtensions.FormatUrl(System.String)">
            <summary>
            Format url.
            </summary>
            <param name="me">Current url.</param>
            <returns>Formated url.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.UrlExtensions.FormatUrl(System.String,System.Boolean)">
            <summary>
            Format url.
            </summary>
            <param name="me">Current url.</param>
            <param name="keepOriginalCase">If set to <c>true</c> [keep original case].</param>
            <returns>Formated url.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.UrlExtensions.FormatUrlSEO(System.String)">
            <summary>
            Format url seo.
            </summary>
            <param name="me">Url name.</param>
            <returns>Url seo.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Url.Implementation.DefaultUrlBuilder">
            <summary>
            Default implement of url builder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Url.Implementation.DefaultUrlBuilder.hostRepository">
            <summary>
            Host repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Url.Implementation.DefaultUrlBuilder.httpContextRepository">
            <summary>
            Http context repository.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Url.Implementation.DefaultUrlBuilder.Content(System.String)">
            <summary>
            Converts a virtual (relative) path to an application absolute path.
            </summary>
            <param name="contentPath">The virtual path of the content.</param>
            <returns>The application absolute path of image.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Url.Implementation.DefaultUrlBuilder.Content(System.String,System.String)">
            <summary>
            Converts a virtual (relative) path to an application absolute path.
            </summary>
            <param name="host">Special host name.</param>
            <param name="contentPath">The virtual path of the content.</param>
            <returns>The application absolute path of image.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Url.Implementation.PathHelpers">
            <summary>
            Path helpers.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Url.Implementation.PathHelpers.myUrlRewriterHelper">
            <summary>
            Url rewriter helper.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Url.Implementation.PathHelpers.GenerateClientUrl(System.Web.HttpContextBase,System.String)">
            <summary>
            Generate client url.
            </summary>
            <param name="httpContext">Http context.</param>
            <param name="contentPath">Content path who can accept an app-relative path or an absolute path for contentPath.</param>
            <returns>Client url.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Url.Implementation.PathHelpers.MakeAbsolute(System.String,System.String)">
            <summary>
            Make absolute path.
            </summary>
            <param name="basePath">Base path.</param>
            <param name="relativePath">Relative path.</param>
            <returns>Absolute path.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Url.Implementation.PathHelpers.MakeRelative(System.String,System.String)">
            <summary>
            Make relative path.
            </summary>
            <param name="fromPath">From path.</param>
            <param name="toPath">To path.</param>
            <returns>Relative path.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Url.Implementation.PathHelpers.ResetUrlRewriterHelper">
            <summary>
            Reset url rewriter helper.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Url.Implementation.PathHelpers.GenerateClientUrlInternal(System.Web.HttpContextBase,System.String)">
            <summary>
            Intenral generate client url.
            </summary>
            <param name="httpContext">Http context.</param>
            <param name="contentPath">Content path who can accept an app-relative path or an absolute path for contentPath.</param>
            <returns>Client url.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Url.Implementation.PathHelpers.StripQuery(System.String,System.String@)">
            <summary>
            Strip query.
            </summary>
            <param name="path">Full path.</param>
            <param name="query">Query string.</param>
            <returns>Path after strip query.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Url.Implementation.UrlRewriterHelper">
            <summary>
            Url rewriter helper. Copyright (c) Microsoft Corporation. All rights reserved.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Url.Implementation.UrlRewriterHelper.UrlWasRewrittenServerVar">
            <summary>
            Whether url was rewritten.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Url.Implementation.UrlRewriterHelper.UrlRewriterEnabledServerVar">
            <summary>
            Whether url rewriter enable.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Url.Implementation.UrlRewriterHelper.genlock">
            <summary>
            Gen lock.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Url.Implementation.UrlRewriterHelper.urlrewriterIsTurnedOnValue">
            <summary>
            Whether url rewriter is turned on.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.Url.Implementation.UrlRewriterHelper.urlrewriterIsTurnedOnCalculated">
            <summary>
            Whether url rewriter is turned on calculated.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Url.Implementation.UrlRewriterHelper.WasRequestRewritten(System.Web.HttpContextBase)">
            <summary>
            Check whether this request is rewritten.
            </summary>
            <param name="httpContext">Http context.</param>
            <returns>A value indicating whether this request is rewritten.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Url.Implementation.UrlRewriterHelper.WasThisRequestRewritten(System.Web.HttpContextBase)">
            <summary>
            Check whether this request is rewritten.
            </summary>
            <param name="httpContext">Http context.</param>
            <returns>A value indicating whether this request is rewritten.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Url.Implementation.UrlRewriterHelper.IsUrlRewriterTurnedOn(System.Web.HttpContextBase)">
            <summary>
            Check whether url rewriter is turned on.
            </summary>
            <param name="httpContext">Http context.</param>
            <returns>A value indicating whether url rewriter is turned on.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.Url.IUrlBuilder">
            <summary>
            Url builder interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Url.IUrlBuilder.Content(System.String)">
            <summary>
            Converts a virtual (relative) path to an application absolute path.
            </summary>
            <param name="contentPath">The virtual path of the content.</param>
            <returns>The application absolute path of image.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.Url.IUrlBuilder.Content(System.String,System.String)">
            <summary>
            Converts a virtual (relative) path to an application absolute path.
            </summary>
            <param name="host">Special host name.</param>
            <param name="contentPath">The virtual path of the content.</param>
            <returns>The application absolute path of image.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.WebApplication.BaseRequestBeginProcessor">
            <summary>
            Base request begin processor.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.WebApplication.BaseRequestBeginProcessor.Priority">
            <summary>
            Gets request begin processor priority.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.WebApplication.BaseRequestBeginProcessor.Process">
            <summary>
            Process the work when request begin. 
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.WebApplication.BaseRequestEndProcessor">
            <summary>
            Base request end processor.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.WebApplication.BaseRequestEndProcessor.Priority">
            <summary>
            Gets request end processor priority.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.WebApplication.BaseRequestEndProcessor.Process">
            <summary>
            Process the work when request end. 
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.WebApplication.BaseWebAppStartProcessor">
            <summary>
            Base web app start processor.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.WebApplication.BaseWebAppStartProcessor.Priority">
            <summary>
            Gets web application start processor priority.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.WebApplication.BaseWebAppStartProcessor.Process">
            <summary>
            Process the work when application start. 
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.WebApplication.Implement.DefaultWebAppManager">
            <summary>
            Default web app manager.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.WebApplication.Implement.DefaultWebAppManager.appStartProcessors">
            <summary>
            Web application starters.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.WebApplication.Implement.DefaultWebAppManager.requestBeginProcessors">
            <summary>
            Request begin processors.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.WebApplication.Implement.DefaultWebAppManager.requestEndProcessors">
            <summary>
            Request end processors.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.WebApplication.Implement.DefaultWebAppManager.currentAppdomain">
            <summary>
            Current appdomain.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.WebApplication.Implement.DefaultWebAppManager.assemblyTypeLoader">
            <summary>
            Assembly type loader.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Web.WebApplication.Implement.DefaultWebAppManager.activator">
            <summary>
            Object activator.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.WebApplication.Implement.DefaultWebAppManager.#ctor(Ctrip.Duckbill.ICurrentAppDomain,Ctrip.Duckbill.Reflection.IAssemblyTypeLoader,Ctrip.Duckbill.Reflection.IActivator)">
            <summary>
            Initializes a new instance of the DefaultWebAppManager class.
            </summary>
            <param name="currentAppdomain">Current app domain.</param>
            <param name="assemblyTypeLoader">Assembly type loader.</param>
            <param name="activator">Object activator.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Web.WebApplication.Implement.DefaultWebAppManager.Start">
            <summary>
            Do some work when application start. 
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.WebApplication.Implement.DefaultWebAppManager.BeginRequest">
            <summary>
            Do same work when request start. 
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.WebApplication.Implement.DefaultWebAppManager.EndRequest">
            <summary>
            Do same work when request end. 
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.WebApplication.Implement.DefaultWebAppManager.GetWebAppStartProcessor">
            <summary>
            Get web app starters.
            </summary>
            <returns>Web app starter collection.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.WebApplication.Implement.DefaultWebAppManager.IsWebAppStartProcessor(System.Type)">
            <summary>
            Is web app start processor.
            </summary>
            <param name="type">Type defined.</param>
            <returns>Whether is web app start processor.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.WebApplication.Implement.DefaultWebAppManager.GetRequestBeginProcessors">
            <summary>
            Get request begin processors.
            </summary>
            <returns>Request begin processor collection.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.WebApplication.Implement.DefaultWebAppManager.IsRequestBeginProcessor(System.Type)">
            <summary>
            Is request begin processor.
            </summary>
            <param name="type">Type defined.</param>
            <returns>Whether is request begin processor.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.WebApplication.Implement.DefaultWebAppManager.GetRequestEndProcessors">
            <summary>
            Get request end processors.
            </summary>
            <returns>Request end processor collection.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Web.WebApplication.Implement.DefaultWebAppManager.IsRequestEndProcessor(System.Type)">
            <summary>
            Is request end processor.
            </summary>
            <param name="type">Type defined.</param>
            <returns>Whether is request end processor.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Web.WebApplication.IRequestBeginProcessor">
            <summary>
            Request begin processor interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.WebApplication.IRequestBeginProcessor.Priority">
            <summary>
            Gets request begin processor priority.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.WebApplication.IRequestBeginProcessor.Process">
            <summary>
            Process the work when request begin. 
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.WebApplication.IRequestEndProcessor">
            <summary>
            Request end processor interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.WebApplication.IRequestEndProcessor.Priority">
            <summary>
            Gets request end processor priority.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.WebApplication.IRequestEndProcessor.Process">
            <summary>
            Process the work when request end. 
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.WebApplication.IWebAppManager">
            <summary>
            Web app manager interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.WebApplication.IWebAppManager.Start">
            <summary>
            Do some work when application start. 
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.WebApplication.IWebAppManager.BeginRequest">
            <summary>
            Do same work when request start. 
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.WebApplication.IWebAppManager.EndRequest">
            <summary>
            Do same work when request end. 
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.WebApplication.IWebAppStartProcessor">
            <summary>
            Web application start processor interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.WebApplication.IWebAppStartProcessor.Priority">
            <summary>
            Gets web application start processor priority.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Web.WebApplication.IWebAppStartProcessor.Process">
            <summary>
            Process the work when application start. 
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Web.IHttpPostedFile">
            <summary>
            Http posted file.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Web.IHttpPostedFile.ContentLength">
            <summary>
            Gets the size of an uploaded file, in bytes.
            </summary>
            <value>The file length, in bytes.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Web.IHttpPostedFile.ContentType">
            <summary>
            Gets the MIME content type of a file sent by a client.
            </summary>
            <value>The MIME content type of the uploaded file.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Web.IHttpPostedFile.FileName">
            <summary>
            Gets the fully qualified name of the file on the client.
            </summary>
            <value>The name of the client's file, including the directory path.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Web.IHttpPostedFile.InputStream">
            <summary>
            Gets a System.IO.Stream object that points to an uploaded file to prepare for reading the contents of the file.
            </summary>
            <value>The input stream.</value>
        </member>
        <member name="M:Ctrip.Duckbill.Web.IHttpPostedFile.SaveAs(System.String)">
            <summary>
            Saves the contents of an uploaded file.
            </summary>
            <param name="filename">The name of the saved file.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Others.ObjectEqualsMessage">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Others.ObjectEqualsMessage.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Others.ObjectEqualsMessage.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Others.ObjectEqualsMessage.BothNull">
            <summary>
              Looks up a localized string similar to I and target are both null..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Others.ObjectEqualsMessage.EnumNameIsNotEquals">
            <summary>
              Looks up a localized string similar to My enum name is &quot;{0}&quot;, but targets is &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Others.ObjectEqualsMessage.EnumValueIsNotEquals">
            <summary>
              Looks up a localized string similar to My enum value is {0}, but targets is {1}..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Others.ObjectEqualsMessage.ImCollection">
            <summary>
              Looks up a localized string similar to I am collection with item, but target is null..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Others.ObjectEqualsMessage.ImEmptyCollection">
            <summary>
              Looks up a localized string similar to I am empty collection and target is null..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Others.ObjectEqualsMessage.JustImNull">
            <summary>
              Looks up a localized string similar to I am null, but target is not null..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Others.ObjectEqualsMessage.JustTargetIsNull">
            <summary>
              Looks up a localized string similar to I am not null, but target is null..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Others.ObjectEqualsMessage.NA">
            <summary>
              Looks up a localized string similar to NA.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Others.ObjectEqualsMessage.NeitherNull">
            <summary>
              Looks up a localized string similar to I and target are neither null.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Others.ObjectEqualsMessage.NullFlag">
            <summary>
              Looks up a localized string similar to null[not string].
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Others.ObjectEqualsMessage.StringIsNotEquals">
            <summary>
              Looks up a localized string similar to I&apos;m &quot;{0}&quot;, but target is &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Others.ObjectEqualsMessage.TargetIsCollection">
            <summary>
              Looks up a localized string similar to I am null, but target is collection with item..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Others.ObjectEqualsMessage.TargetIsEmptyCollection">
            <summary>
              Looks up a localized string similar to I am null and target is empty collection..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Others.ObjectEqualsMessage.TimeSpanIsNotEquals">
            <summary>
              Looks up a localized string similar to My ticks is {0}, but targets is {1}..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Others.ObjectEqualsMessage.TypeIsEquals">
            <summary>
              Looks up a localized string similar to My type is equal to target&apos;s type..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Others.ObjectEqualsMessage.TypeIsNotEquals">
            <summary>
              Looks up a localized string similar to My type is {0}, but target type is {1}..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Others.ObjectEqualsMessage.ValueIsEquals">
            <summary>
              Looks up a localized string similar to I&apos;m equals to target..
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Others.ObjectEqualsMessage.ValueIsNotEquals">
            <summary>
              Looks up a localized string similar to I&apos;m {0}, but target is {1}..
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Others.AssemblyExtenstions">
            <summary>
            Assembly extenstions.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Reflection.Extensions.ObjectReflectionExtensions">
            <summary>
            Object reflection extensions.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Reflection.Extensions.ObjectReflectionExtensions.GetProperties(System.Object)">
            <summary>
            Get properties.
            </summary>
            <param name="me">Current object.</param>
            <returns>Properties collection.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Reflection.Extensions.TypeEnumerableExtensions">
            <summary>
            Type enumerable extensions.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Reflection.Extensions.TypeEnumerableExtensions.IsEnumerable(System.Type)">
            <summary>
            Check whether current type is enumerable.
            </summary>
            <param name="me">Current type.</param>
            <returns>Whether current type is enumerable.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Reflection.Extensions.TypeEnumerableExtensions.IsListT(System.Type)">
            <summary>
            Check whether current type is a generic list.
            </summary>
            <param name="me">Current type.</param>
            <returns>Whether current type is a generic list.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Reflection.Extensions.TypeEnumerableExtensions.GetElementTypePlus(System.Type)">
            <summary>
            Get element type. Supprt array and list.
            </summary>
            <param name="type">Current type.</param>
            <returns>Element type.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Reflection.IActivator">
            <summary>
            Create types of objects.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Reflection.IActivator.CreateInstanceWithConstructorInjection(System.Type)">
            <summary>
            Create instance with constructor injection.
            </summary>
            <param name="type">Requested type.</param>
            <returns>Type instance.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Reflection.IAssemblyTypeLoader">
            <summary>
            Assembly type loader.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Reflection.IAssemblyTypeLoader.GetTypes(System.Reflection.Assembly)">
            <summary>
            Get all types from assemblies.
            </summary>
            <param name="assembly">Assembly instance.</param>
            <returns>Type collection.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Reflection.IAssemblyTypeLoader.GetTypes(System.Reflection.Assembly,System.String@)">
            <summary>
            Get all types from assemblies.
            </summary>
            <param name="assembly">Assembly instance.</param>
            <param name="message">Process message.</param>
            <returns>Type collection.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Reflection.IAssemblyTypeLoader.GetTypes(System.Reflection.Assembly,System.Func{System.Type,System.Boolean})">
            <summary>
            Get filted types from assemblies.
            </summary>
            <param name="assembly">Assembly instance.</param>
            <param name="filter">Filter function.</param>
            <returns>Type collection.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Reflection.IAssemblyTypeLoader.GetTypes(System.Reflection.Assembly,System.Func{System.Type,System.Boolean},System.String@)">
            <summary>
            Get filted types from assemblies.
            </summary>
            <param name="assembly">Assembly instance.</param>
            <param name="filter">Filter function.</param>
            <param name="message">Process message.</param>
            <returns>Type collection.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Reflection.IAssemblyUtility">
            <summary>
            Assembly utility interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Reflection.IAssemblyUtility.LoadReferenceAssemblyHandler(System.Object,System.ResolveEventArgs)">
            <summary>
            Load reference assembly handler.
            </summary>
            <param name="sender">Event sender.</param>
            <param name="args">Event args.</param>
            <returns>Loaded assembly.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Reflection.Implement.AssemblyUtility">
            <summary>
            Assembly utility functions.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Reflection.Implement.AssemblyUtility.staticAssembly">
            <summary>
            Static assembly interface.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Reflection.Implement.AssemblyUtility.staticPath">
            <summary>
            Static path interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Reflection.Implement.AssemblyUtility.#ctor(Ctrip.Duckbill.Reflection.IStaticAssembly,Ctrip.Duckbill.IO.IStaticPath)">
            <summary>
            Initializes a new instance of the AssemblyUtility class.
            </summary>
            <param name="staticAssembly">Static assembly interface.</param>
            <param name="staticPath">Static path interface.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Reflection.Implement.AssemblyUtility.LoadReferenceAssemblyHandler(System.Object,System.ResolveEventArgs)">
            <summary>
            Load reference assembly handler.
            </summary>
            <param name="sender">Event sender.</param>
            <param name="args">Event args.</param>
            <returns>Loaded assembly.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Reflection.Implement.DefaultActivator">
            <summary>
            Default activator.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Reflection.Implement.DefaultActivator.constructorParametersTypes">
            <summary>
            My registered services data.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Reflection.Implement.DefaultActivator.CreateInstanceWithConstructorInjection(System.Type)">
            <summary>
            Create instance with constructor injection.
            </summary>
            <param name="type">Requested type.</param>
            <returns>Type instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Reflection.Implement.DefaultActivator.GetServiceConstructorParametersTypes(System.Type)">
            <summary>
            Get service constructor parameters types.
            </summary>
            <param name="type">Requested type.</param>
            <returns>Constructor parameters types.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Reflection.Implement.DefaultActivator.GenerateServiceConstructorParametersTypes(System.Type)">
            <summary>
            Generate service constructor parameters types.
            </summary>
            <param name="type">Requested type.</param>
            <returns>Constructor parameters types.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Reflection.Implement.DefaultAssemblyTypeLoader">
            <summary>
            Default assembly type loader.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Reflection.Implement.DefaultAssemblyTypeLoader.GetTypes(System.Reflection.Assembly)">
            <summary>
            Get all types from assemblies.
            </summary>
            <param name="assembly">Assembly instance.</param>
            <returns>Type collection.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Reflection.Implement.DefaultAssemblyTypeLoader.GetTypes(System.Reflection.Assembly,System.String@)">
            <summary>
            Get all types from assemblies.
            </summary>
            <param name="assembly">Assembly instance.</param>
            <param name="message">Process message.</param>
            <returns>Type collection.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Reflection.Implement.DefaultAssemblyTypeLoader.GetTypes(System.Reflection.Assembly,System.Func{System.Type,System.Boolean})">
            <summary>
            Get filted types from assemblies.
            </summary>
            <param name="assembly">Assembly instance.</param>
            <param name="filter">Filter function.</param>
            <returns>Type collection.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Reflection.Implement.DefaultAssemblyTypeLoader.GetTypes(System.Reflection.Assembly,System.Func{System.Type,System.Boolean},System.String@)">
            <summary>
            Get filted types from assemblies.
            </summary>
            <param name="assembly">Assembly instance.</param>
            <param name="filter">Filter function.</param>
            <param name="message">Process message.</param>
            <returns>Type collection.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Reflection.Implement.StaticAssembly">
            <summary>
            Dotnet static assembly warp.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Reflection.Implement.StaticAssembly.LoadFile(System.String)">
            <summary>
            Loads the contents of an assembly file on the specified path.
            </summary>
            <param name="path">The path of the file to load.</param>
            <returns>The loaded assembly.</returns>
            <exception cref="T:System.ArgumentNullException">The path parameter is null.</exception>
            <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The path parameter is an empty string ("") or does not exist.</exception>
            <exception cref="T:System.BadImageFormatException">path is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and path was compiled with a later version.</exception>
        </member>
        <member name="T:Ctrip.Duckbill.Reflection.IStaticAssembly">
            <summary>
            Dotnet static assembly function interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Reflection.IStaticAssembly.LoadFile(System.String)">
            <summary>
            Loads the contents of an assembly file on the specified path.
            </summary>
            <param name="path">The path of the file to load.</param>
            <returns>The loaded assembly.</returns>
            <exception cref="T:System.ArgumentNullException">The path parameter is null.</exception>
            <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The path parameter is an empty string ("") or does not exist.</exception>
            <exception cref="T:System.BadImageFormatException">path is not a valid assembly. -or-Version 2.0 or later of the common language runtime is currently loaded and path was compiled with a later version.</exception>
        </member>
        <member name="T:Ctrip.Duckbill.Resource.DefaultResourceManager">
            <summary>
            Default implement of resource manager.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Resource.DefaultResourceManager.CacheKey">
            <summary>
            Resource cache key.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Resource.DefaultResourceManager.ResourceFolder">
            <summary>
            Resource folder.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Resource.DefaultResourceManager.cacheManager">
            <summary>
            Cache manager.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Resource.DefaultResourceManager.serializer">
            <summary>
            Original xml serializer.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Resource.DefaultResourceManager.keyMapping">
            <summary>
            Key mapping.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.DefaultResourceManager.GetString(System.String,System.String)">
            <summary>
            Get resource value string.
            </summary>
            <param name="fileName">Requested resource file name.</param>
            <param name="keyInFile">Requested resource key in file.</param>
            <returns>Resource value string.</returns>
            <remarks>It will use the thread current UI culture to find the resource.</remarks>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.DefaultResourceManager.GetString(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Get resource value string.
            </summary>
            <param name="fileName">Requested resource file name.</param>
            <param name="keyInFile">Requested resource key in file.</param>
            <param name="culture">Special culture.</param>
            <returns>Resource value string.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.DefaultResourceManager.Get(System.String,System.String)">
            <summary>
            Get resource by filename and key in file.
            </summary>
            <param name="fileName">Requested resource file name.</param>
            <param name="keyInFile">Requested resource key in file.</param>
            <returns>Resource item.</returns>
            <remarks>It will use the thread current UI culture to find the resource.</remarks>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.DefaultResourceManager.Get(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Get resource by filename, key in file and culture.
            </summary>
            <param name="fileName">Requested resource file name.</param>
            <param name="keyInFile">Requested resource key in file.</param>
            <param name="culture">Special culture.</param>
            <returns>Resource value string.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.DefaultResourceManager.GetByGroup(System.String)">
            <summary>
            Get resource items by group name.
            </summary>
            <param name="groupName">Requested group name.</param>
            <returns>A special group of resource items.</returns>
            <remarks>It will use the thread current UI culture to find the resource.</remarks>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.DefaultResourceManager.GetByGroup(System.String,System.Globalization.CultureInfo)">
            <summary>
            Get resource items by group name and culture.
            </summary>
            <param name="groupName">Requested group name.</param>
            <param name="culture">Special culture.</param>
            <returns>A special group of resource items.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.DefaultResourceManager.GetResourceKey(System.String,System.String,System.Globalization.CultureInfo,System.Collections.Concurrent.ConcurrentDictionary{System.String,Ctrip.Duckbill.Resource.IResourceItem})">
            <summary>
            Get resource key.
            </summary>
            <param name="fileName">Requested resource file name.</param>
            <param name="keyInFile">Requested resource key in file.</param>
            <param name="culture">Special culture.</param>
            <param name="resourceData">Resource data.</param>
            <returns>Resource key.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.DefaultResourceManager.GetResourceFinalKey(System.String,System.String,System.Globalization.CultureInfo,System.Collections.Concurrent.ConcurrentDictionary{System.String,Ctrip.Duckbill.Resource.IResourceItem})">
            <summary>
            Get resource final key.
            </summary>
            <param name="fileName">Requested resource file name.</param>
            <param name="keyInFile">Requested resource key in file.</param>
            <param name="culture">Special culture.</param>
            <param name="resourceData">Resource data.</param>
            <returns>Resource final key.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.DefaultResourceManager.GetResourceData">
            <summary>
            Get resource data.
            </summary>
            <returns>Resource data.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.DefaultResourceManager.GenerateResourceCacheItem">
            <summary>
            Generate resource cache item.
            </summary>
            <returns>Resource cache item.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.DefaultResourceManager.LoadResourcesData">
            <summary>
            Load resource data from files.
            </summary>
            <returns>Resource data.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.DefaultResourceManager.LoadResx(System.String)">
            <summary>
            Load data from resx file.
            </summary>
            <param name="file">File path.</param>
            <returns>Resx data.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Resource.Implement.Configuration.InheritableResourceJavascriptMappingRepository">
            <summary>
            Inheritable resource javascript mapping repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Resource.Implement.Configuration.InheritableResourceJavascriptMappingRepository.configurationAccessor">
            <summary>
            The configuration manager.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.Implement.Configuration.InheritableResourceJavascriptMappingRepository.#ctor(Ctrip.Duckbill.Configuration.IConfigurationAccessor)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Resource.Implement.Configuration.InheritableResourceJavascriptMappingRepository" /> class.
            </summary>
            <param name="configurationAccessor">The configuration accessor.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.Implement.Configuration.InheritableResourceJavascriptMappingRepository.GetResource(System.String)">
            <summary>
            Get javascript resource for this path.
            </summary>
            <param name="path">Requested virtual path.</param>
            <returns>Resource javascript setting collection.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Resource.Implement.Configuration.ResourceJavascriptMappingConfig">
            <summary>
            Resource javascript mapping config.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Resource.Implement.Configuration.ResourceJavascriptMappingConfig.Paths">
            <summary>
            Gets or sets resource javascript mapping unit collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Resource.Implement.Configuration.ResourceJavascriptMappingUnit">
            <summary>
            Resource javascript mapping unit.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Resource.Implement.Configuration.ResourceJavascriptMappingUnit.VirtualPath">
            <summary>
            Gets or sets virtual path.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Resource.Implement.Configuration.ResourceJavascriptMappingUnit.Collection">
            <summary>
            Gets or sets resource javascript setting collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Resource.Implement.Configuration.ResourceJavascriptMappingUnitCollection">
            <summary>
            Resource javascript mapping unit collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Resource.Implement.Configuration.ResourceJavascriptMappingUnitCollection.Collection">
            <summary>
            Gets or sets resource javascript path mapping collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Resource.Implement.Configuration.ResourceJavascriptSetting">
            <summary>
            Resource javascript setting.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Resource.Implement.Configuration.ResourceJavascriptSetting.Key">
            <summary>
            Gets or sets setting key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Resource.Implement.Configuration.ResourceJavascriptSetting.JavascriptFieldName">
            <summary>
            Gets or sets javascript field name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Resource.Implement.Configuration.ResourceJavascriptSetting.FileName">
            <summary>
            Gets or sets resource file name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Resource.Implement.Configuration.ResourceJavascriptSetting.KeyInFile">
            <summary>
            Gets or sets key in file.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Resource.Implement.Configuration.ResourceJavascriptSetting.Ignore">
            <summary>
            Gets or sets a value indicating whether ignore this meta.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Resource.Implement.PathResourceJavascriptRender">
            <summary>
            Default path resource javascript render.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Resource.Implement.PathResourceJavascriptRender.render">
            <summary>
            Resource javascript render.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Resource.Implement.PathResourceJavascriptRender.mappingRepository">
            <summary>
            Mapping repository.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.Implement.PathResourceJavascriptRender.#ctor(Ctrip.Duckbill.Resource.IResourceJavascriptRender,Ctrip.Duckbill.Resource.IResourceJavascriptMappingRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Resource.Implement.PathResourceJavascriptRender"/> class.
            </summary>
            <param name="render">The render.</param>
            <param name="mappingRepository">The mapping repository.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.Implement.PathResourceJavascriptRender.RenderHeaderResourceJavascript(System.String)">
            <summary>
            Render resource javascript on header.
            </summary>
            <param name="path">Requested path.</param>
            <returns>Resource javascript tag.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Resource.Implement.ResourceItem">
            <summary>
            Resource item.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.Implement.ResourceItem.#ctor(System.String,Ctrip.Duckbill.Resource.Implement.ResxDataUnit,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the ResourceItem class.
            </summary>
            <param name="fileName">Resource file name.</param>
            <param name="dataUnit">Resx data unit.</param>
            <param name="culture">Culture information.</param>
        </member>
        <member name="P:Ctrip.Duckbill.Resource.Implement.ResourceItem.FileName">
            <summary>
            Gets resource file name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Resource.Implement.ResourceItem.KeyInFile">
            <summary>
            Gets resource key in file.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Resource.Implement.ResourceItem.Value">
            <summary>
            Gets resource value.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Resource.Implement.ResourceItem.Culture">
            <summary>
            Gets the culture of this resource.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Resource.Implement.ResourceJavascriptRender">
            <summary>
            Default resource javascript render.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Resource.Implement.ResourceJavascriptRender.ResourceJavascriptFormat">
            <summary>
            Resource javascript format.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Resource.Implement.ResourceJavascriptRender.resourceRepository">
            <summary>
            Resource repository.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.Implement.ResourceJavascriptRender.#ctor(Ctrip.Duckbill.Resource.IResourceRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Resource.Implement.ResourceJavascriptRender" /> class.
            </summary>
            <param name="resourceRepository">The resource repository.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.Implement.ResourceJavascriptRender.RenderResource(Ctrip.Duckbill.Resource.IResourceJavascriptSetting)">
            <summary>
            Render single resource.
            </summary>
            <param name="resource">Resource javascript setting.</param>
            <returns>Javascript html string.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.Implement.ResourceJavascriptRender.RenderResource(System.Collections.Generic.IEnumerable{Ctrip.Duckbill.Resource.IResourceJavascriptSetting})">
            <summary>
            Render single resource.
            </summary>
            <param name="resource">Resource javascript setting collection.</param>
            <returns>Javascript html string.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.Implement.ResourceJavascriptRender.GenerateResourceJs(Ctrip.Duckbill.Resource.IResourceJavascriptSetting)">
            <summary>
            Generate resource js value.
            </summary>
            <param name="resource">Resource javascript setting.</param>
            <returns>Javascript html string.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Resource.Implement.ResourceRepository">
            <summary>
            Default implement of resource manager.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Resource.Implement.ResourceRepository.currentThread">
            <summary>
            The current thread.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Resource.Implement.ResourceRepository.staticFile">
            <summary>
            The static file.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Resource.Implement.ResourceRepository.staticDirectory">
            <summary>
            The static directory.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Resource.Implement.ResourceRepository.staticPath">
            <summary>
            The static path.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Resource.Implement.ResourceRepository.serializer">
            <summary>
            Original xml serializer.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Resource.Implement.ResourceRepository.regex">
            <summary>
            The regex.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Resource.Implement.ResourceRepository.resourcesCache">
            <summary>
            The resource cache.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Resource.Implement.ResourceRepository.cacheItemFactory">
            <summary>
            The cache item factory.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Resource.Implement.ResourceRepository.cultureRepository">
            <summary>
            The culture repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Resource.Implement.ResourceRepository.resourceFolder">
            <summary>
            The resource folder.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.Implement.ResourceRepository.#ctor(Ctrip.Duckbill.ICurrentAppDomain,Ctrip.Duckbill.Threading.ICurrentThread,Ctrip.Duckbill.IO.IStaticFile,Ctrip.Duckbill.IO.IStaticDirectory,Ctrip.Duckbill.IO.IStaticPath,Ctrip.Duckbill.Serialization.IOriginalXMLSerializer,Ctrip.Duckbill.IRegex,Ctrip.Duckbill.Cache.IMemoryCacheRepository,Ctrip.Duckbill.Cache.ICacheItemFactory,Ctrip.Duckbill.Globalization.ICultureRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Resource.Implement.ResourceRepository" /> class.
            </summary>
            <param name="currentAppDomain">The current application domain.</param>
            <param name="currentThread">The current thread.</param>
            <param name="staticFile">The static file.</param>
            <param name="staticDirectory">The static directory.</param>
            <param name="staticPath">The static path.</param>
            <param name="serializer">The serializer.</param>
            <param name="regex">The regex.</param>
            <param name="cacheRepository">The cache repository.</param>
            <param name="cacheItemFactory">The cache item factory.</param>
            <param name="cultureRepository">The culture repository.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.Implement.ResourceRepository.GetString(System.String,System.String)">
            <summary>
            Get resource value string.
            </summary>
            <param name="fileName">Requested resource file name.</param>
            <param name="keyInFile">Requested resource key in file.</param>
            <returns>Resource value string.</returns>
            <remarks>It will use the thread current UI culture to find the resource.</remarks>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.Implement.ResourceRepository.GetString(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Get resource value string.
            </summary>
            <param name="fileName">Requested resource file name.</param>
            <param name="keyInFile">Requested resource key in file.</param>
            <param name="culture">Special culture.</param>
            <returns>Resource value string.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.Implement.ResourceRepository.Get(System.String,System.String)">
            <summary>
            Get resource by filename and key in file.
            </summary>
            <param name="fileName">Requested resource file name.</param>
            <param name="keyInFile">Requested resource key in file.</param>
            <returns>Resource item.</returns>
            <remarks>It will use the thread current UI culture to find the resource.</remarks>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.Implement.ResourceRepository.Get(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Get resource by filename, key in file and culture.
            </summary>
            <param name="fileName">Requested resource file name.</param>
            <param name="keyInFile">Requested resource key in file.</param>
            <param name="culture">Special culture.</param>
            <returns>Resource value string.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.Implement.ResourceRepository.GetCompatibleResource(System.String,System.String,System.Globalization.CultureInfo,System.Collections.Concurrent.ConcurrentDictionary{System.String,Ctrip.Duckbill.Resource.IResourceItem})">
            <summary>
            Gets the compatible resource.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="keyInFile">The key information file.</param>
            <param name="culture">The culture.</param>
            <param name="resourceData">The resource data.</param>
            <returns>Resource item.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.Implement.ResourceRepository.GetResourceData">
            <summary>
            Get resource data.
            </summary>
            <returns>Resource data.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.Implement.ResourceRepository.LoadResourcesData">
            <summary>
            Load resource data from files.
            </summary>
            <returns>Resource data.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.Implement.ResourceRepository.LoadResx(System.String)">
            <summary>
            Load data from resx file.
            </summary>
            <param name="file">File path.</param>
            <returns>Resx data.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Resource.Implement.ResxCsCodeGenerator">
            <summary>
            Resx resource cs code generator.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Resource.Implement.ResxCsCodeGenerator.currentAppDomain">
            <summary>
            The current application domain.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Resource.Implement.ResxCsCodeGenerator.staticFile">
            <summary>
            The static file.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Resource.Implement.ResxCsCodeGenerator.staticDirectory">
            <summary>
            The static directory.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Resource.Implement.ResxCsCodeGenerator.staticPath">
            <summary>
            The static path.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Resource.Implement.ResxCsCodeGenerator.comparer">
            <summary>
            The comparer.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Resource.Implement.ResxCsCodeGenerator.serializer">
            <summary>
            Original xml serializer.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Resource.Implement.ResxCsCodeGenerator.options">
            <summary>
            Code generator options.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.Implement.ResxCsCodeGenerator.#ctor(Ctrip.Duckbill.ICurrentAppDomain,Ctrip.Duckbill.IO.IStaticFile,Ctrip.Duckbill.IO.IStaticDirectory,Ctrip.Duckbill.IO.IStaticPath,Ctrip.Duckbill.Resource.IResxFileIgnoreCultureComparer,Ctrip.Duckbill.Serialization.IOriginalXMLSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Resource.Implement.ResxCsCodeGenerator" /> class.
            </summary>
            <param name="currentAppDomain">The current application domain.</param>
            <param name="staticFile">The static file.</param>
            <param name="staticDirectory">The static directory.</param>
            <param name="staticPath">The static path.</param>
            <param name="comparer">The comparer.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.Implement.ResxCsCodeGenerator.GenerateCsFile(System.String,System.String)">
            <summary>
            Generate resource cs file.
            </summary>
            <param name="resourceFilePath">Resource file path.</param>
            <param name="nameSpace">Resource name space.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.Implement.ResxCsCodeGenerator.GenerateResourceAssembly(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Generate resource cs file.
            </summary>
            <param name="resourceFilePathCollection">Resource file path collection.</param>
            <param name="nameSpace">Resource name space.</param>
            <param name="assemblyPath">Resource assembly path.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.Implement.ResxCsCodeGenerator.GenerateResourceCSCode(System.String,System.String)">
            <summary>
            Generate resource cs code.
            </summary>
            <param name="resourceFilePath">Resource file path.</param>
            <param name="nameSpace">Resource name space.</param>
            <returns>Resource cs code compile unit.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.Implement.ResxCsCodeGenerator.GeneratePropertyCode(Ctrip.Duckbill.Resource.Implement.ResxDataUnit,System.String)">
            <summary>
            Generate property code.
            </summary>
            <param name="dataUnit">Resx data unit.</param>
            <param name="fileName">File name.</param>
            <returns>Property code.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.Implement.ResxCsCodeGenerator.GetCsFilePath(System.String)">
            <summary>
            Get cs file path by resource file path.
            </summary>
            <param name="resourceFilePath">Resource file path.</param>
            <returns>Cs file path.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.Implement.ResxCsCodeGenerator.LoadResx(System.String)">
            <summary>
            Load data from resx file.
            </summary>
            <param name="resxFile">File path.</param>
            <returns>Resx data.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Resource.Implement.ResxDatas">
            <summary>
            Resx data.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Resource.Implement.ResxDatas.Collection">
            <summary>
            Gets or sets data collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Resource.Implement.ResxDataUnit">
            <summary>
            Resx date unit.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Resource.Implement.ResxDataUnit.Name">
            <summary>
            Gets or sets name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Resource.Implement.ResxDataUnit.Value">
            <summary>
            Gets or sets value.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Resource.Implement.ResxFileIgnoreCultureComparer">
            <summary>
            Resx file compare. If multiple files are different in culture, they are same in this comparer.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Resource.Implement.ResxFileIgnoreCultureComparer.staticPath">
            <summary>
            The static path.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.Implement.ResxFileIgnoreCultureComparer.#ctor(Ctrip.Duckbill.IO.IStaticPath)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Resource.Implement.ResxFileIgnoreCultureComparer"/> class.
            </summary>
            <param name="staticPath">The static path.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.Implement.ResxFileIgnoreCultureComparer.Equals(System.String,System.String)">
            <summary>
            Determines whether the specified resx file path are equal.
            </summary>
            <param name="x">The first object of type T to compare.</param>
            <param name="y">The second object of type T to compare.</param>
            <returns>True if the specified objects are equal; otherwise, false.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.Implement.ResxFileIgnoreCultureComparer.GetHashCode(System.String)">
            <summary>
            Returns a hash code for string object.
            </summary>
            <param name="obj">The string for which a hash code is to be returned.</param>
            <returns>A hash code for the string object.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.Implement.ResxFileIgnoreCultureComparer.GetResxFilePathKey(System.String)">
            <summary>
            Get resx file path key.
            </summary>
            <param name="resxFilePath">Resx file path.</param>
            <returns>Resx file path key.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Resource.IPathResourceJavascriptRender">
            <summary>
            Path resource java script render interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.IPathResourceJavascriptRender.RenderHeaderResourceJavascript(System.String)">
            <summary>
            Render resource javascript on header.
            </summary>
            <param name="path">Requested path.</param>
            <returns>Resource javascript tag.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Resource.IResourceCsCodeGenerator">
            <summary>
            Resource cs code generator.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.IResourceCsCodeGenerator.GenerateCsFile(System.String,System.String)">
            <summary>
            Generate resource cs file.
            </summary>
            <param name="resourceFilePath">Resource file path.</param>
            <param name="nameSpace">Resource name space.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.IResourceCsCodeGenerator.GenerateResourceAssembly(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Generate resource cs file.
            </summary>
            <param name="resourceFilePathCollection">Resource file path collection.</param>
            <param name="nameSpace">Resource name space.</param>
            <param name="assemblyPath">Resource assembly path.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Resource.IResourceItem">
            <summary>
            Resource item interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Resource.IResourceItem.FileName">
            <summary>
            Gets resource file name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Resource.IResourceItem.KeyInFile">
            <summary>
            Gets resource key in file.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Resource.IResourceItem.Value">
            <summary>
            Gets resource value.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Resource.IResourceItem.Culture">
            <summary>
            Gets the culture of this resource.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Resource.IResourceJavascriptMappingRepository">
            <summary>
            Resource javascript mapping repository interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.IResourceJavascriptMappingRepository.GetResource(System.String)">
            <summary>
            Get javascript resource for this path.
            </summary>
            <param name="path">Requested virtual path.</param>
            <returns>Resource javascript setting collection.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Resource.IResourceJavascriptRender">
            <summary>
            Resource javascript render.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.IResourceJavascriptRender.RenderResource(Ctrip.Duckbill.Resource.IResourceJavascriptSetting)">
            <summary>
            Render single resource.
            </summary>
            <param name="resource">Resource javascript setting.</param>
            <returns>Javascript html string.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.IResourceJavascriptRender.RenderResource(System.Collections.Generic.IEnumerable{Ctrip.Duckbill.Resource.IResourceJavascriptSetting})">
            <summary>
            Render single resource.
            </summary>
            <param name="resource">Resource javascript setting collection.</param>
            <returns>Javascript html string.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Resource.IResourceJavascriptSetting">
            <summary>
            Resource javascript setting interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Resource.IResourceJavascriptSetting.Key">
            <summary>
            Gets setting key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Resource.IResourceJavascriptSetting.JavascriptFieldName">
            <summary>
            Gets  javascript field name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Resource.IResourceJavascriptSetting.FileName">
            <summary>
            Gets resource file name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Resource.IResourceJavascriptSetting.KeyInFile">
            <summary>
            Gets key in file.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Resource.IResourceJavascriptSetting.Ignore">
            <summary>
            Gets a value indicating whether ignore this meta.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Resource.IResourceManager">
            <summary>
            Resource manager interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.IResourceManager.GetString(System.String,System.String)">
            <summary>
            Get resource value string.
            </summary>
            <param name="fileName">Requested resource file name.</param>
            <param name="keyInFile">Requested resource key in file.</param>
            <returns>Resource value string.</returns>
            <remarks>It will use the thread current UI culture to find the resource.</remarks>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.IResourceManager.GetString(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Get resource value string.
            </summary>
            <param name="fileName">Requested resource file name.</param>
            <param name="keyInFile">Requested resource key in file.</param>
            <param name="culture">Special culture.</param>
            <returns>Resource value string.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.IResourceManager.Get(System.String,System.String)">
            <summary>
            Get resource by filename and key in file.
            </summary>
            <param name="fileName">Requested resource file name.</param>
            <param name="keyInFile">Requested resource key in file.</param>
            <returns>Resource item.</returns>
            <remarks>It will use the thread current UI culture to find the resource.</remarks>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.IResourceManager.Get(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Get resource by filename, key in file and culture.
            </summary>
            <param name="fileName">Requested resource file name.</param>
            <param name="keyInFile">Requested resource key in file.</param>
            <param name="culture">Special culture.</param>
            <returns>Resource value string.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.IResourceManager.GetByGroup(System.String)">
            <summary>
            Get resource items by group name.
            </summary>
            <param name="groupName">Requested group name.</param>
            <returns>A special group of resource items.</returns>
            <remarks>It will use the thread current UI culture to find the resource.</remarks>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.IResourceManager.GetByGroup(System.String,System.Globalization.CultureInfo)">
            <summary>
            Get resource items by group name and culture.
            </summary>
            <param name="groupName">Requested group name.</param>
            <param name="culture">Special culture.</param>
            <returns>A special group of resource items.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Resource.IResourceRepository">
            <summary>
            Resource repository interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.IResourceRepository.GetString(System.String,System.String)">
            <summary>
            Get resource value string.
            </summary>
            <param name="fileName">Requested resource file name.</param>
            <param name="keyInFile">Requested resource key in file.</param>
            <returns>Resource value string.</returns>
            <remarks>It will use the thread current UI culture to find the resource.</remarks>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.IResourceRepository.GetString(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Get resource value string.
            </summary>
            <param name="fileName">Requested resource file name.</param>
            <param name="keyInFile">Requested resource key in file.</param>
            <param name="culture">Special culture.</param>
            <returns>Resource value string.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.IResourceRepository.Get(System.String,System.String)">
            <summary>
            Get resource by filename and key in file.
            </summary>
            <param name="fileName">Requested resource file name.</param>
            <param name="keyInFile">Requested resource key in file.</param>
            <returns>Resource item.</returns>
            <remarks>It will use the thread current UI culture to find the resource.</remarks>
        </member>
        <member name="M:Ctrip.Duckbill.Resource.IResourceRepository.Get(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Get resource by filename, key in file and culture.
            </summary>
            <param name="fileName">Requested resource file name.</param>
            <param name="keyInFile">Requested resource key in file.</param>
            <param name="culture">Special culture.</param>
            <returns>Resource value string.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Resource.IResxFileIgnoreCultureComparer">
            <summary>
            Resx file compare. If multiple files are different in culture, they are same in this comparer.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.DynamicItemType">
            <summary>
            Restful service dynamic item type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.DynamicItemType.QueryString">
            <summary>
            The query string.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.DynamicItemType.UrlParameter">
            <summary>
            The URL parameter.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.DynamicItemType.Header">
            <summary>
            The header.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.DynamicItemType.Cookie">
            <summary>
            The cookie.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.Http.IHttpRestfulClient">
            <summary>
            Http restful client interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Http.IHttpRestfulClient.SendAsync(Ctrip.Duckbill.RestClient.IRestfulRequest)">
            <summary>
            Send request async.
            </summary>
            <param name="request">Restful request.</param>
            <returns>Restful response.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Http.IHttpRestfulClient.SendAsync``1(Ctrip.Duckbill.RestClient.IRestfulRequest)">
            <summary>
            Send request async.
            </summary>
            <typeparam name="TResponse">Type of response body.</typeparam>
            <param name="request">Restful request.</param>
            <returns>Restful response.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Http.IHttpRestfulClient.SendAsync``1(Ctrip.Duckbill.RestClient.IRestfulRequest{``0})">
            <summary>
            Send request async.
            </summary>
            <typeparam name="TRequest">Type of request body.</typeparam>
            <param name="request">Restful request.</param>
            <returns>Restful response.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Http.IHttpRestfulClient.SendAsync``2(Ctrip.Duckbill.RestClient.IRestfulRequest{``0})">
            <summary>
            Send request async.
            </summary>
            <typeparam name="TRequest">Type of request body.</typeparam>
            <typeparam name="TResponse">Type of response body.</typeparam>
            <param name="request">Restful request.</param>
            <returns>Restful response.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Http.IHttpRestfulClient.Send(Ctrip.Duckbill.RestClient.IRestfulRequest)">
            <summary>
            Send request sync.
            </summary>
            <param name="request">Restful request.</param>
            <returns>Restful response.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Http.IHttpRestfulClient.Send``1(Ctrip.Duckbill.RestClient.IRestfulRequest)">
            <summary>
            Send request sync.
            </summary>
            <typeparam name="TResponse">Type of response body.</typeparam>
            <param name="request">Restful request.</param>
            <returns>Restful response.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Http.IHttpRestfulClient.Send``1(Ctrip.Duckbill.RestClient.IRestfulRequest{``0})">
            <summary>
            Send request sync.
            </summary>
            <typeparam name="TRequest">Type of request body.</typeparam>
            <param name="request">Restful request.</param>
            <returns>Restful response.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Http.IHttpRestfulClient.Send``2(Ctrip.Duckbill.RestClient.IRestfulRequest{``0})">
            <summary>
            Send request sync.
            </summary>
            <typeparam name="TRequest">Type of request body.</typeparam>
            <typeparam name="TResponse">Type of response body.</typeparam>
            <param name="request">Restful request.</param>
            <returns>Restful response.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.ICookieUnit">
            <summary>
            Cookie unit interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.ICookieUnit.Name">
            <summary>
            Gets cookie name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.ICookieUnit.SubField">
            <summary>
            Gets cookie sub field name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.ICookieUnit.Value">
            <summary>
            Gets cookie value.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.ICookieUnit.IsRemove">
            <summary>
            Gets a value indicating whether this instance is remove.
            </summary>
            <value><c>true</c> if this instance is remove; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.IDynamicItemUnit">
            <summary>
            Restful service dynamic item unit.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IDynamicItemUnit.TargetName">
            <summary>
            Gets the name of the target.
            </summary>
            <value>The name of the target.</value>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IDynamicItemUnit.TargetType">
            <summary>
            Gets the type of the target.
            </summary>
            <value>The type of the target.</value>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IDynamicItemUnit.SourceName">
            <summary>
            Gets the name of the source.
            </summary>
            <value>The name of the source.</value>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IDynamicItemUnit.SourceType">
            <summary>
            Gets the type of the source.
            </summary>
            <value>The type of the source.</value>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.IHeadUnit">
            <summary>
            Head unit interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IHeadUnit.Name">
            <summary>
            Gets default setting item field.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IHeadUnit.Value">
            <summary>
            Gets default setting item value.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IHeadUnit.IsRemove">
            <summary>
            Gets a value indicating whether this instance is remove.
            </summary>
            <value><c>true</c> if this instance is remove; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.Implement.CachedRestfulResponse">
            <summary>
            Cached restful response.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.CachedRestfulResponse.originalResponse">
            <summary>
            Original response.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.CachedRestfulResponse.#ctor(Ctrip.Duckbill.RestClient.IRestfulResponse,Ctrip.Duckbill.INow)">
            <summary>
            Initializes a new instance of the CachedRestfulResponse class.
            </summary>
            <param name="originalResponse">Original response.</param>
            <param name="now">Now interface.</param>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.CachedRestfulResponse.Headers">
            <summary>
            Gets head collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.CachedRestfulResponse.RequestID">
            <summary>
            Gets request id.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.CachedRestfulResponse.RequestedUrl">
            <summary>
            Gets requested url.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.CachedRestfulResponse.IsSuccessStatusCode">
            <summary>
            Gets a value indicating whether the HTTP response was successful.
            </summary>
            <value>Returns System.Boolean.A value that indicates if the HTTP response was successful. True if System.Net.Http.HttpResponseMessage.StatusCode was in the range 200-299; otherwise false.</value>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.CachedRestfulResponse.StatusCode">
            <summary>
            Gets the status code of the HTTP response.
            </summary>
            <value>Returns System.Net.HttpStatusCode.The status code of the HTTP response.</value>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.CachedRestfulResponse.MessageCode">
            <summary>
            Gets the response code. Response code is defined as a business code.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.CachedRestfulResponse.ReasonPhrase">
            <summary>
            Gets the reason phrase which typically is sent by servers together with the status code.
            </summary>
            <value>Returns System.String.The reason phrase sent by the server.</value>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.CachedRestfulResponse.ResponseBodyBytes">
            <summary>
            Gets response body bytes.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.Implement.CachedRestfulResponse`1">
            <summary>
            Cached generic restful response.
            </summary>
            <typeparam name="TResponse">Type of response.</typeparam>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.CachedRestfulResponse`1.originalResponse">
            <summary>
            Original response.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.CachedRestfulResponse`1.#ctor(Ctrip.Duckbill.RestClient.IRestfulResponse{`0},Ctrip.Duckbill.INow)">
            <summary>
            Initializes a new instance of the CachedRestfulResponse class.
            </summary>
            <param name="originalResponse">Original response.</param>
            <param name="now">Now interface.</param>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.CachedRestfulResponse`1.Headers">
            <summary>
            Gets head collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.CachedRestfulResponse`1.RequestID">
            <summary>
            Gets request id.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.CachedRestfulResponse`1.RequestedUrl">
            <summary>
            Gets requested url.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.CachedRestfulResponse`1.IsSuccessStatusCode">
            <summary>
            Gets a value indicating whether the HTTP response was successful.
            </summary>
            <value>Returns System.Boolean.A value that indicates if the HTTP response was successful. True if System.Net.Http.HttpResponseMessage.StatusCode was in the range 200-299; otherwise false.</value>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.CachedRestfulResponse`1.StatusCode">
            <summary>
            Gets the status code of the HTTP response.
            </summary>
            <value>Returns System.Net.HttpStatusCode.The status code of the HTTP response.</value>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.CachedRestfulResponse`1.MessageCode">
            <summary>
            Gets the response code. Response code is defined as a business code.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.CachedRestfulResponse`1.ReasonPhrase">
            <summary>
            Gets the reason phrase which typically is sent by servers together with the status code.
            </summary>
            <value>Returns System.String.The reason phrase sent by the server.</value>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.CachedRestfulResponse`1.ResponseBodyBytes">
            <summary>
            Gets response body bytes.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.CachedRestfulResponse`1.ResponseBody">
            <summary>
            Gets response body.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.Implement.ConfiguredRestfulRequest">
            <summary>
            Configured restful request.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.ConfiguredRestfulRequest.configRepository">
            <summary>
            Config repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.ConfiguredRestfulRequest.httpContext">
            <summary>
            The HTTP context.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.ConfiguredRestfulRequest.#ctor(System.String,Ctrip.Duckbill.RestClient.IRestfulServiceConfigRepository,Ctrip.Duckbill.Net.Host.IHostRepository,Ctrip.Duckbill.IRegex,Ctrip.Duckbill.IGuidFactory,Ctrip.Duckbill.Context.IRequestContext,Ctrip.Duckbill.Web.Context.IHttpContextRepository)">
            <summary>
            Initializes a new instance of the ConfiguredRestfulRequest class.
            </summary>
            <param name="configKey">Config key.</param>
            <param name="configRepository">Config repository.</param>
            <param name="hostRepository">Host repository.</param>
            <param name="regex">Regex manager.</param>
            <param name="guidFactory">Guid factory.</param>
            <param name="systemContext">The system context.</param>
            <param name="httpContext">The HTTP context.</param>
            <exception cref="T:System.ArgumentException">Argument exception.</exception>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.ConfiguredRestfulRequest.LoadResourceConfig(Ctrip.Duckbill.RestClient.IRestfulServiceResourceUnit)">
            <summary>
            Load resource config.
            </summary>
            <param name="config">Resource config.</param>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.ConfiguredRestfulRequest.LoadDefaultConfig">
            <summary>
            Load default config.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.ConfiguredRestfulRequest.LoadCommonSettings">
            <summary>
            Load common settings.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.ConfiguredRestfulRequest.LoadSettings(Ctrip.Duckbill.RestClient.IRestfulServiceResourceUnit)">
            <summary>
            Load settings.
            </summary>
            <param name="config">Resource config.</param>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.ConfiguredRestfulRequest.LoadSetting(System.String)">
            <summary>
            Load setting.
            </summary>
            <param name="settingName">Setting name.</param>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.ConfiguredRestfulRequest.LoadHost(System.String)">
            <summary>
            Load host.
            </summary>
            <param name="hostName">Host name.</param>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.ConfiguredRestfulRequest.LoadMaxResponseSize(System.Int64)">
            <summary>
            Load max response size.
            </summary>
            <param name="maxResponseSize">Max response size.</param>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.ConfiguredRestfulRequest.LoadTimeOut(System.TimeSpan)">
            <summary>
            Load time out.
            </summary>
            <param name="timeout">Time out.</param>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.ConfiguredRestfulRequest.LoadAbsoluteCacheTime(System.TimeSpan)">
            <summary>
            Load absolute cache time.
            </summary>
            <param name="absoluteCacheTime">Absolute cache time.</param>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.ConfiguredRestfulRequest.LoadSlidingCacheTime(System.TimeSpan)">
            <summary>
            Load sliding cache time.
            </summary>
            <param name="slidingCacheTime">Sliding cache time.</param>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.ConfiguredRestfulRequest.LoadMaxRetryTimes(System.Int32)">
            <summary>
            Load max retry times.
            </summary>
            <param name="maxRetryTimes">Max retry times.</param>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.ConfiguredRestfulRequest.LoadTryMainHostTimes(System.Int32)">
            <summary>
            Load try main host times.
            </summary>
            <param name="tryMainHostTimes">Try main host times.</param>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.ConfiguredRestfulRequest.LoadBackupHosts(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Load backup hosts.
            </summary>
            <param name="backupHosts">Backup hosts.</param>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.ConfiguredRestfulRequest.LoadUrlParameters(System.Collections.Generic.IEnumerable{Ctrip.Duckbill.RestClient.IUrlParameterUnit})">
            <summary>
            Load url parameters.
            </summary>
            <param name="urlParameters">Url parameters.</param>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.ConfiguredRestfulRequest.LoadHeaders(System.Collections.Generic.IEnumerable{Ctrip.Duckbill.RestClient.IHeadUnit})">
            <summary>
            Load headers.
            </summary>
            <param name="headers">Header values.</param>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.ConfiguredRestfulRequest.LoadCookies(System.Collections.Generic.IEnumerable{Ctrip.Duckbill.RestClient.ICookieUnit})">
            <summary>
            Load cookies.
            </summary>
            <param name="cookies">Cookies values.</param>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.ConfiguredRestfulRequest.LoadDynamic(System.Collections.Generic.IEnumerable{Ctrip.Duckbill.RestClient.IDynamicItemUnit})">
            <summary>
            Loads the dynamic.
            </summary>
            <param name="dynamics">The dynamics.</param>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.ConfiguredRestfulRequest.LoadDynamic(Ctrip.Duckbill.RestClient.IDynamicItemUnit)">
            <summary>
            Loads the dynamic.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.ConfiguredRestfulRequest.GetDynamicSourceValue(Ctrip.Duckbill.RestClient.IDynamicItemUnit)">
            <summary>
            Gets the dynamic source.
            </summary>
            <param name="item">The item.</param>
            <returns>Dynamic source.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.ConfiguredRestfulRequest.SetDynamicTargetValue(Ctrip.Duckbill.RestClient.IDynamicItemUnit,System.String)">
            <summary>
            Sets the dynamic target value.
            </summary>
            <param name="item">The item.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.OperationCanceledException">Can not set url parameter at source type.</exception>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.Implement.Configuration.CookieCollection">
            <summary>
            Cookie collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.CookieCollection.Collection">
            <summary>
            Gets or sets cookie collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.Implement.Configuration.CookieUnit">
            <summary>
            Cookie unit.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.CookieUnit.Name">
            <summary>
            Gets or sets cookie name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.CookieUnit.SubField">
            <summary>
            Gets or sets cookie sub field name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.CookieUnit.Value">
            <summary>
            Gets or sets cookie value.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.CookieUnit.IsRemove">
            <summary>
            Gets or sets a value indicating whether this instance is remove.
            </summary>
            <value><c>true</c> if this instance is remove; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.Implement.Configuration.DefaultRestfulServiceConfigRepository">
            <summary>
            Default restful service config repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.Configuration.DefaultRestfulServiceConfigRepository.configurationAccessor">
            <summary>
            Configuration manager.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.Configuration.DefaultRestfulServiceConfigRepository.#ctor(Ctrip.Duckbill.Configuration.IConfigurationAccessor)">
            <summary>
            Initializes a new instance of the DefaultRestfulServiceConfigRepository class.
            </summary>
            <param name="configurationAccessor">Configuration manager.</param>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.DefaultRestfulServiceConfigRepository.EnableRequestLog">
            <summary>
            Gets a value indicating whether request log is enable.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.DefaultRestfulServiceConfigRepository.EnableResponseLog">
            <summary>
            Gets a value indicating whether response log is enable.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.DefaultRestfulServiceConfigRepository.DefaultAbsoluteCacheTime">
            <summary>
            Gets default absolute cache time.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.DefaultRestfulServiceConfigRepository.DefaultSlidingCacheTime">
            <summary>
            Gets default sliding cache time.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.Configuration.DefaultRestfulServiceConfigRepository.GetResource(System.String)">
            <summary>
            Get restful service resource unit.
            </summary>
            <param name="resourceKey">Resource key.</param>
            <returns>Restfu service resource unit.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.Configuration.DefaultRestfulServiceConfigRepository.GetSetting(System.String)">
            <summary>
            Get restful service setting unit.
            </summary>
            <param name="settingKey">Setting key.</param>
            <returns>Restfu service setting unit.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.Configuration.DefaultRestfulServiceConfigRepository.GetDefaultTimeout">
            <summary>
            Get default timeout.
            </summary>
            <returns>Default timeout.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.Configuration.DefaultRestfulServiceConfigRepository.GetDefaultMaxResponseSize">
            <summary>
            Get default max response size.
            </summary>
            <returns>Default response size.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.Configuration.DefaultRestfulServiceConfigRepository.GetMaxRetryTimes">
            <summary>
            Get max retry times.
            </summary>
            <returns>Max retry times.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.Configuration.DefaultRestfulServiceConfigRepository.GetTryMainHostTimes">
            <summary>
            Get try main host times.
            </summary>
            <returns>Try main host times.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.Configuration.DefaultRestfulServiceConfigRepository.GetResourceByUrl(System.String)">
            <summary>
            Get restful service resource nuit.
            </summary>
            <param name="url">Resource url.</param>
            <returns>Restful service resource unite.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.Configuration.DefaultRestfulServiceConfigRepository.GetCommonSettings">
            <summary>
            Gets the common settings.
            </summary>
            <returns>Common setting collection.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.Configuration.DefaultRestfulServiceConfigRepository.GetConfig">
            <summary>
            Get configuration.
            </summary>
            <returns>Restful service config.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.Implement.Configuration.DynamicItemCollection">
            <summary>
            Restful service dynamic item collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.DynamicItemCollection.Collection">
            <summary>
            Gets or sets resource collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.Implement.Configuration.DynamicItemUnit">
            <summary>
            Restful service dynamic item unit.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.DynamicItemUnit.TargetName">
            <summary>
            Gets or sets the name of the target.
            </summary>
            <value>The name of the target.</value>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.DynamicItemUnit.TargetType">
            <summary>
            Gets or sets the type of the target.
            </summary>
            <value>The type of the target.</value>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.DynamicItemUnit.SourceName">
            <summary>
            Gets or sets the name of the source.
            </summary>
            <value>The name of the source.</value>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.DynamicItemUnit.SourceType">
            <summary>
            Gets or sets the type of the source.
            </summary>
            <value>The type of the source.</value>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.Implement.Configuration.HeadCollection">
            <summary>
            Head collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.HeadCollection.Collection">
            <summary>
            Gets or sets head collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.Implement.Configuration.HeadUnit">
            <summary>
            Head unit.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.HeadUnit.Name">
            <summary>
            Gets or sets default setting item field.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.HeadUnit.Value">
            <summary>
            Gets or sets default setting item value.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.HeadUnit.IsRemove">
            <summary>
            Gets or sets a value indicating whether this instance is remove.
            </summary>
            <value><c>true</c> if this instance is remove; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.Implement.Configuration.HostCollection">
            <summary>
            Host collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.HostCollection.Collection">
            <summary>
            Gets or sets host collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceConfig">
            <summary>
            Restfu service config.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceConfig.DefaultMaxResponseSize">
            <summary>
            Gets or sets default max response size.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceConfig.DefaultTimeoutExpression">
            <summary>
            Gets or sets a expression that indicate the default timeout value.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceConfig.DefaultTimeout">
            <summary>
            Gets or sets default timeout.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceConfig.MaxRetryTimes">
            <summary>
            Gets or sets max retry times.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceConfig.TryMainHostTimes">
            <summary>
            Gets or sets try main host times.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceConfig.DefaultAbsoluteCacheTimeString">
            <summary>
            Gets or sets absolute cache time string.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceConfig.DefaultAbsoluteCacheTime">
            <summary>
            Gets or sets absolute cache time.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceConfig.DefaultSlidingCacheTimeString">
            <summary>
            Gets or sets sliding cache time string.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceConfig.DefaultSlidingCacheTime">
            <summary>
            Gets or sets sliding cache time.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceConfig.EnableRequestLog">
            <summary>
            Gets or sets a value indicating whether request log is enable.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceConfig.EnableResponseLog">
            <summary>
            Gets or sets a value indicating whether response log is enable.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceConfig.CommonSettings">
            <summary>
            Gets or sets the common settings.
            </summary>
            <value>The common settings.</value>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceConfig.Resources">
            <summary>
            Gets or sets resource collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceConfig.Settings">
            <summary>
            Gets or sets setting collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceResourceCollection">
            <summary>
            Restfu service resource collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceResourceCollection.Collection">
            <summary>
            Gets or sets resource collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceResourceUnit">
            <summary>
            Restful service resource unit.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceResourceUnit.Key">
            <summary>
            Gets or sets resource key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceResourceUnit.Verb">
            <summary>
            Gets or sets http verb.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceResourceUnit.Url">
            <summary>
            Gets or sets url.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceResourceUnit.MaxResponseSize">
            <summary>
            Gets or sets max response size.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceResourceUnit.TimeoutExpression">
            <summary>
            Gets or sets timeout.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceResourceUnit.Timeout">
            <summary>
            Gets or sets a timespan that cookie will expires after it.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceResourceUnit.AbsoluteCacheTimeString">
            <summary>
            Gets or sets absolute cache time string.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceResourceUnit.AbsoluteCacheTime">
            <summary>
            Gets or sets absolute cache time.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceResourceUnit.SlidingCacheTimeString">
            <summary>
            Gets or sets sliding cache time string.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceResourceUnit.SlidingCacheTime">
            <summary>
            Gets or sets sliding cache time.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceResourceUnit.MaxRetryTimes">
            <summary>
            Gets or sets max retry times.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceResourceUnit.TryMainHostTimes">
            <summary>
            Gets or sets try main host times.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceResourceUnit.Host">
            <summary>
            Gets or sets main host.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceResourceUnit.BackupHostCollection">
            <summary>
            Gets or sets backup host.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceResourceUnit.BackupHosts">
            <summary>
            Gets backup hosts collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceResourceUnit.UrlParameterCollection">
            <summary>
            Gets or sets url parameter collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceResourceUnit.UrlParameters">
            <summary>
            Gets url parameter collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceResourceUnit.HeaderCollection">
            <summary>
            Gets or sets head collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceResourceUnit.Headers">
            <summary>
            Gets head unit collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceResourceUnit.CookieCollection">
            <summary>
            Gets or sets cookie collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceResourceUnit.Cookies">
            <summary>
            Gets cookie unit collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceResourceUnit.DynamicCollection">
            <summary>
            Gets or sets the dynamic.
            </summary>
            <value>The dynamic.</value>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceResourceUnit.Dynamics">
            <summary>
            Gets the dynamics.
            </summary>
            <value>The dynamics.</value>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceResourceUnit.SettingCollection">
            <summary>
            Gets or sets setting collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceResourceUnit.Settings">
            <summary>
            Gets setting collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceResourceUnitSettingCollection">
            <summary>
            Restful service resource unit setting collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceResourceUnitSettingCollection.Collection">
            <summary>
            Gets or sets head collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceSettingCollection">
            <summary>
            Restfu service setting collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceSettingCollection.Collection">
            <summary>
            Gets or sets setting collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceSettingUnit">
            <summary>
            Restful service setting unit.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceSettingUnit.Key">
            <summary>
            Gets or sets setting key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceSettingUnit.MaxResponseSize">
            <summary>
            Gets or sets max response size.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceSettingUnit.TimeoutExpression">
            <summary>
            Gets or sets timeout.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceSettingUnit.Timeout">
            <summary>
            Gets or sets a timespan that cookie will expires after it.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceSettingUnit.AbsoluteCacheTimeString">
            <summary>
            Gets or sets absolute cache time string.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceSettingUnit.AbsoluteCacheTime">
            <summary>
            Gets or sets absolute cache time.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceSettingUnit.SlidingCacheTimeString">
            <summary>
            Gets or sets sliding cache time string.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceSettingUnit.SlidingCacheTime">
            <summary>
            Gets or sets sliding cache time.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceSettingUnit.MaxRetryTimes">
            <summary>
            Gets or sets max retry times.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceSettingUnit.TryMainHostTimes">
            <summary>
            Gets or sets try main host times.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceSettingUnit.Host">
            <summary>
            Gets or sets main host.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceSettingUnit.BackupHostCollection">
            <summary>
            Gets or sets backup hosts collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceSettingUnit.BackupHosts">
            <summary>
            Gets backup hosts collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceSettingUnit.UrlParameterCollection">
            <summary>
            Gets or sets url parameter collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceSettingUnit.UrlParameters">
            <summary>
            Gets url parameter collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceSettingUnit.HeaderCollection">
            <summary>
            Gets or sets head collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceSettingUnit.Headers">
            <summary>
            Gets head unit collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceSettingUnit.CookieCollection">
            <summary>
            Gets or sets cookie collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceSettingUnit.Cookies">
            <summary>
            Gets cookie unit collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceSettingUnit.DynamicCollection">
            <summary>
            Gets or sets the dynamic.
            </summary>
            <value>The dynamic.</value>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.RestfulServiceSettingUnit.Dynamics">
            <summary>
            Gets the dynamics.
            </summary>
            <value>The dynamics.</value>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.Implement.Configuration.UrlParameterCollection">
            <summary>
            Url parameter collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.UrlParameterCollection.Collection">
            <summary>
            Gets or sets url parameter collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.Implement.Configuration.UrlParameterUnit">
            <summary>
            Url parameter unit.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.UrlParameterUnit.Name">
            <summary>
            Gets or sets default setting item field.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.UrlParameterUnit.Value">
            <summary>
            Gets or sets default setting item value.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.Configuration.UrlParameterUnit.IsRemove">
            <summary>
            Gets or sets a value indicating whether this instance is remove.
            </summary>
            <value><c>true</c> if this instance is remove; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulClient">
            <summary>
            Default restful client.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulClient.requestRepository">
            <summary>
            Restful request repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulClient.httpClient">
            <summary>
            Http restful client.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulClient.intraprocessClient">
            <summary>
            Intra-process client.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulClient.getCache">
            <summary>
            Restful get cache.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulClient.dictionaryConverter">
            <summary>
            The dictionary converter.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulClient.#ctor(Ctrip.Duckbill.RestClient.IRestfulRequestRepository,Ctrip.Duckbill.RestClient.Http.IHttpRestfulClient,Ctrip.Duckbill.RestClient.IRestfulGetCache,Ctrip.Duckbill.Collections.IDictionaryConverter)">
            <summary>
            Initializes a new instance of the DefaultRestfulClient class.
            </summary>
            <param name="requestRepository">Request repository.</param>
            <param name="httpClient">Http client.</param>
            <param name="getCache">Get cache.</param>
            <param name="dictionaryConverter">The dictionary converter.</param>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulClient.#ctor(Ctrip.Duckbill.RestClient.IRestfulRequestRepository,Ctrip.Duckbill.RestClient.Http.IHttpRestfulClient,Ctrip.Duckbill.RestClient.IntraProcess.IIntraProcessRestfulClient,Ctrip.Duckbill.RestClient.IRestfulGetCache,Ctrip.Duckbill.Collections.IDictionaryConverter)">
            <summary>
            Initializes a new instance of the DefaultRestfulClient class.
            </summary>
            <param name="requestRepository">Request repository.</param>
            <param name="httpClient">Http client.</param>
            <param name="intraprocessClient">Intra-process client.</param>
            <param name="getCache">Get cache.</param>
            <param name="dictionaryConverter">The dictionary converter.</param>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulClient.Create">
            <summary>
            Create new restful request.
            </summary>
            <returns>Restful request.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulClient.Create``1">
            <summary>
            Create new generic restful request.
            </summary>
            <typeparam name="TRequest">Type of request body.</typeparam>
            <returns>Restful request.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulClient.GetRequestFromConfiguration(System.String)">
            <summary>
            Get request from configuration.
            </summary>
            <param name="configuredResourceKey">Configured resource key.</param>
            <returns>Restful request.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulClient.GetRequestFromConfiguration``1(System.String)">
            <summary>
            Get generic request from configuration.
            </summary>
            <typeparam name="TRequest">Type of request body.</typeparam>
            <param name="configuredResourceKey">Configured resource key.</param>
            <returns>Restful request.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulClient.Send(Ctrip.Duckbill.RestClient.IRestfulRequest)">
            <summary>
            Send request sync.
            </summary>
            <param name="request">Restful request.</param>
            <returns>Restful response.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulClient.Send``1(Ctrip.Duckbill.RestClient.IRestfulRequest)">
            <summary>
            Send request sync.
            </summary>
            <typeparam name="TResponse">Type of response body.</typeparam>
            <param name="request">Restful request.</param>
            <returns>Restful response.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulClient.Send``1(Ctrip.Duckbill.RestClient.IRestfulRequest{``0})">
            <summary>
            Send request sync.
            </summary>
            <typeparam name="TRequest">Type of request body.</typeparam>
            <param name="request">Restful request.</param>
            <returns>Restful response.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulClient.Send``2(Ctrip.Duckbill.RestClient.IRestfulRequest{``0})">
            <summary>
            Send request sync.
            </summary>
            <typeparam name="TRequest">Type of request body.</typeparam>
            <typeparam name="TResponse">Type of response body.</typeparam>
            <param name="request">Restful request.</param>
            <returns>Restful response.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulClient.Send``1(System.String,System.Object[])">
            <summary>
            Sends the request by specified configured resource key.
            </summary>
            <typeparam name="TResponse">The type of the response body.</typeparam>
            <param name="configuredResourceKey">The configured resource key.</param>
            <param name="urlParameters">The URL parameters.</param>
            <returns>Generic restful response.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulClient.Send``2(System.String,``0,System.Object[])">
            <summary>
            Sends the request by specified configured resource key.
            </summary>
            <typeparam name="TRequest">The type of the request body.</typeparam>
            <typeparam name="TResponse">The type of the response body.</typeparam>
            <param name="configuredResourceKey">The configured resource key.</param>
            <param name="requestBody">The request body.</param>
            <param name="urlParameters">The URL parameters.</param>
            <returns>Generic restful response.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulClient.SupportInProcess(Ctrip.Duckbill.RestClient.IRestfulRequest)">
            <summary>
            Check whether current request is support in process.
            </summary>
            <param name="request">Restful request.</param>
            <returns>True is support and false is not support.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulClient.SetUrlParameters(Ctrip.Duckbill.RestClient.IRestfulRequest,System.Object[])">
            <summary>
            Sets the URL parameters.
            </summary>
            <param name="request">The request.</param>
            <param name="urlParameters">The URL parameters.</param>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulGetCache">
            <summary>
            Default restful get cache.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulGetCache.cache">
            <summary>
            Configuration cache.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulGetCache.cacheItemFactory">
            <summary>
            Cache item factory.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulGetCache.now">
            <summary>
            Datetime now.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulGetCache.#ctor(Ctrip.Duckbill.Cache.IMemoryCacheRepository,Ctrip.Duckbill.Cache.ICacheItemFactory,Ctrip.Duckbill.INow)">
            <summary>
            Initializes a new instance of the DefaultRestfulGetCache class.
            </summary>
            <param name="repository">Memory cache repository.</param>
            <param name="cacheItemFactory">Cache item factory.</param>
            <param name="now">Datetime now.</param>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulGetCache.Contains(Ctrip.Duckbill.RestClient.IRestfulRequest)">
            <summary>
            Check whether contains cached response of the request.
            </summary>
            <param name="request">Restful request.</param>
            <returns>True contains, false not.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulGetCache.Contains``1(Ctrip.Duckbill.RestClient.IRestfulRequest)">
            <summary>
            Check whether contains cached response of the request.
            </summary>
            <typeparam name="TResponse">Type of response.</typeparam>
            <param name="request">Restful request.</param>
            <returns>True contains, false not.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulGetCache.Cache(Ctrip.Duckbill.RestClient.IRestfulRequest,Ctrip.Duckbill.RestClient.IRestfulResponse)">
            <summary>
            Cache response.
            </summary>
            <param name="request">Restful request.</param>
            <param name="response">Restful response.</param>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulGetCache.Cache``1(Ctrip.Duckbill.RestClient.IRestfulRequest,Ctrip.Duckbill.RestClient.IRestfulResponse{``0})">
            <summary>
            Cache special type response.
            </summary>
            <typeparam name="TResponse">Type of response.</typeparam>
            <param name="request">Restful request.</param>
            <param name="response">Restful response.</param>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulGetCache.Get(Ctrip.Duckbill.RestClient.IRestfulRequest)">
            <summary>
            Get cached response.
            </summary>
            <param name="request">Restful request.</param>
            <returns>Cached response.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulGetCache.Get``1(Ctrip.Duckbill.RestClient.IRestfulRequest)">
            <summary>
            Get cached special type response.
            </summary>
            <typeparam name="TResponse">Type of response.</typeparam>
            <param name="request">Restful request.</param>
            <returns>Cached response.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulGetCache.RequestIsValid(Ctrip.Duckbill.RestClient.IRestfulRequest)">
            <summary>
            Check whether request is valid.
            </summary>
            <param name="request">Restful request.</param>
            <returns>Whether request is valid.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulGetCache.ResponseIsValid(Ctrip.Duckbill.RestClient.IRestfulResponse)">
            <summary>
            Check whether response is valid.
            </summary>
            <param name="response">Restful response.</param>
            <returns>True is valid, false is invalid.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulGetCache.GetCacheKey(Ctrip.Duckbill.RestClient.IRestfulRequest)">
            <summary>
            Get cache key.
            </summary>
            <param name="request">Restful request.</param>
            <returns>Cache key.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulGetCache.GetCacheKey(Ctrip.Duckbill.RestClient.IRestfulRequest,System.Type)">
            <summary>
            Get cache key.
            </summary>
            <param name="request">Restful request.</param>
            <param name="reponseContentType">Response content type.</param>
            <returns>Cache key.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest">
            <summary>
            Default implement of restful request.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.hostRepository">
            <summary>
            Host repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.regex">
            <summary>
            Regex manager.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.systemContext">
            <summary>
            The system context.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.internalBackUpHosts">
            <summary>
            Internal backup hosts.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.internalUrlParameters">
            <summary>
            Internal url parameters.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.internalHeaders">
            <summary>
            Internal headers.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.internalCookies">
            <summary>
            Internal cookies.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.internalHostAddress">
            <summary>
            Internal host address.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.urlFormat">
            <summary>
            Url format.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.needGenerateUrl">
            <summary>
            Need generate url.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.internalPath">
            <summary>
            Internal path.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.internalQueryString">
            <summary>
            Internal query string.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.urlFormatQueryStringDictionary">
            <summary>
            Url format query string dictionary.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.urlFormatPath">
            <summary>
            Url format path.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.internalRequestObject">
            <summary>
            Internal request object.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.#ctor(Ctrip.Duckbill.Net.Host.IHostRepository,Ctrip.Duckbill.IRegex,Ctrip.Duckbill.IGuidFactory,Ctrip.Duckbill.Context.IRequestContext)">
            <summary>
            Initializes a new instance of the DefaultRestfulRequest class.
            </summary>
            <param name="hostRepository">Host repository.</param>
            <param name="regex">Regex manager.</param>
            <param name="guidFactory">Guid factory.</param>
            <param name="systemContext">The system context.</param>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.#ctor(Ctrip.Duckbill.RestClient.IRestfulRequest,Ctrip.Duckbill.Net.Host.IHostRepository,Ctrip.Duckbill.IRegex,Ctrip.Duckbill.IGuidFactory,Ctrip.Duckbill.Context.IRequestContext)">
            <summary>
            Initializes a new instance of the DefaultRestfulRequest class.
            </summary>
            <param name="request">Original request.</param>
            <param name="hostRepository">Host repository.</param>
            <param name="regex">Regex manager.</param>
            <param name="guidFactory">Guid factory.</param>
            <param name="systemContext">The system context.</param>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.ID">
            <summary>
            Gets or sets restful request id.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.Verb">
            <summary>
            Gets or sets http verb.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.UrlFormat">
            <summary>
            Gets or sets url.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.Path">
            <summary>
            Gets final resource path.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.QueryString">
            <summary>
            Gets final resource query string.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.ExceptHostUrl">
            <summary>
            Gets except host url.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.Host">
            <summary>
            Gets or sets main host.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.Url">
            <summary>
            Gets complete url.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.BackupUrl">
            <summary>
            Gets complete backup urls.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.BackupHosts">
            <summary>
            Gets backup hosts.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.UrlParameters">
            <summary>
            Gets url parameter collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.Headers">
            <summary>
            Gets head collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.Cookies">
            <summary>
            Gets cookie collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.AbsoluteCacheTime">
            <summary>
            Gets or sets absolute cache time.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.SlidingCacheTime">
            <summary>
            Gets or sets sliding cache time.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.MaxResponseSize">
            <summary>
            Gets or sets max response size.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.Timeout">
            <summary>
            Gets or sets a timespan that cookie will expires after it.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.MaxRetryTimes">
            <summary>
            Gets or sets max retry times.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.TryMainHostTimes">
            <summary>
            Gets or sets try main host times.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.RequestBodyObject">
            <summary>
            Gets or sets request body object.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.AddBackupHost(System.String)">
            <summary>
            Add backup host.
            </summary>
            <param name="hostName">Restful resource host.</param>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.SetUrlParameter(System.String,System.Object)">
            <summary>
            Add or update url parameter.
            </summary>
            <param name="name">Url parameter name.</param>
            <param name="value">Url parameter value.</param>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.SetHeader(System.String,System.Object)">
            <summary>
            Add or update header.
            </summary>
            <param name="name">Header name.</param>
            <param name="value">Header value.</param>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.SetCookie(System.Web.HttpCookie)">
            <summary>
            Add or update cookie.
            </summary>
            <param name="cookie">Cookie item.</param>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.GetHostAddress(System.String)">
            <summary>
            Get host address.
            </summary>
            <param name="hostName">Host name.</param>
            <returns>Host address.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.SetUrlFormat(System.String)">
            <summary>
            Set url format.
            </summary>
            <param name="format">Url format.</param>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.EnsureGenerateUrl">
            <summary>
            Ensure generate url.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.GenerateUrl">
            <summary>
            Generate url.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.StripQuery(System.String,System.String@)">
            <summary>
            Strip query string.
            </summary>
            <param name="url">Original url.</param>
            <param name="queryString">Query string.</param>
            <returns>Path without query string.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest.ConfigureSystemContext">
            <summary>
            Configure system context to request message.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest`1">
            <summary>
            Default implement of generic restful request.
            </summary>
            <typeparam name="TRequest">Type of request.</typeparam>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest`1.internalRequestBody">
            <summary>
            Internal request body.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest`1.#ctor(Ctrip.Duckbill.Net.Host.IHostRepository,Ctrip.Duckbill.IRegex,Ctrip.Duckbill.IGuidFactory,Ctrip.Duckbill.Context.IRequestContext)">
            <summary>
            Initializes a new instance of the DefaultRestfulRequest class.
            </summary>
            <param name="hostRepository">Host repository.</param>
            <param name="regex">Regex manager.</param>
            <param name="guidFactory">Guid factory.</param>
            <param name="systemContext">The system context.</param>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest`1.#ctor(Ctrip.Duckbill.RestClient.IRestfulRequest,Ctrip.Duckbill.Net.Host.IHostRepository,Ctrip.Duckbill.IRegex,Ctrip.Duckbill.IGuidFactory,Ctrip.Duckbill.Context.IRequestContext)">
            <summary>
            Initializes a new instance of the DefaultRestfulRequest class.
            </summary>
            <param name="request">Original request.</param>
            <param name="hostRepository">Host repository.</param>
            <param name="regex">Regex manager.</param>
            <param name="guidFactory">Guid factory.</param>
            <param name="systemContext">The system context.</param>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest`1.RequestBodyObject">
            <summary>
            Gets or sets request body object.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequest`1.RequestBody">
            <summary>
            Gets or sets request body.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequestRepository">
            <summary>
            Default restful request repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequestRepository.hostRepository">
            <summary>
            Host repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequestRepository.regex">
            <summary>
            Regex manager.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequestRepository.configRepository">
            <summary>
            Config repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequestRepository.guidFactory">
            <summary>
            Guid factory.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequestRepository.systemContext">
            <summary>
            The system context.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequestRepository.httpContext">
            <summary>
            The HTTP context.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequestRepository.#ctor(Ctrip.Duckbill.Net.Host.IHostRepository,Ctrip.Duckbill.IRegex,Ctrip.Duckbill.RestClient.IRestfulServiceConfigRepository,Ctrip.Duckbill.IGuidFactory,Ctrip.Duckbill.Context.IRequestContext,Ctrip.Duckbill.Web.Context.IHttpContextRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequestRepository"/> class.
            </summary>
            <param name="hostRepository">The host repository.</param>
            <param name="regex">The regex.</param>
            <param name="configRepository">The configuration repository.</param>
            <param name="guidFactory">The unique identifier factory.</param>
            <param name="systemContext">The system context.</param>
            <param name="httpContext">The HTTP context.</param>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequestRepository.Create">
            <summary>
            Create new restful request.
            </summary>
            <returns>Restful request.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequestRepository.Create``1">
            <summary>
            Create new generic restful request.
            </summary>
            <typeparam name="TRequest">Type of request body.</typeparam>
            <returns>Restful request.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequestRepository.GetRequestFromConfiguration(System.String)">
            <summary>
            Get request from configuration.
            </summary>
            <param name="configuredResourceKey">Configured resource key.</param>
            <returns>Restful request.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.DefaultRestfulRequestRepository.GetRequestFromConfiguration``1(System.String)">
            <summary>
            Get generic request from configuration.
            </summary>
            <typeparam name="TRequest">Type of request body.</typeparam>
            <param name="configuredResourceKey">Configured resource key.</param>
            <returns>Restful request.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.Implement.RestoreFromCacheRestfulResponse">
            <summary>
            Cached restful response.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.RestoreFromCacheRestfulResponse.cachedResponse">
            <summary>
            Cached response.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.RestoreFromCacheRestfulResponse.#ctor(Ctrip.Duckbill.RestClient.IRestfulRequest,Ctrip.Duckbill.RestClient.IRestfulResponse)">
            <summary>
            Initializes a new instance of the RestoreFromCacheRestfulResponse class.
            </summary>
            <param name="request">Restful request.</param>
            <param name="cachedResponse">Cached response.</param>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.RestoreFromCacheRestfulResponse.Headers">
            <summary>
            Gets head collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.RestoreFromCacheRestfulResponse.RequestID">
            <summary>
            Gets request id.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.RestoreFromCacheRestfulResponse.RequestedUrl">
            <summary>
            Gets requested url.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.RestoreFromCacheRestfulResponse.IsSuccessStatusCode">
            <summary>
            Gets a value indicating whether the HTTP response was successful.
            </summary>
            <value>Returns System.Boolean.A value that indicates if the HTTP response was successful. True if System.Net.Http.HttpResponseMessage.StatusCode was in the range 200-299; otherwise false.</value>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.RestoreFromCacheRestfulResponse.StatusCode">
            <summary>
            Gets the status code of the HTTP response.
            </summary>
            <value>Returns System.Net.HttpStatusCode.The status code of the HTTP response.</value>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.RestoreFromCacheRestfulResponse.MessageCode">
            <summary>
            Gets the response code. Response code is defined as a business code.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.RestoreFromCacheRestfulResponse.ReasonPhrase">
            <summary>
            Gets the reason phrase which typically is sent by servers together with the status code.
            </summary>
            <value>Returns System.String.The reason phrase sent by the server.</value>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.RestoreFromCacheRestfulResponse.ResponseBodyBytes">
            <summary>
            Gets response body bytes.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.Implement.RestoreFromCacheRestfulResponse`1">
            <summary>
            Cached generic restful response.
            </summary>
            <typeparam name="TResponse">Type of response.</typeparam>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.Implement.RestoreFromCacheRestfulResponse`1.cachedResponse">
            <summary>
            Cached response.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.Implement.RestoreFromCacheRestfulResponse`1.#ctor(Ctrip.Duckbill.RestClient.IRestfulRequest,Ctrip.Duckbill.RestClient.IRestfulResponse{`0})">
            <summary>
            Initializes a new instance of the RestoreFromCacheRestfulResponse class.
            </summary>
            <param name="request">Restful request.</param>
            <param name="cachedResponse">Cached response.</param>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.RestoreFromCacheRestfulResponse`1.Headers">
            <summary>
            Gets head collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.RestoreFromCacheRestfulResponse`1.RequestID">
            <summary>
            Gets request id.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.RestoreFromCacheRestfulResponse`1.RequestedUrl">
            <summary>
            Gets requested url.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.RestoreFromCacheRestfulResponse`1.IsSuccessStatusCode">
            <summary>
            Gets a value indicating whether the HTTP response was successful.
            </summary>
            <value>Returns System.Boolean.A value that indicates if the HTTP response was successful. True if System.Net.Http.HttpResponseMessage.StatusCode was in the range 200-299; otherwise false.</value>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.RestoreFromCacheRestfulResponse`1.StatusCode">
            <summary>
            Gets the status code of the HTTP response.
            </summary>
            <value>Returns System.Net.HttpStatusCode.The status code of the HTTP response.</value>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.RestoreFromCacheRestfulResponse`1.MessageCode">
            <summary>
            Gets the response code. Response code is defined as a business code.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.RestoreFromCacheRestfulResponse`1.ReasonPhrase">
            <summary>
            Gets the reason phrase which typically is sent by servers together with the status code.
            </summary>
            <value>Returns System.String.The reason phrase sent by the server.</value>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.RestoreFromCacheRestfulResponse`1.ResponseBodyBytes">
            <summary>
            Gets response body bytes.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.Implement.RestoreFromCacheRestfulResponse`1.ResponseBody">
            <summary>
            Gets response body.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.IntraProcess.IIntraProcessRestfulClient">
            <summary>
            Intra-process restful client.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IntraProcess.IIntraProcessRestfulClient.Support(Ctrip.Duckbill.RestClient.IRestfulRequest)">
            <summary>
            Check whether support current request.
            </summary>
            <param name="request">Restful request.</param>
            <returns>True support false not.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IntraProcess.IIntraProcessRestfulClient.Send(Ctrip.Duckbill.RestClient.IRestfulRequest)">
            <summary>
            Send request sync.
            </summary>
            <param name="request">Restful request.</param>
            <returns>Restful response.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IntraProcess.IIntraProcessRestfulClient.Send``1(Ctrip.Duckbill.RestClient.IRestfulRequest)">
            <summary>
            Send request sync.
            </summary>
            <typeparam name="TResponse">Type of response body.</typeparam>
            <param name="request">Restful request.</param>
            <returns>Restful response.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IntraProcess.IIntraProcessRestfulClient.Send``1(Ctrip.Duckbill.RestClient.IRestfulRequest{``0})">
            <summary>
            Send request sync.
            </summary>
            <typeparam name="TRequest">Type of request body.</typeparam>
            <param name="request">Restful request.</param>
            <returns>Restful response.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IntraProcess.IIntraProcessRestfulClient.Send``2(Ctrip.Duckbill.RestClient.IRestfulRequest{``0})">
            <summary>
            Send request sync.
            </summary>
            <typeparam name="TRequest">Type of request body.</typeparam>
            <typeparam name="TResponse">Type of response body.</typeparam>
            <param name="request">Restful request.</param>
            <returns>Restful response.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.IRestfulClient">
            <summary>
            Restful client interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulClient.Create">
            <summary>
            Create new restful request.
            </summary>
            <returns>Restful request.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulClient.Create``1">
            <summary>
            Create new generic restful request.
            </summary>
            <typeparam name="TRequest">Type of request body.</typeparam>
            <returns>Restful request.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulClient.GetRequestFromConfiguration(System.String)">
            <summary>
            Get request from configuration.
            </summary>
            <param name="configuredResourceKey">Configured resource key.</param>
            <returns>Restful request.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulClient.GetRequestFromConfiguration``1(System.String)">
            <summary>
            Get generic request from configuration.
            </summary>
            <typeparam name="TRequest">Type of request body.</typeparam>
            <param name="configuredResourceKey">Configured resource key.</param>
            <returns>Restful request.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulClient.Send(Ctrip.Duckbill.RestClient.IRestfulRequest)">
            <summary>
            Send request sync.
            </summary>
            <param name="request">Restful request.</param>
            <returns>Restful response.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulClient.Send``1(Ctrip.Duckbill.RestClient.IRestfulRequest)">
            <summary>
            Send request sync.
            </summary>
            <typeparam name="TResponse">Type of response body.</typeparam>
            <param name="request">Restful request.</param>
            <returns>Restful response.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulClient.Send``1(Ctrip.Duckbill.RestClient.IRestfulRequest{``0})">
            <summary>
            Send request sync.
            </summary>
            <typeparam name="TRequest">Type of request body.</typeparam>
            <param name="request">Restful request.</param>
            <returns>Restful response.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulClient.Send``2(Ctrip.Duckbill.RestClient.IRestfulRequest{``0})">
            <summary>
            Send request sync.
            </summary>
            <typeparam name="TRequest">Type of request body.</typeparam>
            <typeparam name="TResponse">Type of response body.</typeparam>
            <param name="request">Restful request.</param>
            <returns>Restful response.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulClient.Send``1(System.String,System.Object[])">
            <summary>
            Sends the request by specified configured resource key.
            </summary>
            <typeparam name="TResponse">The type of the response body.</typeparam>
            <param name="configuredResourceKey">The configured resource key.</param>
            <param name="urlParameters">The URL parameters.</param>
            <returns>Generic restful response.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulClient.Send``2(System.String,``0,System.Object[])">
            <summary>
            Sends the request by specified configured resource key.
            </summary>
            <typeparam name="TRequest">The type of the request body.</typeparam>
            <typeparam name="TResponse">The type of the response body.</typeparam>
            <param name="configuredResourceKey">The configured resource key.</param>
            <param name="requestBody">The request body.</param>
            <param name="urlParameters">The URL parameters.</param>
            <returns>Generic restful response.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.IRestfulGetCache">
            <summary>
            Restful get cache.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulGetCache.Contains(Ctrip.Duckbill.RestClient.IRestfulRequest)">
            <summary>
            Check whether contains cached response of the request.
            </summary>
            <param name="request">Restful request.</param>
            <returns>True contains, false not.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulGetCache.Contains``1(Ctrip.Duckbill.RestClient.IRestfulRequest)">
            <summary>
            Check whether contains cached response of the request.
            </summary>
            <typeparam name="TResponse">Type of response.</typeparam>
            <param name="request">Restful request.</param>
            <returns>True contains, false not.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulGetCache.Cache(Ctrip.Duckbill.RestClient.IRestfulRequest,Ctrip.Duckbill.RestClient.IRestfulResponse)">
            <summary>
            Cache response.
            </summary>
            <param name="request">Restful request.</param>
            <param name="response">Restful response.</param>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulGetCache.Cache``1(Ctrip.Duckbill.RestClient.IRestfulRequest,Ctrip.Duckbill.RestClient.IRestfulResponse{``0})">
            <summary>
            Cache special type response.
            </summary>
            <typeparam name="TResponse">Type of response.</typeparam>
            <param name="request">Restful request.</param>
            <param name="response">Restful response.</param>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulGetCache.Get(Ctrip.Duckbill.RestClient.IRestfulRequest)">
            <summary>
            Get cached response.
            </summary>
            <param name="request">Restful request.</param>
            <returns>Cached response.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulGetCache.Get``1(Ctrip.Duckbill.RestClient.IRestfulRequest)">
            <summary>
            Get cached special type response.
            </summary>
            <typeparam name="TResponse">Type of response.</typeparam>
            <param name="request">Restful request.</param>
            <returns>Cached response.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.IRestfulInProcessVisitor">
            <summary>
            Restful in process visitor.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulInProcessVisitor.Send(Ctrip.Duckbill.RestClient.IRestfulRequest)">
            <summary>
            Send request sync.
            </summary>
            <param name="request">Restful request.</param>
            <returns>Restful response.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulInProcessVisitor.Send``1(Ctrip.Duckbill.RestClient.IRestfulRequest)">
            <summary>
            Send request sync.
            </summary>
            <typeparam name="TResponse">Type of response body.</typeparam>
            <param name="request">Restful request.</param>
            <returns>Restful response.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulInProcessVisitor.Send``1(Ctrip.Duckbill.RestClient.IRestfulRequest{``0})">
            <summary>
            Send request sync.
            </summary>
            <typeparam name="TRequest">Type of request body.</typeparam>
            <param name="request">Restful request.</param>
            <returns>Restful response.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulInProcessVisitor.Send``2(Ctrip.Duckbill.RestClient.IRestfulRequest{``0})">
            <summary>
            Send request sync.
            </summary>
            <typeparam name="TRequest">Type of request body.</typeparam>
            <typeparam name="TResponse">Type of response body.</typeparam>
            <param name="request">Restful request.</param>
            <returns>Restful response.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.IRestfulRequest">
            <summary>
            Restful request.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulRequest.ID">
            <summary>
            Gets or sets restful request id.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulRequest.Verb">
            <summary>
            Gets or sets http verb.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulRequest.UrlFormat">
            <summary>
            Gets or sets url format.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulRequest.Path">
            <summary>
            Gets final resource path.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulRequest.QueryString">
            <summary>
            Gets final resource query string.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulRequest.ExceptHostUrl">
            <summary>
            Gets except host url.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulRequest.Host">
            <summary>
            Gets or sets main host.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulRequest.Url">
            <summary>
            Gets complete url.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulRequest.BackupHosts">
            <summary>
            Gets backup hosts.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulRequest.BackupUrl">
            <summary>
            Gets complete backup urls.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulRequest.UrlParameters">
            <summary>
            Gets url parameter collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulRequest.Headers">
            <summary>
            Gets head collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulRequest.Cookies">
            <summary>
            Gets cookie collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulRequest.MaxResponseSize">
            <summary>
            Gets or sets max response size.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulRequest.Timeout">
            <summary>
            Gets or sets a timespan that cookie will expires after it.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulRequest.AbsoluteCacheTime">
            <summary>
            Gets or sets absolute cache time.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulRequest.SlidingCacheTime">
            <summary>
            Gets or sets sliding cache time.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulRequest.MaxRetryTimes">
            <summary>
            Gets or sets max retry times.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulRequest.TryMainHostTimes">
            <summary>
            Gets or sets try main host times.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulRequest.RequestBodyObject">
            <summary>
            Gets or sets request body object.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulRequest.AddBackupHost(System.String)">
            <summary>
            Add backup host.
            </summary>
            <param name="hostName">Restful resource host.</param>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulRequest.SetUrlParameter(System.String,System.Object)">
            <summary>
            Add or update url parameter.
            </summary>
            <param name="name">Url parameter name.</param>
            <param name="value">Url parameter value.</param>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulRequest.SetHeader(System.String,System.Object)">
            <summary>
            Add or update header.
            </summary>
            <param name="name">Header name.</param>
            <param name="value">Header value.</param>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulRequest.SetCookie(System.Web.HttpCookie)">
            <summary>
            Add or update cookie.
            </summary>
            <param name="cookie">Cookie item.</param>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.IRestfulRequest`1">
            <summary>
            Generic restful request.
            </summary>
            <typeparam name="TRequest">Type of request body.</typeparam>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulRequest`1.RequestBody">
            <summary>
            Gets or sets request body.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.IRestfulResponse">
            <summary>
            Restful response interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulResponse.Headers">
            <summary>
            Gets head collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulResponse.RequestID">
            <summary>
            Gets request id.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulResponse.RequestedUrl">
            <summary>
            Gets requested url.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulResponse.IsSuccessStatusCode">
            <summary>
            Gets a value indicating whether the HTTP response was successful.
            </summary>
            <value>Returns System.Boolean.A value that indicates if the HTTP response was successful. True if System.Net.Http.HttpResponseMessage.StatusCode was in the range 200-299; otherwise false.</value>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulResponse.StatusCode">
            <summary>
            Gets the status code of the HTTP response.
            </summary>
            <value>Returns System.Net.HttpStatusCode.The status code of the HTTP response.</value>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulResponse.MessageCode">
            <summary>
            Gets the response message code. Message code is defined as a business code.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulResponse.ReasonPhrase">
            <summary>
            Gets the reason phrase which typically is sent by servers together with the status code.
            </summary>
            <value>Returns System.String.The reason phrase sent by the server.</value>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulResponse.ResponseBodyBytes">
            <summary>
            Gets response body bytes.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.IRestfulResponse`1">
            <summary>
            Restful response interface.
            </summary>
            <typeparam name="TResponse">Type of response body.</typeparam>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulResponse`1.ResponseBody">
            <summary>
            Gets response body.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.IRestfulServiceConfigRepository">
            <summary>
            Restful service config repository.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulServiceConfigRepository.EnableRequestLog">
            <summary>
            Gets a value indicating whether request log is enable.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulServiceConfigRepository.EnableResponseLog">
            <summary>
            Gets a value indicating whether response log is enable.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulServiceConfigRepository.DefaultAbsoluteCacheTime">
            <summary>
            Gets default absolute cache time.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulServiceConfigRepository.DefaultSlidingCacheTime">
            <summary>
            Gets default sliding cache time.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulServiceConfigRepository.GetResource(System.String)">
            <summary>
            Get restful service resource unit.
            </summary>
            <param name="resourceKey">Resource key.</param>
            <returns>Restful service resource unit.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulServiceConfigRepository.GetSetting(System.String)">
            <summary>
            Get restful service setting unit.
            </summary>
            <param name="settingKey">Setting key.</param>
            <returns>Restfu service setting unit.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulServiceConfigRepository.GetDefaultTimeout">
            <summary>
            Get default timeout.
            </summary>
            <returns>Default timeout.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulServiceConfigRepository.GetDefaultMaxResponseSize">
            <summary>
            Get default max response size.
            </summary>
            <returns>Default response size.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulServiceConfigRepository.GetMaxRetryTimes">
            <summary>
            Get max retry times.
            </summary>
            <returns>Max retry times.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulServiceConfigRepository.GetTryMainHostTimes">
            <summary>
            Get try main host times.
            </summary>
            <returns>Try main host times.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulServiceConfigRepository.GetResourceByUrl(System.String)">
            <summary>
            Get restful service resource unit.
            </summary>
            <param name="url">Resource url.</param>
            <returns>Restful service resource unite.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulServiceConfigRepository.GetCommonSettings">
            <summary>
            Gets the common settings.
            </summary>
            <returns>Common setting collection.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.IRestfulServiceResourceUnit">
            <summary>
            Restful service resource unit.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulServiceResourceUnit.Key">
            <summary>
            Gets resource key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulServiceResourceUnit.Verb">
            <summary>
            Gets http verb.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulServiceResourceUnit.Url">
            <summary>
            Gets url.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulServiceResourceUnit.MaxResponseSize">
            <summary>
            Gets max response size.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulServiceResourceUnit.Timeout">
            <summary>
            Gets a timespan that cookie will expires after it.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulServiceResourceUnit.AbsoluteCacheTime">
            <summary>
            Gets absolute cache time.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulServiceResourceUnit.SlidingCacheTime">
            <summary>
            Gets sliding cache time.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulServiceResourceUnit.MaxRetryTimes">
            <summary>
            Gets max retry times.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulServiceResourceUnit.TryMainHostTimes">
            <summary>
            Gets try main host times.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulServiceResourceUnit.Host">
            <summary>
            Gets main host.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulServiceResourceUnit.BackupHosts">
            <summary>
            Gets backup host.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulServiceResourceUnit.UrlParameters">
            <summary>
            Gets url parameter collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulServiceResourceUnit.Headers">
            <summary>
            Gets head collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulServiceResourceUnit.Cookies">
            <summary>
            Gets cookie collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulServiceResourceUnit.Dynamics">
            <summary>
            Gets the dynamics.
            </summary>
            <value>The dynamics.</value>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulServiceResourceUnit.Settings">
            <summary>
            Gets setting collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.IRestfulServiceSettingUnit">
            <summary>
            Restful service setting unit.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulServiceSettingUnit.Key">
            <summary>
            Gets setting key.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulServiceSettingUnit.MaxResponseSize">
            <summary>
            Gets max response size.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulServiceSettingUnit.Timeout">
            <summary>
            Gets a timespan that cookie will expires after it.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulServiceSettingUnit.AbsoluteCacheTime">
            <summary>
            Gets absolute cache time.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulServiceSettingUnit.SlidingCacheTime">
            <summary>
            Gets sliding cache time.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulServiceSettingUnit.MaxRetryTimes">
            <summary>
            Gets max retry times.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulServiceSettingUnit.TryMainHostTimes">
            <summary>
            Gets try main host times.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulServiceSettingUnit.Host">
            <summary>
            Gets main host.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulServiceSettingUnit.BackupHosts">
            <summary>
            Gets backup hosts collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulServiceSettingUnit.UrlParameters">
            <summary>
            Gets url parameter collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulServiceSettingUnit.Headers">
            <summary>
            Gets head unit collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulServiceSettingUnit.Cookies">
            <summary>
            Gets cookie unit collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IRestfulServiceSettingUnit.Dynamics">
            <summary>
            Gets the dynamics.
            </summary>
            <value>The dynamics.</value>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.IRestfulRequestRepository">
            <summary>
            Restful request repository interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulRequestRepository.Create">
            <summary>
            Create new restful request.
            </summary>
            <returns>Restful request.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulRequestRepository.Create``1">
            <summary>
            Create new generic restful request.
            </summary>
            <typeparam name="TRequest">Type of request body.</typeparam>
            <returns>Restful request.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulRequestRepository.GetRequestFromConfiguration(System.String)">
            <summary>
            Get request from configuration.
            </summary>
            <param name="configuredResourceKey">Configured resource key.</param>
            <returns>Restful request.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.RestClient.IRestfulRequestRepository.GetRequestFromConfiguration``1(System.String)">
            <summary>
            Get generic request from configuration.
            </summary>
            <typeparam name="TRequest">Type of request body.</typeparam>
            <param name="configuredResourceKey">Configured resource key.</param>
            <returns>Restful request.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.IUrlParameterUnit">
            <summary>
            Url parameter unit.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IUrlParameterUnit.Name">
            <summary>
            Gets default setting item field.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IUrlParameterUnit.Value">
            <summary>
            Gets default setting item value.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.RestClient.IUrlParameterUnit.IsRemove">
            <summary>
            Gets a value indicating whether this instance is remove.
            </summary>
            <value><c>true</c> if this instance is remove; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Ctrip.Duckbill.RestClient.VerbType">
            <summary>
            Verb Type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.VerbType.Get">
            <summary>
            Get Verb.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.VerbType.Post">
            <summary>
            Post Verb.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.VerbType.Put">
            <summary>
             Put Verb.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.RestClient.VerbType.Delete">
            <summary>
            Delete Verb.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Serialization.ISerializer">
            <summary>
            Serialize object or reversion.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.ISerializer.SerializeToStream(System.IO.Stream@,System.Object)">
            <summary>
            Serialize object to stream.
            </summary>
            <param name="stream">Object stream.</param>
            <param name="obj">Requested object.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.ISerializer.DeserializeFromStream(System.IO.Stream,System.Type,System.Object@)">
            <summary>
            Deserialize object from stream.
            </summary>
            <param name="stream">Stream which contained object.</param>
            <param name="type">Object type.</param>
            <param name="obj">Recovered object.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.ISerializer.SerializeObjectToBytes(System.Object)">
            <summary>
            Serialize object to bytes.
            </summary>
            <param name="obj">Requested object.</param>
            <returns>Bytes array.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.ISerializer.DeserializeObjectFromBytes(System.Byte[],System.Type)">
            <summary>
            Deserialize object from bytes.
            </summary>
            <param name="bytes">Requested bytes.</param>
            <param name="type">Object type.</param>
            <returns>Object instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.ISerializer.SerializeToBytes``1(``0)">
            <summary>
            Serialize object to bytes.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="obj">Requested object.</param>
            <returns>Bytes array.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.ISerializer.DeserializeFromBytes``1(System.Byte[])">
            <summary>
            Deserialize object from bytes.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="bytes">Requested bytes.</param>
            <returns>Object instance.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Serialization.ITextSerializer">
            <summary>
            Serialize object to text or reversion.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Serialization.ITextSerializer.Base64">
            <summary>
            Gets or sets a value indicating whether to base 64 encoding the text.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Serialization.ITextSerializer.Encoding">
            <summary>
            Gets or sets the type of text encoding to use.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.ITextSerializer.SerializeObjectToText(System.Object)">
            <summary>
            Serialize object to text.
            </summary>
            <param name="obj">Requested object.</param>
            <returns>Text content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.ITextSerializer.DeserializeObjectFromText(System.String,System.Type)">
            <summary>
            Deserialize object from text.
            </summary>
            <param name="value">Text content.</param>
            <param name="type">Object type.</param>
            <returns>Object instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.ITextSerializer.SerializeToText``1(``0)">
            <summary>
            Serialize object to text.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="obj">Requested object.</param>
            <returns>Text content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.ITextSerializer.DeserializeFromText``1(System.String)">
            <summary>
            Deserialize object from text.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="value">Text content.</param>
            <returns>Object instance.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Serialization.Json.Implement.DataContractJsonSerializerWrapper">
            <summary>
            Data contract json serializer.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Serialization.Json.Implement.DataContractJsonSerializerWrapper.streamUtility">
            <summary>
            The stream utility.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Serialization.Json.Implement.DataContractJsonSerializerWrapper.myEncoding">
            <summary>
            Json serializer encoding field.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Json.Implement.DataContractJsonSerializerWrapper.#ctor(Ctrip.Duckbill.IO.IStreamUtility)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Serialization.Json.Implement.DataContractJsonSerializerWrapper"/> class.
            </summary>
            <param name="streamUtility">The stream utility.</param>
        </member>
        <member name="P:Ctrip.Duckbill.Serialization.Json.Implement.DataContractJsonSerializerWrapper.Encoding">
            <summary>
            Gets or sets the type of text encoding to use.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Serialization.Json.Implement.DataContractJsonSerializerWrapper.Base64">
            <summary>
            Gets or sets a value indicating whether to base 64 encoding the text.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Json.Implement.DataContractJsonSerializerWrapper.SerializeToStream(System.IO.Stream@,System.Object)">
            <summary>
            Serialize object to stream.
            </summary>
            <param name="stream">Object stream.</param>
            <param name="obj">Requested object.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Json.Implement.DataContractJsonSerializerWrapper.DeserializeFromStream(System.IO.Stream,System.Type,System.Object@)">
            <summary>
            Deserialize object from stream.
            </summary>
            <param name="stream">Stream which contained object.</param>
            <param name="type">Object type.</param>
            <param name="obj">Recovered object.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Json.Implement.DataContractJsonSerializerWrapper.SerializeObjectToBytes(System.Object)">
            <summary>
            Serialize object to bytes.
            </summary>
            <param name="obj">Requested object.</param>
            <returns>Bytes array.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Json.Implement.DataContractJsonSerializerWrapper.DeserializeObjectFromBytes(System.Byte[],System.Type)">
            <summary>
            Deserialize object from bytes.
            </summary>
            <param name="bytes">Requested bytes.</param>
            <param name="type">Object type.</param>
            <returns>Object instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Json.Implement.DataContractJsonSerializerWrapper.SerializeToBytes``1(``0)">
            <summary>
            Serialize object to bytes.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="obj">Requested object.</param>
            <returns>Bytes array.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Json.Implement.DataContractJsonSerializerWrapper.DeserializeFromBytes``1(System.Byte[])">
            <summary>
            Deserialize object from bytes.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="bytes">Requested bytes.</param>
            <returns>Object instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Json.Implement.DataContractJsonSerializerWrapper.SerializeObjectToText(System.Object)">
            <summary>
            Serialize object to text.
            </summary>
            <param name="obj">Requested object.</param>
            <returns>Text content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Json.Implement.DataContractJsonSerializerWrapper.DeserializeObjectFromText(System.String,System.Type)">
            <summary>
            Deserialize object from text.
            </summary>
            <param name="value">Text content.</param>
            <param name="type">Object type.</param>
            <returns>Object instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Json.Implement.DataContractJsonSerializerWrapper.SerializeToText``1(``0)">
            <summary>
            Serialize object to text.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="obj">Requested object.</param>
            <returns>Text content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Json.Implement.DataContractJsonSerializerWrapper.DeserializeFromText``1(System.String)">
            <summary>
            Deserialize object from text.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="value">Requested bytes.</param>
            <returns>Text content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Json.Implement.DataContractJsonSerializerWrapper.SerializeObjectToJson(System.Object)">
            <summary>
            Serialize object to json.
            </summary>
            <param name="obj">Requested object.</param>
            <returns>Json content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Json.Implement.DataContractJsonSerializerWrapper.DeserializeObjectFromJson(System.String,System.Type)">
            <summary>
            Deserialize object from json.
            </summary>
            <param name="value">Json content.</param>
            <param name="type">Object type.</param>
            <returns>Object instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Json.Implement.DataContractJsonSerializerWrapper.SerializeToJson``1(``0)">
            <summary>
            Serialize object to json.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="obj">Requested object.</param>
            <returns>Json content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Json.Implement.DataContractJsonSerializerWrapper.DeserializeFromJson``1(System.String)">
            <summary>
            Deserialize object from json.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="value">Json content.</param>
            <returns>Object instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Json.Implement.DataContractJsonSerializerWrapper.SetDateTimeToUTC(System.Object)">
            <summary>
            Set datetime to utc.
            </summary>
            <param name="obj">Parameter of object.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Serialization.IDataContractJsonSerializer">
            <summary>
            Data contract json serializer interface.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Serialization.IJsonSerializer">
            <summary>
            Json serializer interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.IJsonSerializer.SerializeObjectToJson(System.Object)">
            <summary>
            Serialize object to json.
            </summary>
            <param name="obj">Requested object.</param>
            <returns>Json content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.IJsonSerializer.DeserializeObjectFromJson(System.String,System.Type)">
            <summary>
            Deserialize object from json.
            </summary>
            <param name="value">Json content.</param>
            <param name="type">Object type.</param>
            <returns>Object instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.IJsonSerializer.SerializeToJson``1(``0)">
            <summary>
            Serialize object to json.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="obj">Requested object.</param>
            <returns>Json content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.IJsonSerializer.DeserializeFromJson``1(System.String)">
            <summary>
            Deserialize object from json.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="value">Json content.</param>
            <returns>Object instance.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Serialization.IProtocolBuffersSerializer">
            <summary>
            Protocal buffers serializer.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Serialization.Xml.Implement.DataContractXmlSerializer">
            <summary>
            Data contract json serializer.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Serialization.Xml.Implement.DataContractXmlSerializer.streamUtility">
            <summary>
            The stream utility.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Serialization.Xml.Implement.DataContractXmlSerializer.myEncoding">
            <summary>
            Json serializer encoding field.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Xml.Implement.DataContractXmlSerializer.#ctor(Ctrip.Duckbill.IO.IStreamUtility)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Serialization.Xml.Implement.DataContractXmlSerializer"/> class.
            </summary>
            <param name="streamUtility">The stream utility.</param>
        </member>
        <member name="P:Ctrip.Duckbill.Serialization.Xml.Implement.DataContractXmlSerializer.Encoding">
            <summary>
            Gets or sets the type of text encoding to use.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Serialization.Xml.Implement.DataContractXmlSerializer.Base64">
            <summary>
            Gets or sets a value indicating whether to base 64 encoding the text.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Serialization.Xml.Implement.DataContractXmlSerializer.OmitXmlDeclaration">
            <summary>
            Gets or sets a value indicating whether to omit an XML declaration.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Serialization.Xml.Implement.DataContractXmlSerializer.Indent">
            <summary>
            Gets or sets a value indicating whether to indent elements.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Xml.Implement.DataContractXmlSerializer.SerializeToStream(System.IO.Stream@,System.Object)">
            <summary>
            Serialize object to stream.
            </summary>
            <param name="stream">Object stream.</param>
            <param name="obj">Requested object.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Xml.Implement.DataContractXmlSerializer.DeserializeFromStream(System.IO.Stream,System.Type,System.Object@)">
            <summary>
            Deserialize object from stream.
            </summary>
            <param name="stream">Stream which contained object.</param>
            <param name="type">Object type.</param>
            <param name="obj">Recovered object.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Xml.Implement.DataContractXmlSerializer.SerializeObjectToBytes(System.Object)">
            <summary>
            Serialize object to bytes.
            </summary>
            <param name="obj">Requested object.</param>
            <returns>Bytes array.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Xml.Implement.DataContractXmlSerializer.DeserializeObjectFromBytes(System.Byte[],System.Type)">
            <summary>
            Deserialize object from bytes.
            </summary>
            <param name="bytes">Requested bytes.</param>
            <param name="type">Object type.</param>
            <returns>Object instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Xml.Implement.DataContractXmlSerializer.SerializeToBytes``1(``0)">
            <summary>
            Serialize object to bytes.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="obj">Requested object.</param>
            <returns>Bytes array.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Xml.Implement.DataContractXmlSerializer.DeserializeFromBytes``1(System.Byte[])">
            <summary>
            Deserialize object from bytes.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="bytes">Requested bytes.</param>
            <returns>Object instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Xml.Implement.DataContractXmlSerializer.SerializeObjectToText(System.Object)">
            <summary>
            Serialize object to text.
            </summary>
            <param name="obj">Requested object.</param>
            <returns>Text content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Xml.Implement.DataContractXmlSerializer.DeserializeObjectFromText(System.String,System.Type)">
            <summary>
            Deserialize object from text.
            </summary>
            <param name="value">Text content.</param>
            <param name="type">Object type.</param>
            <returns>Object instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Xml.Implement.DataContractXmlSerializer.SerializeToText``1(``0)">
            <summary>
            Serialize object to text.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="obj">Requested object.</param>
            <returns>Text content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Xml.Implement.DataContractXmlSerializer.DeserializeFromText``1(System.String)">
            <summary>
            Deserialize object from text.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="value">Requested bytes.</param>
            <returns>Text content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Xml.Implement.DataContractXmlSerializer.SerializeObjectToXml(System.Object)">
            <summary>
            Serialize object to xml.
            </summary>
            <param name="obj">Requested object.</param>
            <returns>Xml content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Xml.Implement.DataContractXmlSerializer.DeserializeObjectFromXml(System.String,System.Type)">
            <summary>
            Deserialize object from xml.
            </summary>
            <param name="value">Xml content.</param>
            <param name="type">Object type.</param>
            <returns>Object instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Xml.Implement.DataContractXmlSerializer.SerializeToXml``1(``0)">
            <summary>
            Serialize object to xml.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="obj">Requested object.</param>
            <returns>Xml content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Xml.Implement.DataContractXmlSerializer.DeserializeFromXml``1(System.String)">
            <summary>
            Deserialize object from xml.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="value">Xml content.</param>
            <returns>Object instance.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Serialization.Xml.Implement.DefaultOriginalXmlSerializer">
            <summary>
            Default orignial xml serializer.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Serialization.Xml.Implement.DefaultOriginalXmlSerializer.streamUtility">
            <summary>
            The stream utility.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Serialization.Xml.Implement.DefaultOriginalXmlSerializer.myReaderQuotas">
            <summary>
            Reader quotas.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Serialization.Xml.Implement.DefaultOriginalXmlSerializer.myEncoding">
            <summary>
            Field of encoding.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Xml.Implement.DefaultOriginalXmlSerializer.#ctor(Ctrip.Duckbill.IO.IStreamUtility)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Serialization.Xml.Implement.DefaultOriginalXmlSerializer"/> class.
            </summary>
            <param name="streamUtility">The stream utility.</param>
        </member>
        <member name="P:Ctrip.Duckbill.Serialization.Xml.Implement.DefaultOriginalXmlSerializer.Base64">
            <summary>
            Gets or sets a value indicating whether to base 64 encoding the text.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Serialization.Xml.Implement.DefaultOriginalXmlSerializer.OmitXmlDeclaration">
            <summary>
            Gets or sets a value indicating whether to omit an XML declaration.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Serialization.Xml.Implement.DefaultOriginalXmlSerializer.Indent">
            <summary>
            Gets or sets a value indicating whether to indent elements.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Serialization.Xml.Implement.DefaultOriginalXmlSerializer.Encoding">
            <summary>
            Gets or sets the type of text encoding to use.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Xml.Implement.DefaultOriginalXmlSerializer.SerializeToStream(System.IO.Stream@,System.Object)">
            <summary>
            Serialize object to stream.
            </summary>
            <param name="stream">Object stream.</param>
            <param name="obj">Requested object.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Xml.Implement.DefaultOriginalXmlSerializer.DeserializeFromStream(System.IO.Stream,System.Type,System.Object@)">
            <summary>
            Deserialize object from stream.
            </summary>
            <param name="stream">Stream which contained object.</param>
            <param name="type">Object type.</param>
            <param name="obj">Recovered object.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Xml.Implement.DefaultOriginalXmlSerializer.SerializeObjectToBytes(System.Object)">
            <summary>
            Serialize object to bytes.
            </summary>
            <param name="obj">Requested object.</param>
            <returns>Bytes array.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Xml.Implement.DefaultOriginalXmlSerializer.DeserializeObjectFromBytes(System.Byte[],System.Type)">
            <summary>
            Deserialize object from bytes.
            </summary>
            <param name="bytes">Requested bytes.</param>
            <param name="type">Object type.</param>
            <returns>Object instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Xml.Implement.DefaultOriginalXmlSerializer.SerializeToBytes``1(``0)">
            <summary>
            Serialize object to bytes.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="obj">Requested object.</param>
            <returns>Bytes array.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Xml.Implement.DefaultOriginalXmlSerializer.DeserializeFromBytes``1(System.Byte[])">
            <summary>
            Deserialize object from bytes.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="bytes">Requested bytes.</param>
            <returns>Object instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Xml.Implement.DefaultOriginalXmlSerializer.SerializeObjectToText(System.Object)">
            <summary>
            Serialize object to text.
            </summary>
            <param name="obj">Requested object.</param>
            <returns>Text content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Xml.Implement.DefaultOriginalXmlSerializer.DeserializeObjectFromText(System.String,System.Type)">
            <summary>
            Deserialize object from text.
            </summary>
            <param name="value">Text content.</param>
            <param name="type">Object type.</param>
            <returns>Object instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Xml.Implement.DefaultOriginalXmlSerializer.SerializeToText``1(``0)">
            <summary>
            Serialize object to text.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="obj">Requested object.</param>
            <returns>Text content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Xml.Implement.DefaultOriginalXmlSerializer.DeserializeFromText``1(System.String)">
            <summary>
            Deserialize object from text.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="value">Requested bytes.</param>
            <returns>Text content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Xml.Implement.DefaultOriginalXmlSerializer.SerializeObjectToXml(System.Object)">
            <summary>
            Serialize object to xml.
            </summary>
            <param name="obj">Requested object.</param>
            <returns>Xml content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Xml.Implement.DefaultOriginalXmlSerializer.DeserializeObjectFromXml(System.String,System.Type)">
            <summary>
            Deserialize object from xml.
            </summary>
            <param name="value">Xml content.</param>
            <param name="type">Object type.</param>
            <returns>Object instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Xml.Implement.DefaultOriginalXmlSerializer.SerializeToXml``1(``0)">
            <summary>
            Serialize object to xml.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="obj">Requested object.</param>
            <returns>Xml content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Xml.Implement.DefaultOriginalXmlSerializer.DeserializeFromXml``1(System.String)">
            <summary>
            Deserialize object from xml.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="value">Xml content.</param>
            <returns>Object instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.Xml.Implement.DefaultOriginalXmlSerializer.CreateDefaultReaderQuotas">
            <summary>
            Create a default reader quotas with a default depth quota of 1K.
            </summary>
            <returns>Reader quotas.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Serialization.IDataContractXmlSerializer">
            <summary>
            Data contract xml serializer interface.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Serialization.IOriginalXMLSerializer">
            <summary>
            Dotnet original xml serializer.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Serialization.IXmlSerializer">
            <summary>
            Serialize object to XML or reversion.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Serialization.IXmlSerializer.OmitXmlDeclaration">
            <summary>
            Gets or sets a value indicating whether to omit an XML declaration.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Serialization.IXmlSerializer.Indent">
            <summary>
            Gets or sets a value indicating whether to indent elements.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.IXmlSerializer.SerializeObjectToXml(System.Object)">
            <summary>
            Serialize object to xml.
            </summary>
            <param name="obj">Requested object.</param>
            <returns>Xml content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.IXmlSerializer.DeserializeObjectFromXml(System.String,System.Type)">
            <summary>
            Deserialize object from xml.
            </summary>
            <param name="value">Xml content.</param>
            <param name="type">Object type.</param>
            <returns>Object instance.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.IXmlSerializer.SerializeToXml``1(``0)">
            <summary>
            Serialize object to xml.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="obj">Requested object.</param>
            <returns>Xml content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Serialization.IXmlSerializer.DeserializeFromXml``1(System.String)">
            <summary>
            Deserialize object from xml.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="value">Xml content.</param>
            <returns>Object instance.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Servers.Implement.Configuration.ServerDatabaseCollection">
            <summary>
            Server database collection.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Servers.Implement.Configuration.ServerDatabaseCollection.Collection">
            <summary>
            Gets or sets servers collection.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Servers.Implement.Configuration.ServerDatabaseUnit">
            <summary>
            Server database configuration.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Servers.Implement.Configuration.ServerDatabaseUnit.Name">
            <summary>
            Gets or sets server name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Servers.Implement.Configuration.ServerDatabaseUnit.Database">
            <summary>
            Gets or sets server name.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Servers.Implement.Configuration.ServersDatabasesConfig">
            <summary>
            Servers database config.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Servers.Implement.Configuration.ServersDatabasesConfig.Servers">
            <summary>
            Gets or sets servers.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Servers.Implement.DefaultServersDatabaseRepository">
            <summary>
            Default servers database repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Servers.Implement.DefaultServersDatabaseRepository.configurationAccessor">
            <summary>
            Configuration manager.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Servers.Implement.DefaultServersDatabaseRepository.currentEnvironment">
            <summary>
            Current environment.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Servers.Implement.DefaultServersDatabaseRepository.#ctor(Ctrip.Duckbill.Configuration.IConfigurationAccessor,Ctrip.Duckbill.ICurrentEnvironment)">
            <summary>
            Initializes a new instance of the DefaultServersDatabaseRepository class.
            </summary>
            <param name="configurationAccessor">Configuration manager.</param>
            <param name="currentEnvironment">Current environment.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Servers.Implement.DefaultServersDatabaseRepository.GetCurrentServerDatabase">
            <summary>
            Get current server database.
            </summary>
            <returns>Database name.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Servers.IServerDatabaseUnit">
            <summary>
            Server database unit interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Servers.IServerDatabaseUnit.Name">
            <summary>
            Gets server name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Servers.IServerDatabaseUnit.Database">
            <summary>
            Gets querid db.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Servers.IServersDatabaseRepository">
            <summary>
            Servers database repository.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Servers.IServersDatabaseRepository.GetCurrentServerDatabase">
            <summary>
            Get current server database.
            </summary>
            <returns>Database name.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.SOA.IServiceAgent">
            <summary>
            Service agent.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.SOA.IServiceAgent.Request``2(System.String,``0)">
            <summary>
            Requests the service.
            </summary>
            <typeparam name="TRequest">The type of the t request.</typeparam>
            <typeparam name="TResponse">The type of the t response.</typeparam>
            <param name="name">The name.</param>
            <param name="request">The request.</param>
            <returns>The response.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Test.Configuration.Implement.TestConfig">
            <summary>
            Test configuration.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Configuration.Implement.TestConfig.VSTestConsolePath">
            <summary>
            Gets or sets "VSTest.Console.exe" path.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Configuration.Implement.TestConfig.ExcludeFromCodeCoverageModules">
            <summary>
            Gets or sets the exclude from code coverage modules.
            </summary>
            <value>The exclude from code coverage modules.</value>
        </member>
        <member name="T:Ctrip.Duckbill.Test.Configuration.Implement.TestConfigurationRepository">
            <summary>
            Test configuration repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.Configuration.Implement.TestConfigurationRepository.configurationAccessor">
            <summary>
            The configuration manager.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.Configuration.Implement.TestConfigurationRepository.staticPath">
            <summary>
            The static path.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.Configuration.Implement.TestConfigurationRepository.currentAppDomain">
            <summary>
            The application domain.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Configuration.Implement.TestConfigurationRepository.#ctor(Ctrip.Duckbill.Configuration.IConfigurationAccessor,Ctrip.Duckbill.IO.IStaticPath,Ctrip.Duckbill.ICurrentAppDomain)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Test.Configuration.Implement.TestConfigurationRepository" /> class.
            </summary>
            <param name="configurationAccessor">The configuration manager.</param>
            <param name="staticPath">The static path.</param>
            <param name="currentAppDomain">The current application domain.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Configuration.Implement.TestConfigurationRepository.GetVSTestConsolePath">
            <summary>
            Gets the "VSTest.Console.exe" path.
            </summary>
            <returns>VSTest.Console.exe path.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Configuration.Implement.TestConfigurationRepository.IsExcludeFromCodeCoverageModules(System.String)">
            <summary>
            Determines whether [is exclude from code coverage modules] [the specified module name].
            </summary>
            <param name="moduleName">Name of the module.</param>
            <returns><c>true</c> if [is exclude from code coverage modules] [the specified module name]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Configuration.Implement.TestConfigurationRepository.GetConfiguration">
            <summary>
            Gets the configuration.
            </summary>
            <returns>Test config.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Test.Configuration.ITestConfigurationRepository">
            <summary>
            Test configuration repository.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Configuration.ITestConfigurationRepository.GetVSTestConsolePath">
            <summary>
            Gets the "VSTest.Console.exe" path.
            </summary>
            <returns>VSTest.Console.exe path.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Configuration.ITestConfigurationRepository.IsExcludeFromCodeCoverageModules(System.String)">
            <summary>
            Determines whether [is exclude from code coverage modules] [the specified module name].
            </summary>
            <param name="moduleName">Name of the module.</param>
            <returns><c>true</c> if [is exclude from code coverage modules] [the specified module name]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Test.Coverage.IClassCoverage">
            <summary>
            Class coverage interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.IClassCoverage.ClassName">
            <summary>
            Gets the name of the class.
            </summary>
            <value>The name of the class.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.IClassCoverage.Namespace">
            <summary>
            Gets the namespace.
            </summary>
            <value>The namespace.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.IClassCoverage.ModuleName">
            <summary>
            Gets the name of the module.
            </summary>
            <value>The name of the module.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.IClassCoverage.BlocksCovered">
            <summary>
            Gets the blocks covered.
            </summary>
            <value>The blocks covered.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.IClassCoverage.BlocksNotCovered">
            <summary>
            Gets the blocks not covered.
            </summary>
            <value>The blocks not covered.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.IClassCoverage.CoveredRate">
            <summary>
            Gets the covered rate.
            </summary>
            <value>The covered rate.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.IClassCoverage.LinesCovered">
            <summary>
            Gets the lines covered.
            </summary>
            <value>The lines covered.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.IClassCoverage.LinesPartiallyCovered">
            <summary>
            Gets the lines partially covered.
            </summary>
            <value>The lines partially covered.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.IClassCoverage.LinesNotCovered">
            <summary>
            Gets the lines not covered.
            </summary>
            <value>The lines not covered.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.IClassCoverage.MethodsCoverages">
            <summary>
            Gets the methods coverages.
            </summary>
            <value>The methods coverages.</value>
        </member>
        <member name="T:Ctrip.Duckbill.Test.Coverage.IMethodCoverage">
            <summary>
            Method coverage interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.IMethodCoverage.MethodName">
            <summary>
            Gets the method name.
            </summary>
            <value>The method name.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.IMethodCoverage.ClassName">
            <summary>
            Gets the name of the class.
            </summary>
            <value>The name of the class.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.IMethodCoverage.Namespace">
            <summary>
            Gets the namespace.
            </summary>
            <value>The namespace.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.IMethodCoverage.ModuleName">
            <summary>
            Gets the name of the module.
            </summary>
            <value>The name of the module.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.IMethodCoverage.BlocksCovered">
            <summary>
            Gets the blocks covered.
            </summary>
            <value>The blocks covered.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.IMethodCoverage.BlocksNotCovered">
            <summary>
            Gets the blocks not covered.
            </summary>
            <value>The blocks not covered.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.IMethodCoverage.CoveredRate">
            <summary>
            Gets the covered rate.
            </summary>
            <value>The covered rate.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.IMethodCoverage.LinesCovered">
            <summary>
            Gets the lines covered.
            </summary>
            <value>The lines covered.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.IMethodCoverage.LinesPartiallyCovered">
            <summary>
            Gets the lines partially covered.
            </summary>
            <value>The lines partially covered.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.IMethodCoverage.LinesNotCovered">
            <summary>
            Gets the lines not covered.
            </summary>
            <value>The lines not covered.</value>
        </member>
        <member name="T:Ctrip.Duckbill.Test.Coverage.IModuleCoverage">
            <summary>
            Module coverage interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.IModuleCoverage.ModuleName">
            <summary>
            Gets the name of the module.
            </summary>
            <value>The name of the module.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.IModuleCoverage.BlocksCovered">
            <summary>
            Gets the blocks covered.
            </summary>
            <value>The blocks covered.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.IModuleCoverage.BlocksNotCovered">
            <summary>
            Gets the blocks not covered.
            </summary>
            <value>The blocks not covered.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.IModuleCoverage.CoveredRate">
            <summary>
            Gets the covered rate.
            </summary>
            <value>The covered rate.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.IModuleCoverage.LinesCovered">
            <summary>
            Gets the lines covered.
            </summary>
            <value>The lines covered.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.IModuleCoverage.LinesPartiallyCovered">
            <summary>
            Gets the lines partially covered.
            </summary>
            <value>The lines partially covered.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.IModuleCoverage.LinesNotCovered">
            <summary>
            Gets the lines not covered.
            </summary>
            <value>The lines not covered.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.IModuleCoverage.NamespaceCoverages">
            <summary>
            Gets the namespace coverages.
            </summary>
            <value>The namespace coverages.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.IModuleCoverage.ClassesCoverages">
            <summary>
            Gets the classes coverages.
            </summary>
            <value>The classes coverages.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.IModuleCoverage.MethodsCoverages">
            <summary>
            Gets the methods coverages.
            </summary>
            <value>The methods coverages.</value>
        </member>
        <member name="T:Ctrip.Duckbill.Test.Coverage.INamespaceCoverage">
            <summary>
            Namespace coverage interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.INamespaceCoverage.Namespace">
            <summary>
            Gets the namespace.
            </summary>
            <value>The namespace.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.INamespaceCoverage.ModuleName">
            <summary>
            Gets the name of the module.
            </summary>
            <value>The name of the module.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.INamespaceCoverage.BlocksCovered">
            <summary>
            Gets the blocks covered.
            </summary>
            <value>The blocks covered.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.INamespaceCoverage.BlocksNotCovered">
            <summary>
            Gets the blocks not covered.
            </summary>
            <value>The blocks not covered.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.INamespaceCoverage.CoveredRate">
            <summary>
            Gets the covered rate.
            </summary>
            <value>The covered rate.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.INamespaceCoverage.LinesCovered">
            <summary>
            Gets the lines covered.
            </summary>
            <value>The lines covered.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.INamespaceCoverage.LinesPartiallyCovered">
            <summary>
            Gets the lines partially covered.
            </summary>
            <value>The lines partially covered.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.INamespaceCoverage.LinesNotCovered">
            <summary>
            Gets the lines not covered.
            </summary>
            <value>The lines not covered.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.INamespaceCoverage.ClassesCoverages">
            <summary>
            Gets the classes coverages.
            </summary>
            <value>The classes coverages.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.INamespaceCoverage.MethodsCoverages">
            <summary>
            Gets the methods coverages.
            </summary>
            <value>The methods coverages.</value>
        </member>
        <member name="T:Ctrip.Duckbill.Test.Coverage.ITestCoverage">
            <summary>
            Test coverage.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.ITestCoverage.BlocksCovered">
            <summary>
            Gets the blocks covered.
            </summary>
            <value>The blocks covered.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.ITestCoverage.BlocksNotCovered">
            <summary>
            Gets the blocks not covered.
            </summary>
            <value>The blocks not covered.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.ITestCoverage.CoveredRate">
            <summary>
            Gets the covered rate.
            </summary>
            <value>The covered rate.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.ITestCoverage.LinesCovered">
            <summary>
            Gets the lines covered.
            </summary>
            <value>The lines covered.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.ITestCoverage.LinesPartiallyCovered">
            <summary>
            Gets the lines partially covered.
            </summary>
            <value>The lines partially covered.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.ITestCoverage.LinesNotCovered">
            <summary>
            Gets the lines not covered.
            </summary>
            <value>The lines not covered.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.ITestCoverage.ModulesCoverages">
            <summary>
            Gets the namespace coverages.
            </summary>
            <value>The namespace coverages.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.ITestCoverage.NamespaceCoverages">
            <summary>
            Gets the namespace coverages.
            </summary>
            <value>The namespace coverages.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.ITestCoverage.ClassesCoverages">
            <summary>
            Gets the classes coverages.
            </summary>
            <value>The classes coverages.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Coverage.ITestCoverage.MethodsCoverages">
            <summary>
            Gets the methods coverages.
            </summary>
            <value>The methods coverages.</value>
        </member>
        <member name="T:Ctrip.Duckbill.Test.Coverage.ITestCoverageGenerator">
            <summary>
            Test coverage generator.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Coverage.ITestCoverageGenerator.GenerateFromFile(System.String)">
            <summary>
            Generates test coverage from file.
            </summary>
            <param name="file">The file full path.</param>
            <returns>Test coverage..</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Test.Implement.TempFileSystemInfoRepository">
            <summary>
            Temp file system info repository implement.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.Implement.TempFileSystemInfoRepository.currentAppDomain">
            <summary>
            The current application domain.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.Implement.TempFileSystemInfoRepository.staticFile">
            <summary>
            The static file.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.Implement.TempFileSystemInfoRepository.staticDirectory">
            <summary>
            The static directory.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.Implement.TempFileSystemInfoRepository.staticPath">
            <summary>
            The static path.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.Implement.TempFileSystemInfoRepository.guidFactory">
            <summary>
            The unique identifier factory.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.Implement.TempFileSystemInfoRepository.regex">
            <summary>
            The regex.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Implement.TempFileSystemInfoRepository.#ctor(Ctrip.Duckbill.ICurrentAppDomain,Ctrip.Duckbill.IO.IStaticFile,Ctrip.Duckbill.IO.IStaticDirectory,Ctrip.Duckbill.IO.IStaticPath,Ctrip.Duckbill.IGuidFactory,Ctrip.Duckbill.IRegex)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Test.Implement.TempFileSystemInfoRepository" /> class.
            </summary>
            <param name="currentAppDomain">The current application domain.</param>
            <param name="staticFile">The static file.</param>
            <param name="staticDirectory">The static directory.</param>
            <param name="staticPath">The static path.</param>
            <param name="guidFactory">The unique identifier factory.</param>
            <param name="regex">The regex.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Implement.TempFileSystemInfoRepository.CreateFile(System.String)">
            <summary>
            Creates the file.
            </summary>
            <param name="fileNameWithExtension">The file name with extension.</param>
            <returns>Temp file.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Implement.TempFileSystemInfoRepository.CreateFile(System.String,System.String)">
            <summary>
            Creates the file.
            </summary>
            <param name="directory">The directory.</param>
            <param name="fileNameWithExtension">The file name with extension.</param>
            <returns>Temp file.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Implement.TempFileSystemInfoRepository.CreateRandomFile">
            <summary>
            Creates the random file.
            </summary>
            <returns>Temp file.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Implement.TempFileSystemInfoRepository.CreateRandomFile(System.String)">
            <summary>
            Creates the random file.
            </summary>
            <param name="extension">The extension.</param>
            <returns>Temp file.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Implement.TempFileSystemInfoRepository.CreateRandomFile(System.String,System.String)">
            <summary>
            Creates the random file.
            </summary>
            <param name="directory">The directory.</param>
            <param name="extension">The extension.</param>
            <returns>Temp file.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Implement.TempFileSystemInfoRepository.CreateDirectory(System.String)">
            <summary>
            Creates the directory.
            </summary>
            <param name="path">The path.</param>
            <returns>Temp directory.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Implement.TempFileSystemInfoRepository.CreateDirectory(System.String,System.String)">
            <summary>
            Creates the directory.
            </summary>
            <param name="parentPath">The parent path.</param>
            <param name="directoryName">Name of the directory.</param>
            <returns>Temp directory.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Implement.TempFileSystemInfoRepository.CreateRandomDirectory">
            <summary>
            Creates the random directory.
            </summary>
            <returns>Temp directory.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Implement.TempFileSystemInfoRepository.CreateRandomDirectory(System.String)">
            <summary>
            Creates the random directory.
            </summary>
            <param name="parentPath">The parent path.</param>
            <returns>Temp directory.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Implement.TempFileSystemInfoRepository.CleanTempDirectory">
            <summary>
            Cleans the temporary directory.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Test.Implement.TestIISExpressSite">
            <summary>
            Test iis express site.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.Implement.TestIISExpressSite.SiteName">
            <summary>
            The site name.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.Implement.TestIISExpressSite.currentEnvironment">
            <summary>
            The current environment.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.Implement.TestIISExpressSite.configurationDirectory">
            <summary>
            The configuration directory.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.Implement.TestIISExpressSite.configurationFile">
            <summary>
            The configuration file.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.Implement.TestIISExpressSite.iisExpressProcess">
            <summary>
            The IIS express process.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.Implement.TestIISExpressSite.sitePhysicalPath">
            <summary>
            The site physical path.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Implement.TestIISExpressSite.#ctor(System.String,Ctrip.Duckbill.ICurrentEnvironment,Ctrip.Duckbill.Diagnostics.IProcessFactory,Ctrip.Duckbill.Test.ITempFileSystemInfoRepository,Ctrip.Duckbill.IRandom)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Test.Implement.TestIISExpressSite" /> class.
            </summary>
            <param name="sitePhysicalPath">The site physical path.</param>
            <param name="currentEnvironment">The current environment.</param>
            <param name="processFactory">The process factory.</param>
            <param name="tempFileSystemInfoRepository">The temporary file system information repository.</param>
            <param name="random">The random.</param>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Implement.TestIISExpressSite.Host">
            <summary>
            Gets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Implement.TestIISExpressSite.Port">
            <summary>
            Gets the port.
            </summary>
            <value>The port.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Implement.TestIISExpressSite.IsAlive">
            <summary>
            Gets a value indicating whether this instance is alive.
            </summary>
            <value><c>true</c> if this instance is alive; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Implement.TestIISExpressSite.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Implement.TestIISExpressSite.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Implement.TestIISExpressSite.GenerateConfiguration">
            <summary>
            Generates the configuration.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Test.Implement.TestIISExpressSiteFactory">
            <summary>
            Test IIS express site factory.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.Implement.TestIISExpressSiteFactory.currentEnvironment">
            <summary>
            The current environment.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.Implement.TestIISExpressSiteFactory.processFactory">
            <summary>
            The process factory.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.Implement.TestIISExpressSiteFactory.tempFileSystemInfoRepository">
            <summary>
            The temporary file system information repository.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.Implement.TestIISExpressSiteFactory.random">
            <summary>
            The random.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.Implement.TestIISExpressSiteFactory.waiter">
            <summary>
            The waiter.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Implement.TestIISExpressSiteFactory.#ctor(Ctrip.Duckbill.ICurrentEnvironment,Ctrip.Duckbill.Diagnostics.IProcessFactory,Ctrip.Duckbill.Test.ITempFileSystemInfoRepository,Ctrip.Duckbill.IRandom,Ctrip.Duckbill.Test.IWaiter)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Test.Implement.TestIISExpressSiteFactory" /> class.
            </summary>
            <param name="currentEnvironment">The current environment.</param>
            <param name="processFactory">The process factory.</param>
            <param name="tempFileSystemInfoRepository">The temporary file system information repository.</param>
            <param name="random">The random.</param>
            <param name="waiter">The waiter.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Implement.TestIISExpressSiteFactory.StartIISExpressSite(System.String)">
            <summary>
            Starts the IIS express site.
            </summary>
            <param name="sitePhysicalPath">The site physical path.</param>
            <returns>Test IIS Express site.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Test.Implement.TestTempDirectory">
            <summary>
            Test temp directory.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.Implement.TestTempDirectory.currentAppDomain">
            <summary>
            The current application domain.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.Implement.TestTempDirectory.staticDirectory">
            <summary>
            The static directory.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.Implement.TestTempDirectory.staticFile">
            <summary>
            The static file.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.Implement.TestTempDirectory.staticPath">
            <summary>
            The static path.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.Implement.TestTempDirectory.guidFactory">
            <summary>
            The unique identifier factory.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Implement.TestTempDirectory.#ctor(System.String,System.String,Ctrip.Duckbill.ICurrentAppDomain,Ctrip.Duckbill.IO.IStaticDirectory,Ctrip.Duckbill.IO.IStaticFile,Ctrip.Duckbill.IO.IStaticPath,Ctrip.Duckbill.IGuidFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Test.Implement.TestTempDirectory" /> class.
            </summary>
            <param name="parentDirectory">The parent directory.</param>
            <param name="directoryName">Name of the directory.</param>
            <param name="currentAppDomain">The current application domain.</param>
            <param name="staticDirectory">The static directory.</param>
            <param name="staticFile">The static file.</param>
            <param name="staticPath">The static path.</param>
            <param name="guidFactory">The unique identifier factory.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Implement.TestTempDirectory.#ctor(Ctrip.Duckbill.IGuidFactory,Ctrip.Duckbill.ICurrentAppDomain,Ctrip.Duckbill.IO.IStaticDirectory,Ctrip.Duckbill.IO.IStaticFile,Ctrip.Duckbill.IO.IStaticPath)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Test.Implement.TestTempDirectory" /> class.
            </summary>
            <param name="guidFactory">The unique identifier factory.</param>
            <param name="currentAppDomain">The current application domain.</param>
            <param name="staticDirectory">The static directory.</param>
            <param name="staticFile">The static file.</param>
            <param name="staticPath">The static path.</param>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Implement.TestTempDirectory.DirectoryName">
            <summary>
            Gets the name of the directory.
            </summary>
            <value>The name of the directory.</value>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Implement.TestTempDirectory.CreateRandomFile">
            <summary>
            Creates the random file.
            </summary>
            <returns>Temp file.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Implement.TestTempDirectory.CreateRandomFile(System.String)">
            <summary>
            Creates the random file.
            </summary>
            <param name="extension">The extension.</param>
            <returns>Temp file.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Implement.TestTempDirectory.CreateFile(System.String)">
            <summary>
            Creates the file.
            </summary>
            <param name="fileNameWithExtension">The file name with extension.</param>
            <returns>Temp file.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Implement.TestTempDirectory.CreateDirectory(System.String)">
            <summary>
            Creates the directory.
            </summary>
            <param name="directoryName">The path.</param>
            <returns>Temp directory.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Implement.TestTempDirectory.CreateRandomDirectory">
            <summary>
            Creates the random directory.
            </summary>
            <returns>Temp directory.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Implement.TestTempDirectory.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Implement.TestTempDirectory.GenerateRandomDirectoryName(System.String)">
            <summary>
            Generates the random name of the directory.
            </summary>
            <param name="parentDirectory">The parent directory.</param>
            <returns>Directory name.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Test.Implement.TestTempFile">
            <summary>
            Temp file.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.Implement.TestTempFile.currentAppDomain">
            <summary>
            The current application domain.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.Implement.TestTempFile.staticFile">
            <summary>
            The static file.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.Implement.TestTempFile.staticPath">
            <summary>
            The static path.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Implement.TestTempFile.#ctor(System.String,Ctrip.Duckbill.ICurrentAppDomain,Ctrip.Duckbill.IO.IStaticFile,Ctrip.Duckbill.IO.IStaticPath)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Test.Implement.TestTempFile" /> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="currentAppDomain">The current application domain.</param>
            <param name="staticFile">The static file.</param>
            <param name="staticPath">The static path.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Implement.TestTempFile.#ctor(System.String,System.String,Ctrip.Duckbill.ICurrentAppDomain,Ctrip.Duckbill.IO.IStaticFile,Ctrip.Duckbill.IO.IStaticPath,Ctrip.Duckbill.IGuidFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Test.Implement.TestTempFile" /> class.
            </summary>
            <param name="directory">The directory.</param>
            <param name="extension">The extension.</param>
            <param name="currentAppDomain">The current application domain.</param>
            <param name="staticFile">The static file.</param>
            <param name="staticPath">The static path.</param>
            <param name="guidFactory">The unique identifier factory.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Implement.TestTempFile.#ctor(Ctrip.Duckbill.ICurrentAppDomain,Ctrip.Duckbill.IO.IStaticFile,Ctrip.Duckbill.IO.IStaticPath)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Test.Implement.TestTempFile" /> class.
            </summary>
            <param name="currentAppDomain">The current application domain.</param>
            <param name="staticFile">The static file.</param>
            <param name="staticPath">The static path.</param>
        </member>
        <member name="P:Ctrip.Duckbill.Test.Implement.TestTempFile.FileName">
            <summary>
            Gets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Implement.TestTempFile.ReadAll">
            <summary>
            Reads all.
            </summary>
            <returns>File content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Implement.TestTempFile.WriteAll(System.String)">
            <summary>
            Writes all.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Implement.TestTempFile.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Implement.TestTempFile.GenerateFileName(Ctrip.Duckbill.IGuidFactory,System.String,System.String)">
            <summary>
            Generates the name of the file.
            </summary>
            <param name="guidFactory">The unique identifier factory.</param>
            <param name="directory">The directory.</param>
            <param name="extension">The extension.</param>
            <returns>File name.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Test.Implement.Waiter">
            <summary>
            Test waiter.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.Implement.Waiter.now">
            <summary>
            The now.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Implement.Waiter.#ctor(Ctrip.Duckbill.INow)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Test.Implement.Waiter"/> class.
            </summary>
            <param name="now">The now.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Test.Implement.Waiter.Wait(System.TimeSpan)">
            <summary>
            Waits the specified time span.
            </summary>
            <param name="timeSpan">The time span.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Test.ITempDirectory">
            <summary>
            Temp test directory.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Test.ITempDirectory.DirectoryName">
            <summary>
            Gets the name of the directory.
            </summary>
            <value>The name of the directory.</value>
        </member>
        <member name="M:Ctrip.Duckbill.Test.ITempDirectory.CreateRandomFile">
            <summary>
            Creates the random file.
            </summary>
            <returns>Temp file.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.ITempDirectory.CreateRandomFile(System.String)">
            <summary>
            Creates the random file.
            </summary>
            <param name="extension">The extension.</param>
            <returns>Temp file.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.ITempDirectory.CreateFile(System.String)">
            <summary>
            Creates the file.
            </summary>
            <param name="fileNameWithExtension">The file name with extension.</param>
            <returns>Temp file.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.ITempDirectory.CreateDirectory(System.String)">
            <summary>
            Creates the directory.
            </summary>
            <param name="directoryName">The path.</param>
            <returns>Temp directory.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.ITempDirectory.CreateRandomDirectory">
            <summary>
            Creates the random directory.
            </summary>
            <returns>Temp directory.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Test.ITempFile">
            <summary>
            Temp test file.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Test.ITempFile.FileName">
            <summary>
            Gets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="M:Ctrip.Duckbill.Test.ITempFile.ReadAll">
            <summary>
            Reads all.
            </summary>
            <returns>File content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.ITempFile.WriteAll(System.String)">
            <summary>
            Writes all.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Test.ITempFileSystemInfoRepository">
            <summary>
            Temp file system info repository.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Test.ITempFileSystemInfoRepository.CreateFile(System.String)">
            <summary>
            Creates the file.
            </summary>
            <param name="fileNameWithExtension">The file name with extension.</param>
            <returns>Temp file.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.ITempFileSystemInfoRepository.CreateFile(System.String,System.String)">
            <summary>
            Creates the file.
            </summary>
            <param name="directory">The directory.</param>
            <param name="fileNameWithExtension">The file name with extension.</param>
            <returns>Temp file.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.ITempFileSystemInfoRepository.CreateRandomFile">
            <summary>
            Creates the random file.
            </summary>
            <returns>Temp file.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.ITempFileSystemInfoRepository.CreateRandomFile(System.String)">
            <summary>
            Creates the random file.
            </summary>
            <param name="extension">The extension.</param>
            <returns>Temp file.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.ITempFileSystemInfoRepository.CreateRandomFile(System.String,System.String)">
            <summary>
            Creates the random file.
            </summary>
            <param name="directory">The directory.</param>
            <param name="extension">The extension.</param>
            <returns>Temp file.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.ITempFileSystemInfoRepository.CreateDirectory(System.String)">
            <summary>
            Creates the directory.
            </summary>
            <param name="path">The path.</param>
            <returns>Temp directory.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.ITempFileSystemInfoRepository.CreateDirectory(System.String,System.String)">
            <summary>
            Creates the directory.
            </summary>
            <param name="parentPath">The parent path.</param>
            <param name="directoryName">Name of the directory.</param>
            <returns>Temp directory.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.ITempFileSystemInfoRepository.CreateRandomDirectory">
            <summary>
            Creates the random directory.
            </summary>
            <returns>Temp directory.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.ITempFileSystemInfoRepository.CreateRandomDirectory(System.String)">
            <summary>
            Creates the random directory.
            </summary>
            <param name="parentPath">The parent path.</param>
            <returns>Temp directory.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.ITempFileSystemInfoRepository.CleanTempDirectory">
            <summary>
            Cleans the temporary directory.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Test.ITestIISExpressSite">
            <summary>
            Test IIS Express site.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Test.ITestIISExpressSite.Host">
            <summary>
            Gets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.ITestIISExpressSite.Port">
            <summary>
            Gets the port.
            </summary>
            <value>The port.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.ITestIISExpressSite.IsAlive">
            <summary>
            Gets a value indicating whether this instance is alive.
            </summary>
            <value><c>true</c> if this instance is alive; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Ctrip.Duckbill.Test.ITestIISExpressSiteFactory">
            <summary>
            Test IIS Express site factory.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Test.ITestIISExpressSiteFactory.StartIISExpressSite(System.String)">
            <summary>
            Starts the IIS express site.
            </summary>
            <param name="sitePhysicalPath">The site physical path.</param>
            <returns>Test IIS Express site.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Test.IWaiter">
            <summary>
            Test waiter interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Test.IWaiter.Wait(System.TimeSpan)">
            <summary>
            Waits the specified time span.
            </summary>
            <param name="timeSpan">The time span.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsole">
            <summary>
            Base "VSTest.Console.exe" command.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsole.MyProcess">
            <summary>
            My process.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsole.#ctor(Ctrip.Duckbill.Diagnostics.IProcessFactory,Ctrip.Duckbill.Test.Configuration.ITestConfigurationRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsole" /> class.
            </summary>
            <param name="processFactory">The process factory.</param>
            <param name="configurationRepository">The configuration repository.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsole.Dispose">
            <summary>
            Dispose my resource.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsole.Start">
            <summary>
            Start run vstest console.
            </summary>
            <returns>Console display string.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsole.GetArguments">
            <summary>
            Gets the arguments.
            </summary>
            <returns>Command arguments.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleExecuteTestFileCommand">
            <summary>
            VSTest.Console.exe execute test file command.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleExecuteTestFileCommand.regex">
            <summary>
            The regex.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleExecuteTestFileCommand.xmlFile">
            <summary>
            The XML file accessor.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleExecuteTestFileCommand.testCoverageGenerator">
            <summary>
            The test coverage generator.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleExecuteTestFileCommand.myResult">
            <summary>
            Test result.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleExecuteTestFileCommand.testedFile">
            <summary>
            The tested file.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleExecuteTestFileCommand.#ctor(Ctrip.Duckbill.Diagnostics.IProcessFactory,Ctrip.Duckbill.Test.Configuration.ITestConfigurationRepository,Ctrip.Duckbill.IRegex,Ctrip.Duckbill.Xml.IXmlFile)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleExecuteTestFileCommand" /> class.
            </summary>
            <param name="processFactory">The process factory.</param>
            <param name="configurationRepository">The configuration repository.</param>
            <param name="regex">The regex.</param>
            <param name="xmlFile">The XML file accessor.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleExecuteTestFileCommand.#ctor(Ctrip.Duckbill.Diagnostics.IProcessFactory,Ctrip.Duckbill.Test.Configuration.ITestConfigurationRepository,Ctrip.Duckbill.IRegex,Ctrip.Duckbill.Xml.IXmlFile,Ctrip.Duckbill.Test.Coverage.ITestCoverageGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleExecuteTestFileCommand" /> class.
            </summary>
            <param name="processFactory">The process factory.</param>
            <param name="configurationRepository">The configuration repository.</param>
            <param name="regex">The regex.</param>
            <param name="xmlFile">The XML file accessor.</param>
            <param name="testCoverageGenerator">The test coverage generator.</param>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleExecuteTestFileCommand.CommandLine">
            <summary>
            Gets the command line.
            </summary>
            <value>The command line.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleExecuteTestFileCommand.TestFiles">
            <summary>
            Gets test files.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleExecuteTestFileCommand.SettingFile">
            <summary>
            Gets or sets the setting file.
            </summary>
            <value>The setting file.</value>
        </member>
        <member name="M:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleExecuteTestFileCommand.AddFile(System.String)">
            <summary>
            Adds the test file.
            </summary>
            <param name="file">The test file.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleExecuteTestFileCommand.Run">
            <summary>
            Runs this command.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleExecuteTestFileCommand.GetResult">
            <summary>
            Gets test result.
            </summary>
            <returns>VSTestConsole test result.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleExecuteTestFileCommand.GetArguments">
            <summary>
            Gets the arguments.
            </summary>
            <returns>Command arguments.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleExecuteTestFileCommand.GenerateTestsResult(System.String)">
            <summary>
            Generates tests result.
            </summary>
            <param name="output">The output string.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleExecuteTestFileCommand.ReadCoverage(System.String)">
            <summary>
            Reads the coverage.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleExecuteTestFileCommand.ReadLog(System.String)">
            <summary>
            Reads the log.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleExecuteTestFileCommand.GenerateVSUnitTestResult(System.Xml.Linq.XElement,System.Xml.Linq.XElement)">
            <summary>
            Generates the vs unit test result.
            </summary>
            <param name="unitTestResult">The unit test result.</param>
            <param name="unitTest">The unit test.</param>
            <returns>VSTestConsole unit test result.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleExistTestCommand">
            <summary>
            VSTest.Console.exe exist test command.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleExistTestCommand.existTest">
            <summary>
            Check whether exist test.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleExistTestCommand.#ctor(Ctrip.Duckbill.Diagnostics.IProcessFactory,Ctrip.Duckbill.Test.Configuration.ITestConfigurationRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleExistTestCommand"/> class.
            </summary>
            <param name="processFactory">The process factory.</param>
            <param name="configurationRepository">The configuration repository.</param>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleExistTestCommand.CommandLine">
            <summary>
            Gets the command line.
            </summary>
            <value>The command line.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleExistTestCommand.TestFile">
            <summary>
            Gets or sets test file.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleExistTestCommand.Run">
            <summary>
            Runs this command.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleExistTestCommand.ExistTest">
            <summary>
            Check whether exist test.
            </summary>
            <returns><c>true</c> if exist tests, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleExistTestCommand.GetArguments">
            <summary>
            Gets the arguments.
            </summary>
            <returns>Command arguments.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleExistTestCommand.GenerateExistTests(System.String)">
            <summary>
            Generates whether exist tests.
            </summary>
            <param name="output">The output string.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleListTestCommand">
            <summary>
            VSTest.Console.exe list test command.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleListTestCommand.regex">
            <summary>
            The regex.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleListTestCommand.myTests">
            <summary>
            Tests name.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleListTestCommand.#ctor(Ctrip.Duckbill.Diagnostics.IProcessFactory,Ctrip.Duckbill.Test.Configuration.ITestConfigurationRepository,Ctrip.Duckbill.IRegex)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleListTestCommand"/> class.
            </summary>
            <param name="processFactory">The process factory.</param>
            <param name="configurationRepository">The configuration repository.</param>
            <param name="regex">The regex.</param>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleListTestCommand.CommandLine">
            <summary>
            Gets the command line.
            </summary>
            <value>The command line.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleListTestCommand.TestFile">
            <summary>
            Gets or sets test file.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleListTestCommand.Run">
            <summary>
            Runs this command.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleListTestCommand.GetTests">
            <summary>
            Gets tests name.
            </summary>
            <returns>Tests name.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleListTestCommand.GetArguments">
            <summary>
            Gets the arguments.
            </summary>
            <returns>Command arguments.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleListTestCommand.GenerateTestsName(System.String)">
            <summary>
            Generates the name of the tests.
            </summary>
            <param name="output">The output string.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleTestResult">
            <summary>
            VSTest.Console.exe test result.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleTestResult.ID">
            <summary>
            Gets or sets the test run identifier.
            </summary>
            <value>The test run identifier.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleTestResult.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleTestResult.StartTime">
            <summary>
            Gets or sets the start time.
            </summary>
            <value>The start time.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleTestResult.FinishTime">
            <summary>
            Gets or sets the finish time.
            </summary>
            <value>The finish time.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleTestResult.LoggerFile">
            <summary>
            Gets or sets the file.
            </summary>
            <value>The file.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleTestResult.CoverageFile">
            <summary>
            Gets or sets the coverage file.
            </summary>
            <value>The coverage file.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleTestResult.IsSuccessful">
            <summary>
            Gets or sets a value indicating whether this test is successful.
            </summary>
            <value><c>true</c> if this test is successful; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleTestResult.TotalTestCount">
            <summary>
            Gets or sets the total test count.
            </summary>
            <value>The total test count.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleTestResult.ExecutedTestCount">
            <summary>
            Gets or sets the executed test count.
            </summary>
            <value>The executed test count.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleTestResult.PassedTestCount">
            <summary>
            Gets or sets the passed test count.
            </summary>
            <value>The passed test count.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleTestResult.FailedTestCount">
            <summary>
            Gets or sets the failed test count.
            </summary>
            <value>The failed test count.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleTestResult.Detail">
            <summary>
            Gets or sets the unit tests result.
            </summary>
            <value>The unit tests result.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleTestResult.Coverage">
            <summary>
            Gets or sets the test coverage.
            </summary>
            <value>The test coverage.</value>
        </member>
        <member name="T:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleUnitTestResult">
            <summary>
            VSTest.Console.exe unit test result.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleUnitTestResult.TestName">
            <summary>
            Gets or sets test name.
            </summary>
            <value>The name of the test.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleUnitTestResult.Result">
            <summary>
            Gets or sets test result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleUnitTestResult.Duration">
            <summary>
            Gets or sets the duration.
            </summary>
            <value>The duration.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleUnitTestResult.StandardOutput">
            <summary>
            Gets or sets the standard output.
            </summary>
            <value>The standard output.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleUnitTestResult.ExceptionMessage">
            <summary>
            Gets or sets the exception message.
            </summary>
            <value>The exception message.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleUnitTestResult.ExceptionStackTrace">
            <summary>
            Gets or sets the exception stack trace.
            </summary>
            <value>The exception stack trace.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleUnitTestResult.Assembly">
            <summary>
            Gets or sets the assembly.
            </summary>
            <value>The assembly.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.Implement.VSTestConsoleUnitTestResult.Class">
            <summary>
            Gets or sets class who contains the test.
            </summary>
            <value>The name of the class.</value>
        </member>
        <member name="T:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleCommand">
            <summary>
            Special vstest.console command.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleCommand.CommandLine">
            <summary>
            Gets the command line.
            </summary>
            <value>The command line.</value>
        </member>
        <member name="M:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleCommand.Run">
            <summary>
            Runs this command.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleExecuteTestFileCommand">
            <summary>
            VSTest.Console.exe execute test file command.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleExecuteTestFileCommand.TestFiles">
            <summary>
            Gets test files.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleExecuteTestFileCommand.SettingFile">
            <summary>
            Gets or sets the setting file.
            </summary>
            <value>The setting file.</value>
        </member>
        <member name="M:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleExecuteTestFileCommand.AddFile(System.String)">
            <summary>
            Adds the test file.
            </summary>
            <param name="file">The test file.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleExecuteTestFileCommand.GetResult">
            <summary>
            Gets test result.
            </summary>
            <returns>VSTestConsole test result.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleExistTestCommand">
            <summary>
            VSTest.Console.exe exist test command.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleExistTestCommand.TestFile">
            <summary>
            Gets or sets test file.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleExistTestCommand.ExistTest">
            <summary>
            Check whether exist test.
            </summary>
            <returns><c>true</c> if exist tests, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleListTestCommand">
            <summary>
            VSTest.Console.exe list test command.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleListTestCommand.TestFile">
            <summary>
            Gets or sets test file.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleListTestCommand.GetTests">
            <summary>
            Gets tests name.
            </summary>
            <returns>Tests name.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleTestResult">
            <summary>
            VSTest.Console.exe Test result.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleTestResult.ID">
            <summary>
            Gets the test run identifier.
            </summary>
            <value>The test run identifier.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleTestResult.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleTestResult.StartTime">
            <summary>
            Gets the start time.
            </summary>
            <value>The start time.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleTestResult.FinishTime">
            <summary>
            Gets the finish time.
            </summary>
            <value>The finish time.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleTestResult.LoggerFile">
            <summary>
            Gets the file.
            </summary>
            <value>The file.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleTestResult.CoverageFile">
            <summary>
            Gets the coverage file.
            </summary>
            <value>The coverage file.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleTestResult.IsSuccessful">
            <summary>
            Gets a value indicating whether this test is successful.
            </summary>
            <value><c>true</c> if this test is successful; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleTestResult.TotalTestCount">
            <summary>
            Gets the total test count.
            </summary>
            <value>The total test count.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleTestResult.ExecutedTestCount">
            <summary>
            Gets the executed test count.
            </summary>
            <value>The executed test count.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleTestResult.PassedTestCount">
            <summary>
            Gets the passed test count.
            </summary>
            <value>The passed test count.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleTestResult.FailedTestCount">
            <summary>
            Gets the failed test count.
            </summary>
            <value>The failed test count.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleTestResult.Detail">
            <summary>
            Gets the unit tests result.
            </summary>
            <value>The unit tests result.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleTestResult.Coverage">
            <summary>
            Gets the test coverage.
            </summary>
            <value>The test coverage.</value>
        </member>
        <member name="T:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleUnitTestResult">
            <summary>
            VSTest.Console.exe item test result.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleUnitTestResult.TestName">
            <summary>
            Gets test name.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleUnitTestResult.Result">
            <summary>
            Gets test result.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleUnitTestResult.Duration">
            <summary>
            Gets the duration.
            </summary>
            <value>The duration.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleUnitTestResult.StandardOutput">
            <summary>
            Gets the standard output.
            </summary>
            <value>The standard output.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleUnitTestResult.ExceptionMessage">
            <summary>
            Gets the exception message.
            </summary>
            <value>The exception message.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleUnitTestResult.ExceptionStackTrace">
            <summary>
            Gets the exception stack trace.
            </summary>
            <value>The exception stack trace.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleUnitTestResult.Assembly">
            <summary>
            Gets the assembly.
            </summary>
            <value>The assembly.</value>
        </member>
        <member name="P:Ctrip.Duckbill.Test.TestConsole.IVSTestConsoleUnitTestResult.Class">
            <summary>
            Gets class who contains the test.
            </summary>
            <value>The name of the class.</value>
        </member>
        <member name="T:Ctrip.Duckbill.Test.TestConsole.VSTestConsoleItemTestResultType">
            <summary>
            VSTest.Console.exe item test result type.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.TestConsole.VSTestConsoleItemTestResultType.NA">
            <summary>
            Not available.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.TestConsole.VSTestConsoleItemTestResultType.Passed">
            <summary>
            Test pass.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.TestConsole.VSTestConsoleItemTestResultType.Failed">
            <summary>
            Test fail.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Test.TestConsole.VSTestConsoleItemTestResultType.Skipped">
            <summary>
            Test skip.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Threading.ICurrentThread">
            <summary>
            Current thread interface.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Threading.ICurrentThread.ManagedThreadId">
            <summary>
            Gets current managed thread id.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Threading.ICurrentThread.CurrentUICulture">
            <summary>
            Gets or sets the current UI culture.
            </summary>
            <value>The current UI culture.</value>
        </member>
        <member name="M:Ctrip.Duckbill.Threading.ICurrentThread.Sleep(System.Int32)">
            <summary>
            Suspends the current thread for a specified time.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds for which the thread is blocked. Specify zero (0) to indicate that this thread should be suspended to allow other waiting threads to execute. Specify System.Threading.Timeout.Infinite to block the thread indefinitely.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Threading.ICurrentThread.Sleep(System.TimeSpan)">
            <summary>
            Blocks the current thread for a specified time.
            </summary>
            <param name="timeout">A System.TimeSpan set to the amount of time for which the thread is blocked. Specify zero to indicate that this thread should be suspended to allow other waiting threads to execute. Specify System.Threading.Timeout.Infinite to block the thread indefinitely.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Threading.Implement.CurrentThread">
            <summary>
            Default current thread.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Threading.Implement.CurrentThread.ManagedThreadId">
            <summary>
            Gets current managed thread id.
            </summary>
        </member>
        <member name="P:Ctrip.Duckbill.Threading.Implement.CurrentThread.CurrentUICulture">
            <summary>
            Gets or sets the current UI culture.
            </summary>
            <value>The current UI culture.</value>
        </member>
        <member name="M:Ctrip.Duckbill.Threading.Implement.CurrentThread.Sleep(System.Int32)">
            <summary>
            Suspends the current thread for a specified time.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds for which the thread is blocked. Specify zero (0) to indicate that this thread should be suspended to allow other waiting threads to execute. Specify System.Threading.Timeout.Infinite to block the thread indefinitely.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Threading.Implement.CurrentThread.Sleep(System.TimeSpan)">
            <summary>
            Blocks the current thread for a specified time.
            </summary>
            <param name="timeout">A System.TimeSpan set to the amount of time for which the thread is blocked. Specify zero to indicate that this thread should be suspended to allow other waiting threads to execute. Specify System.Threading.Timeout.Infinite to block the thread indefinitely.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Threading.Implement.TaskFactoryWrapper">
            <summary>
            Task factory wrapper.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Threading.Implement.TaskFactoryWrapper.StartNew(System.Action)">
            <summary>
            Starts the new.
            </summary>
            <param name="action">The action.</param>
            <returns>Task interface.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Threading.Implement.TaskWrapper">
            <summary>
            Task wrapper.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Threading.Implement.TaskWrapper.myTask">
            <summary>
            My task.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Threading.Implement.TaskWrapper.#ctor(System.Threading.Tasks.Task)">
            <summary>
            Initializes a new instance of the <see cref="T:Ctrip.Duckbill.Threading.Implement.TaskWrapper"/> class.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Threading.Implement.TaskWrapper.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Threading.ITask">
            <summary>
            Task interface.
            </summary>
        </member>
        <member name="T:Ctrip.Duckbill.Threading.ITaskFactory">
            <summary>
            Task factory interface.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Threading.ITaskFactory.StartNew(System.Action)">
            <summary>
            Starts the new.
            </summary>
            <param name="action">The action.</param>
            <returns>Task interface.</returns>
        </member>
        <member name="T:Ctrip.Duckbill.Xml.Implement.DefaultXmlFile">
            <summary>
            Default xml file.
            </summary>
        </member>
        <member name="F:Ctrip.Duckbill.Xml.Implement.DefaultXmlFile.staticFile">
            <summary>
            Static file.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Xml.Implement.DefaultXmlFile.#ctor(Ctrip.Duckbill.IO.IStaticFile)">
            <summary>
            Initializes a new instance of the DefaultXmlFile class.
            </summary>
            <param name="staticFile">Static file.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Xml.Implement.DefaultXmlFile.ReadString(System.String)">
            <summary>
            Read string from xml file.
            </summary>
            <param name="file">Xml file path.</param>
            <returns>Xml string content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Xml.Implement.DefaultXmlFile.ReadXElement(System.String)">
            <summary>
            Read xelement from xml file.
            </summary>
            <param name="file">Xml file path.</param>
            <returns>Xml element.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Xml.Implement.DefaultXmlFile.Save(System.String,System.String)">
            <summary>
            Save string to xml file.
            </summary>
            <param name="file">Xml file Path.</param>
            <param name="content">Xml string content.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Xml.Implement.DefaultXmlFile.Save(System.String,System.Xml.Linq.XElement)">
            <summary>
            Save xelement to xml file.
            </summary>
            <param name="file">Xml file Path.</param>
            <param name="content">Xml element content.</param>
        </member>
        <member name="T:Ctrip.Duckbill.Xml.IXmlFile">
            <summary>
            Xml file.
            </summary>
        </member>
        <member name="M:Ctrip.Duckbill.Xml.IXmlFile.ReadString(System.String)">
            <summary>
            Read string from xml file.
            </summary>
            <param name="file">Xml file path.</param>
            <returns>Xml string content.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Xml.IXmlFile.ReadXElement(System.String)">
            <summary>
            Read xelement from xml file.
            </summary>
            <param name="file">Xml file path.</param>
            <returns>Xml element.</returns>
        </member>
        <member name="M:Ctrip.Duckbill.Xml.IXmlFile.Save(System.String,System.String)">
            <summary>
            Save string to xml file.
            </summary>
            <param name="file">Xml file Path.</param>
            <param name="content">Xml string content.</param>
        </member>
        <member name="M:Ctrip.Duckbill.Xml.IXmlFile.Save(System.String,System.Xml.Linq.XElement)">
            <summary>
            Save xelement to xml file.
            </summary>
            <param name="file">Xml file Path.</param>
            <param name="content">Xml element content.</param>
        </member>
        <member name="T:Ctrip.Wireless.Html5.Configuration.IConfigurationManager">
            <summary>
            Configuration manager interface. This interface is used to get configuration instance.
            </summary>
        </member>
        <member name="P:Ctrip.Wireless.Html5.Configuration.IConfigurationManager.Folder">
            <summary>
            Gets configuration folder.
            </summary>
        </member>
        <member name="M:Ctrip.Wireless.Html5.Configuration.IConfigurationManager.GetConfiguration``1">
            <summary>
            Get an instance of the given configuration with bizunit.
            </summary>
            <typeparam name="TConfiguration">Type of configuration.</typeparam>
            <returns>The requested configuration.</returns>
        </member>
        <member name="M:Ctrip.Wireless.Html5.Configuration.IConfigurationManager.GetConfiguration``1(System.Boolean)">
            <summary>
            Get an instance of the given configuration.
            </summary>
            <typeparam name="TConfiguration">Type of configuration.</typeparam>
            <param name="withBizUnit">Whether with biz unit name.</param>
            <returns>The requested configuration.</returns>
        </member>
        <member name="M:Ctrip.Wireless.Html5.Configuration.IConfigurationManager.SaveConfiguration``1(``0)">
            <summary>
            Save configuration to file with bizunit.
            </summary>
            <typeparam name="TConfiguration">Type of configuration.</typeparam>
            <param name="configuration">Configuration entity.</param>
        </member>
        <member name="M:Ctrip.Wireless.Html5.Configuration.IConfigurationManager.SaveConfiguration``1(``0,System.Boolean)">
            <summary>
            Save configuration to file.
            </summary>
            <typeparam name="TConfiguration">Type of configuration.</typeparam>
            <param name="configuration">Configuration entity.</param>
            <param name="withBizUnit">Whether with biz unit name.</param>
        </member>
        <member name="M:Ctrip.Wireless.Html5.Configuration.IConfigurationManager.GetConfiguration``1(System.String)">
            <summary>
            Get an instance of the given configuration with bizunit.
            </summary>
            <typeparam name="TConfiguration">Type of configuration.</typeparam>
            <param name="filePath">Config file path. File path is support absolute and relative paths. Relastive path is base on appdomain + configuration folder.</param>
            <returns>The requested configuration.</returns>
        </member>
        <member name="M:Ctrip.Wireless.Html5.Configuration.IConfigurationManager.GetConfiguration``1(System.String,System.Boolean)">
            <summary>
            Get an instance of the given configuration.
            </summary>
            <typeparam name="TConfiguration">Type of configuration.</typeparam>
            <param name="filePath">Config file path. File path is support absolute and relative paths. Relastive path is base on appdomain + configuration folder.</param>
            <param name="withBizUnit">Whether with biz unit name.</param>
            <returns>The requested configuration.</returns>
        </member>
        <member name="M:Ctrip.Wireless.Html5.Configuration.IConfigurationManager.SaveConfiguration``1(``0,System.String)">
            <summary>
            Save configuration to file with bizunit.
            </summary>
            <typeparam name="TConfiguration">Type of configuration.</typeparam>
            <param name="configuration">Configuration entity.</param>
            <param name="filePath">Config file path. File path is support absolute and relative paths. Relastive path is base on appdomain + configuration folder.</param>
        </member>
        <member name="M:Ctrip.Wireless.Html5.Configuration.IConfigurationManager.SaveConfiguration``1(``0,System.String,System.Boolean)">
            <summary>
            Save configuration to file.
            </summary>
            <typeparam name="TConfiguration">Type of configuration.</typeparam>
            <param name="configuration">Configuration entity.</param>
            <param name="filePath">Config file path. File path is support absolute and relative paths. Relastive path is base on appdomain + configuration folder.</param>
            <param name="withBizUnit">Whether with biz unit name.</param>
        </member>
        <member name="M:Ctrip.Wireless.Html5.Configuration.IConfigurationManager.GetConfigurationByKey``1(System.String)">
            <summary>
            Get an instance of the given configuration by key with bizunit.
            </summary>
            <typeparam name="TConfiguration">Type of configuration.</typeparam>
            <param name="key">Requested key.</param>
            <returns>The requested configuration.</returns>
        </member>
        <member name="M:Ctrip.Wireless.Html5.Configuration.IConfigurationManager.GetConfigurationByKey``1(System.String,System.Boolean)">
            <summary>
            Get an instance of the given configuration by key.
            </summary>
            <typeparam name="TConfiguration">Type of configuration.</typeparam>
            <param name="key">Requested key.</param>
            <param name="withBizUnit">Whether with biz unit name.</param>
            <returns>The requested configuration.</returns>
        </member>
        <member name="M:Ctrip.Wireless.Html5.Configuration.IConfigurationManager.SaveConfigurationByKey``1(``0,System.String)">
            <summary>
            Save configuration to file by key with bizunit.
            </summary>        
            <typeparam name="TConfiguration">Type of configuration.</typeparam>
            <param name="configuration">Configuration entity.</param>
            <param name="key">Requested key.</param>
        </member>
        <member name="M:Ctrip.Wireless.Html5.Configuration.IConfigurationManager.SaveConfigurationByKey``1(``0,System.String,System.Boolean)">
            <summary>
            Save configuration to file by key.
            </summary>        
            <typeparam name="TConfiguration">Type of configuration.</typeparam>
            <param name="configuration">Configuration entity.</param>
            <param name="key">Requested key.</param>
            <param name="withBizUnit">Whether with biz unit name.</param>
        </member>
    </members>
</doc>
